/**
 * win - Libreria para web aplicaciones RIA
 * @version v1.0.0
 * @link    logicalsoft.co
 * @author  LogicalSoft SAS (Twitter @logicalsoft || email soporte@logicalsoft.co)
 * @license (MIT)
 */
(function() {
  "use strict";
  var Win,
    hasProp1 = {}.hasOwnProperty;

  if (typeof jQuery === 'undefined') {
    console.log('Recuerde definir la libreria JQuery antes de WinJs');
  }

  Win = (function() {
    var $W, CLASS_SELECTOR, ELEMENT_TYPES, EMPTY_ARRAY, ID_SELECTOR, IS_HTML_FRAGMENT, OBJECT_PROTOTYPE, TAG_SELECTOR, _getDOMObject, _instance, _isOwnProperty;
    EMPTY_ARRAY = [];
    OBJECT_PROTOTYPE = Object.prototype;
    IS_HTML_FRAGMENT = /^\s*<(\w+|!)[^>]*>/;
    ELEMENT_TYPES = [1, 9, 11];
    CLASS_SELECTOR = /^\.([\w-]+)$/;
    ID_SELECTOR = /^#[\w\d-]+$/;
    TAG_SELECTOR = /^[\w-]+$/;

    /*
    		Basic Instance of WinJs
    		@method $W
    		@param  {string/instance} [OPTIONAL] Selector for handler
    		@param  {string} [OPTIONAL] Children in selector
     */
    $W = function(selector, children) {
      var dom;
      if (!selector) {
        return _instance();
      } else if ($W.toType(selector) === "function") {
        return $W(document).ready(selector);
      } else {
        dom = _getDOMObject(selector, children);
        return _instance(dom, selector);
      }
    };
    $W.query = function(domain, selector) {
      var elements;
      if (CLASS_SELECTOR.test(selector)) {
        elements = domain.getElementsByClassName(selector.replace(".", ""));
      } else if (TAG_SELECTOR.test(selector)) {
        elements = domain.getElementsByTagName(selector);
      } else if (ID_SELECTOR.test(selector) && domain === document) {
        elements = domain.getElementById(selector.replace("#", ""));
        if (!elements) {
          elements = [];
        }
      } else {
        elements = domain.querySelectorAll(selector);
      }
      if (elements.nodeType) {
        return [elements];
      } else {
        return Array.prototype.slice.call(elements);
      }
    };
    $W.toType = function(obj) {
      var match;
      match = OBJECT_PROTOTYPE.toString.call(obj).match(/\s([a-z|A-Z]+)/);
      if (match.length > 1) {
        return match[1].toLowerCase();
      } else {
        return "object";
      }
    };
    $W.each = function(elements, callback) {
      var element, i, key, l, len1;
      i = void 0;
      key = void 0;
      if ($W.toType(elements) === "array") {
        for (i = l = 0, len1 = elements.length; l < len1; i = ++l) {
          element = elements[i];
          if (callback.call(element, i, element) === false) {
            elements;
          }
        }
      } else {
        for (key in elements) {
          if (callback.call(elements[key], key, elements[key]) === false) {
            elements;
          }
        }
      }
      return elements;
    };
    $W.Mix = function() {
      var arg, argument, child, len, prop;
      child = {};
      arg = 0;
      len = arguments.length;
      while (arg < len) {
        argument = arguments[arg];
        for (prop in argument) {
          if (_isOwnProperty(argument, prop) && argument[prop] !== undefined) {
            child[prop] = argument[prop];
          }
        }
        arg++;
      }
      return child;
    };
    _instance = function(dom, selector) {
      if (selector == null) {
        selector = "";
      }
      dom = dom || EMPTY_ARRAY;
      dom.selector = selector;
      dom.__proto__ = _instance.prototype;
      return dom;
    };
    _getDOMObject = function(selector, children) {
      var domain, type;
      domain = null;
      type = $W.toType(selector);
      if (type === "array") {
        domain = _compact(selector);
      } else if (type === "string" && IS_HTML_FRAGMENT.test(selector)) {
        domain = _fragment(selector.trim(), RegExp.$1);
        selector = null;
      } else if (type === "string") {
        domain = $W.query(document, selector);
        if (children) {
          if (domain.length === 1) {
            domain = $W.query(domain[0], children);
          } else {
            domain = $W.map(function() {
              return $W.query(domain, children);
            });
          }
        }
      } else if (ELEMENT_TYPES.indexOf(selector.nodeType) >= 0 || selector === window) {
        domain = [selector];
        selector = null;
      }
      return domain;
    };
    _isOwnProperty = function(object, property) {
      return OBJECT_PROTOTYPE.hasOwnProperty.call(object, property);
    };
    _instance.prototype = $W.fn = {};
    $W.fn.each = function(callback) {
      this.forEach(function(element, index) {
        return callback.call(element, index, element);
      });
      return this;
    };
    $W.fn.forEach = EMPTY_ARRAY.forEach;
    $W.version = "0.0.1";
    return $W;
  })();

  this.Win = this.$W = Win;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Win;
  }


  /*
   * CONFIG INI
   */

  (function($W) {
    return $W.ini = function(obj) {
      var dir, i, l, len1, link, theme;
      if (obj.theme) {
        link = $W('head > link');
        for (l = 0, len1 = link.length; l < len1; l++) {
          i = link[l];
          if (/Win-theme/g.test(i.getAttribute('href'))) {
            dir = i.getAttribute('href').split('Win-theme', 1);
            i.setAttribute('href', dir + obj.theme);
            return;
          }
        }
        theme = document.createElement("link");
        theme.setAttribute("rel", "stylesheet");
        theme.setAttribute("href", obj.theme);
        return $W('head')[0].appendChild(theme);
      }
    };
  })(Win);

  "use strict";

  (function($W) {
    return $W.Device = function() {
      var clientStrings, cs, id, nVer, os, osType, osVersion, ua;
      nVer = navigator.appVersion;
      ua = navigator.userAgent;
      os = '-';
      osType = 'desktop';
      clientStrings = [
        {
          s: 'Windows 10',
          r: /(Windows 10.0|Windows NT 10.0)/
        }, {
          s: 'Windows 8.1',
          r: /(Windows 8.1|Windows NT 6.3)/
        }, {
          s: 'Windows 8',
          r: /(Windows 8|Windows NT 6.2)/
        }, {
          s: 'Windows 7',
          r: /(Windows 7|Windows NT 6.1)/
        }, {
          s: 'Windows Vista',
          r: /Windows NT 6.0/
        }, {
          s: 'Windows Server 2003',
          r: /Windows NT 5.2/
        }, {
          s: 'Windows XP',
          r: /(Windows NT 5.1|Windows XP)/
        }, {
          s: 'Windows 2000',
          r: /(Windows NT 5.0|Windows 2000)/
        }, {
          s: 'Windows ME',
          r: /(Win 9x 4.90|Windows ME)/
        }, {
          s: 'Windows 98',
          r: /(Windows 98|Win98)/
        }, {
          s: 'Windows 95',
          r: /(Windows 95|Win95|Windows_95)/
        }, {
          s: 'Windows NT 4.0',
          r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/
        }, {
          s: 'Windows CE',
          r: /Windows CE/
        }, {
          s: 'Windows 3.11',
          r: /Win16/
        }, {
          s: 'Android',
          r: /Android/
        }, {
          s: 'Open BSD',
          r: /OpenBSD/
        }, {
          s: 'Sun OS',
          r: /SunOS/
        }, {
          s: 'Linux',
          r: /(Linux|X11)/
        }, {
          s: 'iOS',
          r: /(iPhone|iPad|iPod)/
        }, {
          s: 'Mac OS X',
          r: /Mac OS X/
        }, {
          s: 'Mac OS',
          r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/
        }, {
          s: 'QNX',
          r: /QNX/
        }, {
          s: 'UNIX',
          r: /UNIX/
        }, {
          s: 'BeOS',
          r: /BeOS/
        }, {
          s: 'OS/2',
          r: /OS\/2/
        }, {
          s: 'Search Bot',
          r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/
        }
      ];
      for (id in clientStrings) {
        cs = clientStrings[id];
        if (cs.r.test(ua)) {
          os = cs.s;
          break;
        }
      }
      osVersion = '-';
      if (/Windows/.test(os)) {
        osVersion = /Windows (.*)/.exec(os)[1];
        os = 'Windows';
        osType = 'desktop';
      }
      if (os === 'Mac OS X') {
        osVersion = /Mac OS X (10[\.\_\d]+)/.exec(ua)[1];
        osType = 'desktop';
      }
      if (os === 'Android') {
        osVersion = /Android ([\.\_\d]+)/.exec(ua)[1];
        osType = 'movil';
      }
      if (os === 'iOS') {
        if (/(iphone|ipod|ipad).* os 8_/.test(ua.toLowerCase())) {
          osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];
          osType = 'movil';
        } else {
          osVersion = /OS (\d+)_(\d+)_?(\d+)?/.exec(nVer);
          osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);
          osType = 'movil';
        }
      }
      return {
        os: os,
        osVersion: osVersion,
        osType: osType
      };
    };
  })(Win);


  /*
   * Validacion campos formulario
   *
   * tecla==8 		//BACKSPACE
   * tecla==9 		//TAB
   * tecla==0 		//TAB
   * tecla==13 	//ENTER
   *
   */

  "use strict";

  (function($W) {

    /*
    Get/Set attribute to a given instance element
    @method attr
    @param  {string} Name of attribute
    @param  {string} [OPTIONAL] Value of attribute
     */
    $W.fn.attr = function(name, value) {
      if (this.length > 0 && $W.toType(name) === "string") {
        if (value != null) {
          return this.each(function() {
            return this.setAttribute(name, value);
          });
        } else {
          return this[0].getAttribute(name);
        }
      }
    };

    /*
    Remove attribute to a given instance element
    @method removeAttr
    @param  {string} Name of attribute
     */
    $W.fn.removeAttr = function(name) {
      if (this.length > 0 && $W.toType(name) === "string") {
        return this.each(function() {
          return this.removeAttribute(name);
        });
      }
    };

    /*
    Get/Set data attribute to a given instance element
    @method data
    @param  {string} Name of data attribute
    @param  {string} [OPTIONAL] Value of data atribbute
     */
    $W.fn.data = function(name, value) {
      return this.attr("data-" + name, value);
    };

    /*
    Remove data attribute to a given instance element
    @method removeAttr
    @param  {string} Name of data attribute
     */
    $W.fn.removeData = function(name) {
      return this.removeAttr("data-" + name);
    };

    /*
    Remove data attribute to a given instance element
    @method val
    @param  {string} Name of data attribute
     */
    $W.fn.val = function(value) {
      if (value != null) {
        return this.each(function() {
          return this.value = value.toString();
        });
      } else {
        if (this.length > 0) {
          return this[0].value;
        } else {
          return null;
        }
      }
    };

    /*
    Shows a given instance element
    @method show
     */
    $W.fn.show = function() {
      return this.style("display", "block");
    };

    /*
    Hides a given instance element
    @method hide
     */
    $W.fn.hide = function() {
      return this.style("display", "none");
    };

    /*
    Trigger that event on an element
    @method focus
     */
    $W.fn.focus = function() {
      return this[0].focus();
    };

    /*
    Trigger that event on an element
    @method blur
     */
    $W.fn.blur = function() {
      return this[0].blur();
    };

    /*
    Get a offset of a given instance element
    @method offset
     */
    return $W.fn.offset = function() {
      var bounding, offset;
      if (this.length > 0) {
        bounding = this[0].getBoundingClientRect();
        offset = {
          left: bounding.left + window.pageXOffset,
          top: bounding.top + window.pageYOffset,
          width: bounding.width,
          height: bounding.height
        };
      }
      return offset;
    };
  })(Win);


  /*
   * Validacion campos formulario
   *
   * tecla==8 		//BACKSPACE
   * tecla==9 		//TAB
   * tecla==0 		//TAB
   * tecla==13 	//ENTER
   *
   */

  "use strict";

  (function($W) {
    var VENDORS, _arrayOf, _computedStyle;
    VENDORS = ["-webkit-", "-moz-", "-ms-", "-o-", ""];

    /*
    Add class to a given instance element
    @method addClass
    @param  {string} Name of stylesheet class
     */
    $W.fn.addClass = function(values) {
      return this.each(function() {
        var l, len1, ref1, results, value;
        ref1 = _arrayOf(values);
        results = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          value = ref1[l];
          results.push(this.classList.add(value));
        }
        return results;
      });
    };

    /*
    Remove stylesheet class to a given instance element
    @method addClass
    @param  {string} Name of stylesheet class
     */
    $W.fn.removeClass = function(values) {
      return this.each(function() {
        var l, len1, ref1, results, value;
        ref1 = _arrayOf(values);
        results = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          value = ref1[l];
          results.push(this.classList.remove(value));
        }
        return results;
      });
    };

    /*
    Toggle stylesheet class to a given instance element
    @method addClass
    @param  {string} Name of stylesheet class
     */
    $W.fn.toggleClass = function(values) {
      return this.each(function() {
        var l, len1, ref1, results, value;
        ref1 = _arrayOf(values);
        results = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          value = ref1[l];
          results.push(this.classList.toggle(value));
        }
        return results;
      });
    };

    /*
    Test if a stylesheet class is in the giben instance element
    @method hasClass
    @param  {string} Name of stylesheet class
     */
    $W.fn.hasClass = function(name) {
      return this.length > 0 && this[0].classList.contains(name);
    };

    /*
    List a object with all classes in a given instance element
    @method listClass
    @param  {string} Name of stylesheet class
     */
    $W.fn.listClass = function() {
      if (this.length > 0) {
        return this[0].classList;
      }
    };

    /*
    Set/Get a stylesheet property in a given instance element
    @method style
    @param  {string} Name of property
    @param  {string} [OPTIONAL] Value for property
     */
    $W.fn.style = $W.fn.css = function(property, value) {
      var el;
      if (value != null) {
        return this.each(function() {
          return this.style[property] = value;
        });
      } else {
        el = this[0];
        return el.style[property] || _computedStyle(el, property);
      }
    };

    /*
    Set/Get a stylesheet vendor-prefix property in a given instance element
    @method vendor
    @param  {string} Name of property
    @param  {string} Value for property
     */
    $W.fn.vendor = function(property, value) {
      var l, len1, prefix, results;
      results = [];
      for (l = 0, len1 = VENDORS.length; l < len1; l++) {
        prefix = VENDORS[l];
        results.push(this.style("" + prefix + property, value));
      }
      return results;
    };
    _computedStyle = function(element, property) {
      return document.defaultView.getComputedStyle(element, "")[property];
    };
    return _arrayOf = function(values) {
      if (!Array.isArray(values)) {
        values = [values];
      }
      return values;
    };
  })(Win);


  /*
   * Validacion campos formulario
   *
   * tecla==8 		//BACKSPACE
   * tecla==9 		//TAB
   * tecla==0 		//TAB
   * tecla==13 	//ENTER
   *
   */

  "use strict";

  (function($W) {
    var ELEMENT_ID, EVENTS_DESKTOP, EVENT_METHODS, HANDLERS, READY_EXPRESSION, _createProxy, _createProxyCallback, _environmentEvent, _event, _findHandlers, _getElementId, _subscribe, _unsubscribe;
    ELEMENT_ID = 1;
    HANDLERS = {};
    EVENT_METHODS = {
      preventDefault: "isDefaultPrevented",
      stopImmediatePropagation: "isImmediatePropagationStopped",
      stopPropagation: "isPropagationStopped"
    };
    EVENTS_DESKTOP = {
      touchstart: "mousedown",
      touchmove: "mousemove",
      touchend: "mouseup",
      touch: "click",
      orientationchange: "resize"
    };
    READY_EXPRESSION = /complete|loaded|interactive/;

    /*
    Attach an event handler function for one or more events to a given instance element
    @method on
    @param  {string} One or more space-separated event types
    @param  {string} A selector string to filter the descendants of the selected elements that trigger the event
    @param  {function} A function to execute when the event is triggered
     */
    $W.fn.on = function(event, selector, callback) {
      if ((selector == null) || $W.toType(selector) === "function") {
        return this.bind(event, selector);
      } else {
        return this.delegate(selector, event, callback);
      }
    };

    /*
    Remove an event handler.
    @method off
    @param  {string} One or more space-separated event types
    @param  {string} [OPTIONAL] A selector string to filter the descendants of the selected elements that trigger the event
    @param  {function} [OPTIONAL] A function to execute when the event is triggered
     */
    $W.fn.off = function(event, selector, callback) {
      if ((selector == null) || $W.toType(selector) === "function") {
        return this.unbind(event, selector);
      } else {
        return this.undelegate(selector, event, callback);
      }
    };

    /*
    Specify a function to execute when the DOM is fully loaded.
    @method ready
    @param  {function} A function to execute after the DOM is ready.
     */
    $W.fn.ready = function(callback) {
      if (READY_EXPRESSION.test(document.readyState)) {
        return callback.call(this, $W);
      } else {
        return $W.fn.addEvent(document, "DOMContentLoaded", function() {
          return callback.call(this, $W);
        });
      }
    };

    /*
    Attach a handler to an event for the elements.
    @method bind
    @param  {string} One or more space-separated event types
    @param  {function} A function to execute when the event is triggered
     */
    $W.fn.bind = function(event, callback) {
      return this.forEach(function(element) {
        return _subscribe(element, event, callback);
      });
    };

    /*
    Remove a previously-attached event handler from the elements.
    @method unbind
    @param  {string} One or more space-separated event types
    @param  {function} [OPTIONAL] A function to execute when the event is triggered
     */
    $W.fn.unbind = function(event, callback) {
      return this.each(function() {
        return _unsubscribe(this, event, callback);
      });
    };

    /*
    Attach a handler to one or more events for all elements that match the selector
    @method delegate
     */
    $W.fn.delegate = function(selector, event, callback) {
      return this.each(function(i, element) {
        return _subscribe(element, event, callback, selector, function(fn) {
          return function(e) {
            var evt, match;
            match = $W(e.target).closest(selector, element).get(0);
            if (match) {
              evt = $W.extend(_createProxy(e), {
                currentTarget: match,
                liveFired: element
              });
              return fn.apply(match, [evt].concat([].slice.call(arguments, 1)));
            }
          };
        });
      });
    };

    /*
    Remove a handler from the event for all elements which match the current selector
    @method undelegate
     */
    $W.fn.undelegate = function(selector, event, callback) {
      return this.each(function() {
        return _unsubscribe(this, event, callback, selector);
      });
    };

    /*
    Execute all handlers and behaviors attached to the matched elements for the given event type.
    @method trigger
     */
    $W.fn.trigger = function(event, touch, originalEvent) {
      if ($W.toType(event) === "string") {
        event = _event(event, touch);
      }
      if (originalEvent != null) {
        event.originalEvent = originalEvent;
      }
      return this.each(function() {
        return this.dispatchEvent(event);
      });
    };
    $W.fn.addEvent = function(element, event_name, callback) {
      if (element.addEventListener) {
        return element.addEventListener(event_name, callback, false);
      } else if (element.attachEvent) {
        return element.attachEvent("on" + event_name, callback);
      } else {
        return element["on" + event_name] = callback;
      }
    };
    $W.fn.removeEvent = function(element, event_name, callback) {
      if (element.removeEventListener) {
        return element.removeEventListener(event_name, callback, false);
      } else if (element.detachEvent) {
        return element.detachEvent("on" + event_name, callback);
      } else {
        return element["on" + event_name] = null;
      }
    };
    _event = function(type, touch) {
      var event;
      event = document.createEvent("Events");
      event.initEvent(type, true, true, null, null, null, null, null, null, null, null, null, null, null, null);
      if (touch) {
        event.touch = touch;
      }
      return event;
    };
    _subscribe = function(element, event, callback, selector, delegate_callback) {
      var delegate, element_handlers, element_id, handler;
      event = _environmentEvent(event);
      element_id = _getElementId(element);
      element_handlers = HANDLERS[element_id] || (HANDLERS[element_id] = []);
      delegate = delegate_callback && delegate_callback(callback, event);
      handler = {
        event: event,
        callback: callback,
        selector: selector,
        proxy: _createProxyCallback(delegate, callback, element),
        delegate: delegate,
        index: element_handlers.length
      };
      element_handlers.push(handler);
      return $W.fn.addEvent(element, handler.event, handler.proxy);
    };
    _unsubscribe = function(element, event, callback, selector) {
      var element_id;
      event = _environmentEvent(event);
      element_id = _getElementId(element);
      return _findHandlers(element_id, event, callback, selector).forEach(function(handler) {
        delete HANDLERS[element_id][handler.index];
        return $W.fn.removeEvent(element, handler.event, handler.proxy);
      });
    };
    _getElementId = function(element) {
      return element._id || (element._id = ELEMENT_ID++);
    };
    _environmentEvent = function(event) {
      var environment_event;
      environment_event = (typeof $W.isMobile === "function" ? $W.isMobile() : void 0) ? event : EVENTS_DESKTOP[event];
      return environment_event || event;
    };
    _createProxyCallback = function(delegate, callback, element) {
      var proxy;
      callback = delegate || callback;
      proxy = function(event) {
        var result;
        result = callback.apply(element, [event].concat(event.data));
        if (result === false) {
          event.preventDefault();
        }
        return result;
      };
      return proxy;
    };
    _findHandlers = function(element_id, event, fn, selector) {
      return (HANDLERS[element_id] || []).filter(function(handler) {
        return handler && (!event || handler.event === event) && (!fn || handler.callback === fn) && (!selector || handler.selector === selector);
      });
    };
    return _createProxy = function(event) {
      var proxy;
      proxy = $W.extend({
        originalEvent: event
      }, event);
      $W.each(EVENT_METHODS, function(name, method) {
        proxy[name] = function() {
          this[method] = function() {
            return true;
          };
          return event[name].apply(event, arguments);
        };
        return proxy[method] = function() {
          return false;
        };
      });
      return proxy;
    };
  })(Win);


  /*
   * Validacion campos formulario
   *
   * tecla==8 		//BACKSPACE
   * tecla==9 		//TAB
   * tecla==0 		//TAB
   * tecla==13 	//ENTER
   *
   */

  "use strict";

  (function($W) {
    var PARENT_NODE, _filtered, _findAncestors, _getSibling;
    PARENT_NODE = "parentNode";

    /*
    Get the descendants of each element in the current instance
    @method find
    @param  {string} A string containing a selector expression to match elements against.
     */
    $W.fn.find = function(selector) {
      var result;
      if (this.length === 1) {
        result = Quo.query(this[0], selector);
      } else {
        result = this.map(function() {
          return Quo.query(this, selector);
        });
      }
      return $W(result);
    };

    /*
    Get the parent of each element in the current instance
    @method parent
    @param  {string} A string containing a selector expression to match elements against.
     */
    $W.fn.parent = function(selector) {
      var ancestors;
      ancestors = selector ? _findAncestors(this) : this.instance(PARENT_NODE);
      return _filtered(ancestors, selector);
    };

    /*
    Get the children of each element in the current instance
    @method children
    @param  {string} A string containing a selector expression to match elements against.
     */
    $W.fn.children = function(selector) {
      var elements;
      elements = this.map(function() {
        return Array.prototype.slice.call(this.children);
      });
      return _filtered(elements, selector);
    };

    /*
    Get the siblings of each element in the current instance
    @method siblings
    @param  {string} A string containing a selector expression to match elements against.
     */
    $W.fn.siblings = function(selector) {
      var elements;
      elements = this.map(function(index, element) {
        return Array.prototype.slice.call(element.parentNode.children).filter(function(child) {
          return child !== element;
        });
      });
      return _filtered(elements, selector);
    };

    /*
    Retrieve the DOM elements matched by the QuoJS object.
    @method get
    @param  {number} [OPTIONAL] A zero-based integer indicating which element to retrieve
     */
    $W.fn.get = function(index) {
      return this[index] || null;
    };

    /*
    Reduce the set of matched elements to the first in the set.
    @method first
     */
    $W.fn.first = function() {
      return $W(this[0]);
    };

    /*
    Reduce the set of matched elements to the final one in the set.
    @method last
     */
    $W.fn.last = function() {
      return $W(this[this.length - 1]);
    };

    /*
    Reduce the set of matched elements to the final one in the set.
    @method closest
    @param  {string} A string containing a selector expression to match elements against.
    @param  {instance} [OPTIONAL] A DOM element within which a matching element may be found.
     */
    $W.fn.closest = function(selector, context) {
      var candidates, node;
      node = this[0];
      candidates = $W(selector);
      if (!candidates.length) {
        node = null;
      }
      while (node && candidates.indexOf(node) < 0) {
        node = node !== context && node !== document && node.parentNode;
      }
      return $W(node);
    };

    /*
    Get the immediately following sibling of each element in the instance.
    @method next
     */
    $W.fn.next = function() {
      return _getSibling.call(this, "nextSibling");
    };

    /*
    Get the immediately preceding sibling of each element in the instance.
    @method prev
     */
    $W.fn.prev = function() {
      return _getSibling.call(this, "previousSibling");
    };
    $W.fn.instance = function(property) {
      return this.map(function() {
        return this[property];
      });
    };
    $W.fn.map = function(callback) {
      return $W.map(this, function(el, i) {
        return callback.call(el, i, el);
      });
    };
    _findAncestors = function(nodes) {
      var ancestors;
      ancestors = [];
      while (nodes.length > 0) {
        nodes = $W.map(nodes, function(node) {
          node = node.parentNode;
          if (node !== document && ancestors.indexOf(node) < 0) {
            ancestors.push(node);
            return node;
          }
        });
      }
      return ancestors;
    };
    _filtered = function(nodes, selector) {
      if (selector != null) {
        return $W(nodes).filter(selector);
      } else {
        return $W(nodes);
      }
    };
    return _getSibling = function(command) {
      var element;
      element = this[0][command];
      while (element && element.nodeType !== 1) {
        element = element[command];
      }
      return $W(element);
    };
  })(Win);


  /*
   * Validacion campos formulario
   *
   * tecla==8 		//BACKSPACE
   * tecla==9 		//TAB
   * tecla==0 		//TAB
   * tecla==13 	//ENTER
   *
   */

  "use strict";

  (function($W) {

    /*
    Get/Set text to a given instance element
    @method text
    @param  {string} [OPTIONAL] Value of text
     */
    $W.fn.text = function(value) {
      if (value != null) {
        return this.each(function() {
          return this.textContent = value;
        });
      } else {
        if (this.length > 0) {
          return this[0].textContent;
        } else {
          return "";
        }
      }
    };

    /*
    Get/Set html to a given instance element
    @method html
    @param  {variable} [OPTIONAL] Value of html
     */
    $W.fn.html = function(value) {
      var type;
      if (value != null) {
        type = $W.toType(value);
        return this.each(function() {
          if (type === "string") {
            return this.innerHTML = value;
          } else if (type === "array") {
            return value.forEach((function(_this) {
              return function(slice) {
                return $W(_this).html(slice);
              };
            })(this));
          } else {
            return this.innerHTML += $W(value).html();
          }
        });
      } else {
        if (this.length > 0) {
          return this[0].innerHTML;
        } else {
          return "";
        }
      }
    };

    /*
    Remove the set of matched elements to a given instance element
    @method remove
     */
    $W.fn.remove = function() {
      return this.each(function() {
        if (this.parentNode != null) {
          return this.parentNode.removeChild(this);
        }
      });
    };

    /*
    Remove all child nodes of the set of matched elements to a given instance element
    @method remove
     */
    $W.fn.empty = function() {
      return this.each(function() {
        return this.innerHTML = null;
      });
    };
    $W.fn.append = function(value) {
      var type;
      type = $W.toType(value);
      return this.each(function() {
        if (type === "string") {
          return this.insertAdjacentHTML("beforeend", value);
        } else if (type === "array") {
          return value.forEach((function(_this) {
            return function(slice) {
              return $W(_this).append(slice);
            };
          })(this));
        } else {
          return this.appendChild(value);
        }
      });
    };
    $W.fn.prepend = function(value) {
      var type;
      type = $W.toType(value);
      return this.each(function() {
        if (type === "string") {
          return this.insertAdjacentHTML("afterbegin", value);
        } else if (type === "array") {
          return value.each((function(_this) {
            return function(index, value) {
              return _this.insertBefore(value, _this.firstChild);
            };
          })(this));
        } else {
          return this.insertBefore(value, this.firstChild);
        }
      });
    };
    $W.fn.replaceWith = function(value) {
      var type;
      type = $W.toType(value);
      this.each(function() {
        if (this.parentNode) {
          if (type === "string") {
            return this.insertAdjacentHTML("beforeBegin", value);
          } else if (type === "array") {
            return value.each((function(_this) {
              return function(index, value) {
                return _this.parentNode.insertBefore(value, _this);
              };
            })(this));
          } else {
            return this.parentNode.insertBefore(value, this);
          }
        }
      });
      return this.remove();
    };
    $W.fn.beforeappend = function(value) {
      var type;
      type = $W.toType(value);
      return this.each(function() {
        if (type === "string") {
          return this.insertAdjacentHTML("beforeBegin", value);
        } else if (type === "array") {
          return value.each((function(_this) {
            return function(index, value) {
              return _this.parentNode.insertBefore(value, _this);
            };
          })(this));
        } else {
          return this.parentNode.insertBefore(value, this);
        }
      });
    };
    return $W.fn.afterappend = function(value) {
      var addListener, isInputFilled, onInputBlur, onInputFocus, type;
      type = $W.toType(value);
      this.each(function() {
        if (type === "string") {
          return this.insertAdjacentHTML("afterend", value);
        } else if (type === "array") {
          return value.each((function(_this) {
            return function(index, value) {
              return _this.parentNode.insertBefore(value, _this);
            };
          })(this));
        } else {
          return this.parentNode.insertBefore(value, this);
        }
      });
      addListener = function(inputEl) {
        inputEl.on('focus', onInputFocus);
        inputEl.on('blur', onInputBlur);
      };
      onInputFocus = function(evt) {
        evt.target.parentNode.classList.add('input-filled');
      };
      onInputBlur = function(evt) {
        if (evt.target.value.trim() == '') {
          evt.target.parentNode.classList.remove('input-filled');
          evt.target.classList.remove('input-ok');
        } else {
          evt.target.classList.add('input-ok');
        }
      };
      return isInputFilled = function(input) {
        if (input.value.trim() != '' && !input.parentNode.classList.contains('input-filled')) {
          input.parentNode.classList.add('input-filled');
          input.classList.add('input-ok');
        }
      };
    };
  })(Win);


  /*
   * Win.js
   * @namespeace Win
   *
   * @version 0.1
   * @author Jhon Marroquin || @jhon3rick
   * @author Jonatan Herran || @jonatan2874
   *
   */

  "use strict";

  (function($W) {
    $W.Script = {};

    /*
    	@method strReplace Reemplaza string en una cadena
    	@param str cadena de texto
    	@param str string a reemplazar
    	@param str string que reemplaza
    	@return str cadena con string reemplazados
     */
    $W.Script.strReplace = function(cadena, buscada, reemplazo) {
      while (cadena.toString().indexOf(buscada) !== -1) {
        cadena = cadena.toString().replace(buscada, reemplazo);
      }
      return cadena;
    };

    /*
    	@method dateNow
    	@param int id_pais (49=>colombia)
    	@param str valor numero de identificacion
    	@return str numero de verificacion (DV)
     */
    $W.Script.numberTechnical = function(id_pais, valor) {
      var dv, i, l, len1, vpri, x, y, z;
      dv = '';
      if (id_pais === 49) {
        if (!isNaN(valor)) {
          x = 0;
          y = 0;
          z = valor.length;
          vpri = [16];
          vpri[1] = 3;
          vpri[2] = 7;
          vpri[3] = 13;
          vpri[4] = 17;
          vpri[5] = 19;
          vpri[6] = 23;
          vpri[7] = 29;
          vpri[8] = 37;
          vpri[9] = 41;
          vpri[10] = 43;
          vpri[11] = 47;
          vpri[12] = 53;
          vpri[13] = 59;
          vpri[14] = 67;
          vpri[15] = 71;
          for (l = 0, len1 = z.length; l < len1; l++) {
            i = z[l];
            y = valor.substr(i, 1);
            x += y * vpri[z - i];
          }
          y = x % 11;
          if (y > 1) {
            dv = 11 - y;
          } else {
            dv = y;
          }
        }
      }
      return dv;
    };

    /*
    	@method dateNow
    	@return str fecha en "yyyy-mm-dd"
     */
    $W.Script.dateNow = function() {
      var date, day, month, year;
      day = 0;
      month = 0;
      date = new Date();
      year = date.getFullYear();
      if ((date.getMonth()) + 1 < 10) {
        month = "0" + (date.getMonth() + 1);
      } else {
        month = date.getMonth() + 1;
      }
      if (date.getDate() < 10) {
        day = "0" + date.getDate();
      } else {
        day = date.getDate();
      }
      return year + "-" + month + "-" + day;
    };

    /*
    	@method timeMeridian
    	@param str Hora en fortmato (00:00:00) 24Hrs
    	@return str Hora en fortmato (00:00 AM/PM)
     */
    $W.Script.timeMeridian = function(formato) {
      var A, H, HORA, M, hr;
      if (formato === null) {
        formato = 'AM/PM';
      }
      hr = new Date();
      H = hr.getHours();
      M = hr.getMinutes();
      if (H < 12) {
        A = "AM";
      } else {
        A = "PM";
      }
      if (M < 10) {
        M = "0" + M;
      }
      if (formato === 'AM/PM') {
        if (H > 12) {
          H = H - 12;
        }
        if (H < 10) {
          H = "0" + H;
        }
        HORA = H + ":" + M + " " + A;
      }
      if (formato === '24Hrs') {
        if (H < 10) {
          H = "0" + H;
        }
        HORA = H + ":" + M;
      }
      return HORA;
    };

    /*
    	@method timeMysql
    	@param str Hora en fortmato (00:00 AM) o (00:00)
    	@return str Hora MYSQL(00:00:00)
     */
    $W.Script.timeMysql = function(hora) {
      var A, B, H;
      A = hora.split(' ');
      if (A.length === 1) {
        H = A[0] + ":00";
      } else if (A.length === 2) {
        B = A[0].split(':');
        if (A[1] === 'PM') {
          B[0] = eval(B[0]) + eval(12);
        }
        H = B[0] + ":" + B[1] + ":00";
      }
      return H;
    };

    /*
    	@method dateLong
    	@param str Date en formato mysql "y-m-d"
    	@return str Fecha larga
     */
    $W.Script.dateLong = function(date) {
      var NewDate, day, month;
      day = ["Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado"];
      month = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];
      NewDate = date.split("-");
      return NewDate[2] + " " + month[NewDate[1] - 1] + " de " + NewDate[0];
    };

    /*
    	@method numberFormat
    	@param str Date en formato mysql "y-m-d"
    	@return str Fecha larga
     */
    $W.Script.numberFormat = function(number, decimals, dec_point, thousands_sep) {
      var c, d, i, j, n, s, t;
      n = number;
      c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
      d = dec_point === void 0 ? "," : dec_point;
      t = thousands_sep === void 0 ? "." : thousands_sep;
      s = n < 0 ? "-" : "";
      i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "";
      j = (j = i.length) > 3 ? j % 3 : 0;
      return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
    };
    return $W.Script.isJSON = function(text) {
      var error;
      try {
        JSON.parse(text);
        return true;
      } catch (error1) {
        error = error1;
        return false;
      }
    };
  })(Win);

  "use strict";

  (function($W) {
    var CONTWIDGET, ELEMENTS, _body, _button, _buttonGroup, _checkbox, _closeNotify, _combobox, _deleteCtxMenu, _disableTab, _draggMove, _draggStart, _draggStop, _findResizeBody, _menuOption, _openNotify, _panel, _resize, _resizeBody, _router, _selectedTab, _separador, _separator, _separatorHeight, _tab, _tabPanel, _tbText, _tbar, _textarea, _textfield;
    CONTWIDGET = 0;
    ELEMENTS = {};
    $W.Window = function(obj) {
      var ModalFoot, ModalHead, StyleMaxH, StyleMaxW, StyleMinH, StyleMinW, StyleSize, TextAndIcon, _$, autoLoad, bgBody, bgTitle, body, clsBody, divClose, drag, header, height, heightVentana, html, icoClose, id, left, maxHeight, maxWidth, minHeight, minWidth, objAdd, os, overflow, scrollX, scrollY, style, theme, title, titleStyle, top, width, widthVentana, widthWithTitle;
      _$ = this;
      title = obj.title || '';
      width = obj.width || 300;
      height = obj.height || 300;
      maxWidth = obj.maxWidth || '';
      maxHeight = obj.maxHeight || '';
      minWidth = obj.minWidth || '';
      minHeight = obj.minHeight || '';
      scrollX = obj.scrollX || false;
      scrollY = obj.scrollY || false;
      body = $W('body')[0];
      html = obj.html || '';
      drag = obj.drag || false;
      theme = obj.theme || '';
      style = obj.style || '';
      autoLoad = obj.autoLoad || '';
      titleStyle = obj.titleStyle || '';
      os = $W.Device().os.toLowerCase();
      clsBody = typeof obj.type !== 'undefined' && obj.type !== '' ? 'alert' : '';
      overflow = 'overflow:hidden;';
      if (scrollX === true && scrollY === true) {
        overflow = 'overflow-x:auto; overflow-y:auto;';
      }
      if (scrollX === true && scrollY === false) {
        overflow = 'overflow-x:auto; overflow-y:hidden;';
      }
      if (scrollX === false && scrollY === true) {
        overflow = 'overflow-x:hidden; overflow-y:auto;';
      }
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "window-" + CONTWIDGET;
      }
      bgBody = obj.bgBody ? 'background-color:' + obj.bgBody + ';' : '';
      bgTitle = obj.bgTitle ? 'background-color:' + obj.bgTitle + ';' : '';
      if (os === 'android' || os === 'ios') {
        icoClose = "<div class=\"win-title-btn\" os=\"" + os + "\" id=\"btn_close_ventana_" + id + "\"><i class=\"material-icons\" style=\"top:12px\">arrow_back</i></div>";
      } else {
        icoClose = "<div class=\"win-title-btn\" os=\"" + os + "\" id=\"btn_close_ventana_" + id + "\"><i class=\"material-icons\" style=\"top:-4px;left:-2px\">close</i></div>";
      }
      divClose = obj.closable !== false ? "" + icoClose : "";
      if (!isNaN(width)) {
        width = width + 'px';
      } else if (width === 'auto') {
        width = 'calc(100% - 20px)';
      }
      if (!isNaN(height)) {
        height = height + 'px';
      } else if (height === 'auto') {
        height = 'calc(100% - 20px)';
      }
      if (minWidth !== '') {
        if (!isNaN(minWidth)) {
          minWidth = minWidth + 'px';
        }
        StyleMinW = 'min-width:' + minWidth + ';';
      } else {
        StyleMinW = '';
      }
      if (minHeight !== '') {
        if (!isNaN(minHeight)) {
          minHeight = minHeight + 'px';
        }
        StyleMinH = 'min-height:' + minHeight + ';';
      } else {
        StyleMinH = '';
      }
      if (maxWidth !== '') {
        if (!isNaN(maxWidth)) {
          maxWidth = maxWidth + 'px';
        }
        StyleMaxW = 'max-width:' + maxWidth + ';';
      } else {
        StyleMaxW = '';
      }
      if (maxHeight !== '') {
        if (!isNaN(maxHeight)) {
          maxHeight = maxHeight + 'px';
        }
        StyleMaxH = 'max-height:' + maxHeight + ';';
      } else {
        StyleMaxH = '';
      }
      if (obj.modal !== false) {
        ModalHead = "<div id=\"win-modal-" + id + "\" class=\"win-modal\">";
        ModalFoot = '</div>';
      }
      if (os === 'android' || os === 'ios') {
        StyleSize = "width:100%; height:100%";
        TextAndIcon = divClose + " <div id=\"win-title-text-" + id + "\" class=\"win-title-txt\" os=\"" + os + "\">" + title + "</div>";
      } else {
        StyleSize = "width:" + width + "; height:" + height + "; " + StyleMinW + " " + StyleMinH + " " + StyleMaxW + " " + StyleMaxH;
        TextAndIcon = "<div id=\"win-title-text-" + id + "\" class=\"win-title-txt\" os=\"" + os + "\">" + title + "</div> " + divClose;
      }
      if (obj.titleBar !== false) {
        header = "<header id=\"win-header-" + id + "\"> <div class=\"win-title\" os=\"" + os + "\" id=\"win-title-" + id + "\" style=\"" + bgTitle + " " + titleStyle + "\"> " + TextAndIcon + " </div> </header>";
        if (os === 'android' || os === 'ios') {
          widthWithTitle = "calc(100% - 56px);";
        } else {
          widthWithTitle = "calc(100% - 27px);";
        }
      } else {
        header = "";
        widthWithTitle = "100%";
      }
      if (id === '') {
        CONTWIDGET++;
        id === CONTWIDGET;
      }
      $W("body").append(ModalHead + " <div id=\"" + id + "\" style=\"" + StyleSize + " " + bgBody + " " + style + "\" class=\"win-marco\"> <div class=\"win-file-resize\" data-resize=\"top\" id=\"win-resize-top-" + id + "\"></div> <div class=\"win-file-resize\" data-resize=\"bottom\" id=\"win-resize-bottom-" + id + "\"></div> <div class=\"win-file-resize\" data-resize=\"left\" id=\"win-resize-left-" + id + "\"></div> <div class=\"win-file-resize\" data-resize=\"right\" id=\"win-resize-right-" + id + "\"></div> " + header + " <section id=\"win-section-" + id + "\" style=\"" + overflow + " height:" + widthWithTitle + ";\" data-role=\"win-section\">" + html + "</section> </div> " + ModalFoot);
      if (obj.closable !== false) {
        $W("#btn_close_ventana_" + id).on('click', function() {
          return _$.close();
        });
      }
      widthVentana = document.getElementById(id).offsetWidth;
      heightVentana = document.getElementById(id).offsetHeight;
      left = body.offsetWidth < (widthVentana / 2) ? 0 : 'calc(50% - ' + widthVentana / 2 + 'px)';
      top = body.offsetHeight < (heightVentana / 2) ? 0 : 'calc(50% - ' + heightVentana / 2 + 'px)';
      $W("#" + id).css("left", "" + left).css("top", "" + top);
      if (obj.resize !== false) {
        _resize($W("#win-resize-top-" + id)[0]);
        _resize($W("#win-resize-bottom-" + id)[0]);
        _resize($W("#win-resize-left-" + id)[0]);
        _resize($W("#win-resize-right-" + id)[0]);
      }
      objAdd = [];
      if (obj.items) {
        objAdd = obj.items;
      }
      if (obj.autoLoad) {
        objAdd.push({
          xtype: 'body',
          scroll: scroll,
          scrollX: scrollX,
          scrollY: scrollY,
          autoLoad: obj.autoLoad
        });
      }
      if (obj.tabpanel) {
        objAdd.unshift({
          xtype: 'tabpanel',
          items: obj.tabpanel
        });
      }
      if (obj.tbar) {
        objAdd.unshift({
          xtype: 'tbar',
          items: obj.tbar
        });
      }
      _router(objAdd, "win-section-" + id);
      _$.close = function() {
        if (obj.modal !== false) {
          return $W("\#win-modal-" + id)[0].parentNode.removeChild($W("\#win-modal-" + id)[0]);
        } else {
          return $W("\#" + id)[0].parentNode.removeChild($W("\#" + id)[0]);
        }
      };
      return _$;
    };
    $W.TabPanel = function(obj) {
      var html, id;
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "win-tab-" + CONTWIDGET;
      }
      html = "";
      obj.items.forEach(json, index, element)(function() {
        return html += "<div id=\"" + id + "\">" + json.title + "</div>";
      });
      return "<div id=\"" + obj.id + "\">" + html + "</div>";
    };
    $W.Add = function(obj) {
      var lastDiv, objAdd, type, typeParent;
      typeParent = document.getElementById(obj.idApply).getAttribute("data-role");
      if (typeParent === "win-tbar") {
        lastDiv = document.getElementById(obj.idApply).lastChild;
        if (lastDiv !== null) {
          type = lastDiv.getAttribute("data-role");
          if (type === "div-empty") {
            lastDiv.parentNode.removeChild(lastDiv);
          }
        }
      }
      objAdd = [];
      if (obj.items) {
        objAdd = obj.items;
      }
      if (obj.autoLoad) {
        objAdd.push({
          xtype: 'body',
          autoLoad: obj.autoLoad
        });
      }
      if (obj.tabpanel) {
        objAdd.unshift({
          xtype: 'tabpanel',
          items: obj.tabpanel
        });
      }
      if (obj.tbar) {
        objAdd.unshift({
          xtype: 'tbar',
          items: obj.tbar
        });
      }
      return _router(objAdd, obj.idApply);
    };
    $W.Tbar = function(obj) {
      var os, parent;
      os = $W.Device().os.toLowerCase();
      parent = document.getElementById("" + obj.idApply);
      parent.className = "win-tbar";
      parent.setAttribute("data-role", "win-tbar");
      parent.setAttribute("os", "" + os);
      _router(obj.items, obj.idApply);
      return setTimeout(function() {
        return _resizeBody(document.getElementById(obj.idApply).parentNode.id);
      });
    };
    $W.Element = function(id) {
      this.hidden = function() {
        if (ELEMENTS[id] === void 0) {
          return;
        }
        $W('#' + id).style('display', 'none');
        _findResizeBody(id);
        return ELEMENTS[id].hidden = true;
      };
      this.show = function() {
        if (ELEMENTS[id] === void 0) {
          return;
        }
        $W('#' + id).style('display', 'block');
        _findResizeBody(id);
        return ELEMENTS[id].hidden = false;
      };
      this.enable = function(index) {
        if (ELEMENTS[id] === void 0) {
          return;
        } else if (index === void 0 && ELEMENTS[id].type === 'tabpanel') {
          return document.querySelectorAll("#" + id + " [data-state=enable]") || {};
        } else if (ELEMENTS[id].type === 'tabpanel') {
          if (index >= 0) {
            id = document.querySelector("#" + id + " [data-index=index-" + index + "]").id;
          } else {
            id = index;
          }
        }
        document.getElementById(id).setAttribute('data-state', 'enable');
        return ELEMENTS[id].disable = false;
      };
      this.disable = function(index) {
        if (ELEMENTS[id] === void 0) {
          return;
        } else if (ELEMENTS[id].type === 'tab') {
          _disableTab(id);
        } else if (index === void 0 && ELEMENTS[id].type === 'tabpanel') {
          return document.querySelectorAll("#" + id + " [data-state=disable]") || {};
        } else if (ELEMENTS[id].type === 'tabpanel') {
          if (index >= 0) {
            id = document.querySelector("#" + id + " [data-index=index-" + index + "]").id;
          } else {
            id = index;
          }
          _disableTab(id);
        }
        document.getElementById(id).setAttribute('data-state', 'disable');
        return ELEMENTS[id].disable = true;
      };
      this.state = function(index) {
        var state;
        state = void 0;
        if (ELEMENTS[id] === void 0) {
          return state;
        }
        if (ELEMENTS[id].type === 'tabpanel') {
          if (index >= 0) {
            id = document.querySelector("#" + id + " [data-index=index-" + index + "]").id;
            state = ELEMENTS[id].disable;
          } else {
            state = ELEMENTS[index].disable;
          }
        } else {
          state = ELEMENTS[id].disable;
        }
        if (state) {
          return 'disable';
        } else {
          return 'enable';
        }
      };
      this.selected = function(index) {
        var idSelected;
        if (ELEMENTS[id] === void 0) {

        } else if (ELEMENTS[id].type === 'tab') {
          return _selectedTab(id);
        } else if (index === void 0) {
          return document.querySelector("#" + id + " [data-selected=true]") || void 0;
        } else if (ELEMENTS[id].type === 'tabpanel') {
          if (index >= 0) {
            idSelected = document.querySelector("#" + id + " [data-index=index-" + index + "]").id;
            return _selectedTab(idSelected);
          } else {
            return _selectedTab(index);
          }
        }
      };
      return this;
    };
    _disableTab = function(id) {
      document.getElementById("win-tab-body-" + id).innerHTML = '';
      document.getElementById(id).setAttribute('data-load', 'false');
      return document.getElementById(id).setAttribute('data-selected', 'false');
    };
    $W.BlockBtn = function(id) {
      if (ELEMENTS[id].disable) {
        return;
      }
      $W.Element(id).disable();
      return setTimeout(function() {
        if (document.getElementById(id)) {
          return $W.Element(id).enable();
        }
      }, 1500);
    };
    $W.Loading = function(obj) {
      var str;
      if (obj !== 'off') {
        if (typeof obj === 'string') {
          str = obj;
          obj = {};
          if (obj !== 'on') {
            obj.text = str;
          }
        }
        obj = obj || {};
        obj.type = 'loading';
        $W.Notify(obj);
      } else {
        _closeNotify();
        return;
      }
      this.close = function() {
        return _closeNotify();
      };
      return true;
    };
    $W.Notify = function(obj) {
      var closable, elementDom, icon, iconSize, id, idApply, loader, objNotify, state, text, timeout, type;
      state = false;
      type = 'notify';
      icon = 'warning';
      text = 'Aviso';
      loader = '';
      timeout = 1000;
      iconSize = 100;
      closable = false;
      if ($W('[data-role=win-notify]')[0]) {
        state = true;
      }
      _closeNotify();
      if (state && (!obj || obj === 'off' || obj.type === 'loading')) {
        return false;
      }
      obj = obj || {};
      if (obj.type === 'loading' || obj === 'loading') {
        type = 'loading';
        icon = 'loading';
        text = 'Cargando...';
        loader = 'default';
        timeout = 0;
        iconSize = 100;
        closable = false;
      } else if (obj.type === 'success' || obj === 'success') {
        type = 'success';
        icon = 'success';
        text = 'Ok!';
        loader = '';
        timeout = 1000;
        iconSize = 100;
        closable = false;
      } else if (obj.type === 'fail' || obj === 'fail') {
        type = 'fail';
        icon = 'fail';
        text = 'Error';
        loader = '';
        timeout = 1000;
        iconSize = 100;
        closable = false;
      }
      icon = obj.icon || icon;
      text = obj.text || text;
      loader = obj.loader || loader;
      idApply = obj.idApply || '';
      timeout = obj.timeout || timeout;
      iconSize = obj.iconSize || iconSize;
      closable = obj.closable || closable;
      elementDom = 'body';
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "win-notify-" + CONTWIDGET;
      }
      if (idApply !== '' && document.getElementById(idApply)) {
        elementDom = "#" + idApply;
      }
      objNotify = {
        icon: icon,
        text: text,
        timeout: timeout,
        iconSize: iconSize,
        closable: closable
      };
      return _openNotify(elementDom, id, type, objNotify);
    };
    $W.DefineHoja = function(tamano, orientacion) {
      var alto, ancho, dpi, height, hoja, tipo, unidad, width;
      $W("body").append("<div id=\"dpi\" style=\"height:1in; left:-100%; position:absolute; top:-100%; width:1in;\"></div>");
      dpi = document.getElementById("dpi").offsetHeight;
      $W("#dpi").remove();
      tipo = [];
      hoja = {};
      tipo['letter'] = ['cm', 21.5, 27.5];
      tipo['legal'] = ['cm', 21.5, 33];
      tipo['A4'] = ['inch', 8.3, 11.7];
      unidad = tipo[tamano][0];
      ancho = parseFloat(tipo[tamano][1]);
      alto = parseFloat(tipo[tamano][2]);
      if (orientacion === 'V') {
        if (unidad = 'cm') {
          width = (parseFloat(ancho) / parseFloat(2.54)) * parseFloat(dpi);
          height = (parseFloat(alto) / parseFloat(2.54)) * parseFloat(dpi);
        } else {
          width = parseFloat(ancho) * parseFloat(dpi);
          height = parseFloat(alto) * parseFloat(dpi);
        }
      } else if (orientacion === 'H') {
        if (unidad = 'cm') {
          height = (parseFloat(ancho) / parseFloat(2.54)) * parseFloat(dpi);
          width = (parseFloat(alto) / parseFloat(2.54)) * parseFloat(dpi);
        } else {
          height = parseFloat(ancho) * parseFloat(dpi);
          width = parseFloat(alto) * parseFloat(dpi);
        }
      } else {
        $W.Error('Definicion de orientacion de pagina erronea!');
      }
      hoja.width = parseInt(width);
      hoja.height = parseInt(height);
      return hoja;
    };
    _closeNotify = function() {
      var nodo;
      if ($W('[data-role=win-notify]')[0]) {
        nodo = $W('[data-role=win-notify]')[0];
        return nodo.parentNode.removeChild(nodo);
      }
    };
    _openNotify = function(elementDom, id, type, obj) {
      var html;
      html = '';
      if (type === 'alert') {
        if (obj.closable) {
          html += "<div class=\"win-notify-close\" style=\"position: absolute; right:0; width:50px;\">Close X</div>";
        }
        html += "<div class=\"win-notify-label\" id=\"label-load-" + id + "\">" + obj.title + "<br><br>" + obj.text + "</div>";
      } else if (type === 'loading') {
        html = "<div id=\"LogicalLoading\"> <div id=\"cube\"> <div class=\"face one\"> <div id=\"cuadro\" class=\"el1\"></div> <div id=\"cuadro\" class=\"el2\"></div> <div id=\"cuadro\" class=\"el1\"></div> <div id=\"cuadro\" class=\"el1\"></div> </div> <div class=\"face two\"> <div id=\"cuadro\" class=\"el1\"></div> <div id=\"cuadro\" class=\"el3\"></div> <div id=\"cuadro\" class=\"el3\"></div> <div id=\"cuadro\" class=\"el3\"></div> </div> <div class=\"face three\"> <div id=\"cuadro\" class=\"el2\"></div> <div id=\"cuadro\" class=\"el2\"></div> <div id=\"cuadro\" class=\"el3\"></div> <div id=\"cuadro\" class=\"el2\"></div> </div> <div class=\"face four\"> <div id=\"cuadro\" class=\"el2\"></div> <div id=\"cuadro\" class=\"el3\"></div> <div id=\"cuadro\" class=\"el2\"></div> <div id=\"cuadro\" class=\"el2\"></div> </div> <div class=\"face five\"> <div id=\"cuadro\" class=\"el3\"></div> <div id=\"cuadro\" class=\"el3\"></div> <div id=\"cuadro\" class=\"el3\"></div> <div id=\"cuadro\" class=\"el1\"></div> </div> <div class=\"face six\"> <div id=\"cuadro\" class=\"el2\"></div> <div id=\"cuadro\" class=\"el1\"></div> <div id=\"cuadro\" class=\"el1\"></div> <div id=\"cuadro\" class=\"el1\"></div> </div> <div class=\"face seven\"></div> </div> </div> <div class=\"win-notify-label\" id=\"label-load-" + id + "\">" + obj.text + "</div>";
      } else {
        html = "<div class=\"win-notify-icon\" id=\"win-notify-icon-" + id + "\" data-icon=\"" + obj.icon + "\" style=\"" + obj.iconSize + "\"></div> <div class=\"win-notify-label\" id=\"label-load-" + id + "\">" + obj.text + "</div>";
      }
      $W(elementDom).append("<div class=\"win-modal\" id=\"" + id + "\" data-role=\"win-notify\"> <div class=\"win-modal-parent\" id=\"win-modal-parent-" + id + "\"> <div class=\"win-modal-content\"> <div class=\"win-notify-ribete\" id=\"win-ribete-" + id + "\">" + html + "<div> </div> </div> </div>");
      if (obj.closable) {
        document.getElementById("win-ribete-" + id).addEventListener('click', function() {
          return _closeNotify();
        });
      }
      if (obj.timeout > 0 && obj.timeout !== '') {
        return setTimeout((function() {
          return _closeNotify();
        }), obj.timeout);
      }
    };
    $W.CtxMenu = function(obj) {
      var type;
      type = obj.type || 'context';
      if (type === 'context') {
        document.getElementById(obj.idApply).oncontextmenu = function(event) {
          $W.CtxMenuDom(obj, event);
          return false;
        };
      }
      if (type === 'click') {
        return document.getElementById(obj.idApply).onclick = function(event) {
          $W.CtxMenuDom(obj, event);
          return false;
        };
      }
    };
    $W.CtxMenuDom = function(obj, event) {
      var arr, html, icon, key, pos, position, ref1, right, style, target, width;
      position = obj.position || 'event';
      width = obj.width || 200;
      event.preventDefault;
      event.stopPropagation();
      if ($W('[data-role=win-ctxmenu]')[0]) {
        _deleteCtxMenu();
        return false;
      }
      window.addEventListener("contextmenu", function(e) {
        if ($W('[data-role=win-ctxmenu]')[0]) {
          _deleteCtxMenu();
          e.preventDefault;
          e.stopPropagation();
          return false;
        }
      });
      window.addEventListener("click", function(e) {
        if ($W('[data-role=win-ctxmenu]')[0]) {
          _deleteCtxMenu();
          e.preventDefault;
          e.stopPropagation();
          return false;
        }
      });
      html = "";
      if (obj.items) {
        ref1 = obj.items;
        for (key in ref1) {
          if (!hasProp1.call(ref1, key)) continue;
          arr = ref1[key];
          icon = arr.cls || arr.icon || '';
          html += "<div data-option=\"top-" + key + "\"> <div class=\"win-ctxmenu-icon\"><i class=\"material-icons icon-center-ctx\">" + icon + "</i></div> <div class=\"win-ctxmenu-text\">" + arr.text + "</div> </div>";
        }
      }
      if (position === 'event') {
        target = event.target;
        target.innerHTML += "<div class=\"win-ctxmenu\" data-role=\"win-ctxmenu\" style=\"width:" + width + "px; top:" + event.clientY + "px; left:" + event.clientX + "px;\">" + html + "</div>";
      } else {
        target = document.getElementById(obj.idApply);
        pos = target.getBoundingClientRect();
        right = window.innerWidth - pos.right;
        if (position === 'B-L') {
          style = 'top:' + pos.bottom + 'px; left:' + pos.left + 'px;';
        }
        if (position === 'T-L') {
          style = 'top:' + pos.top + 'px; left:' + pos.left + 'px;';
        }
        if (position === 'B-R') {
          style = 'top:' + pos.bottom + 'px; right:' + right + 'px;';
        }
        if (position === 'T-R') {
          style = 'top:' + pos.top + 'px; right:' + right + 'px;';
        }
        target.innerHTML += "<div class=\"win-ctxmenu\" data-role=\"win-ctxmenu\" style=\"width:" + width + "px; " + style + "\">" + html + "</div>";
      }
      if (obj.items) {
        return setTimeout(function() {
          var ref2, results;
          ref2 = obj.items;
          results = [];
          for (key in ref2) {
            if (!hasProp1.call(ref2, key)) continue;
            arr = ref2[key];
            results.push(_menuOption(target, key, arr.handler));
          }
          return results;
        });
      }
    };
    _menuOption = function(element, key, handler) {
      if (element.querySelector("[data-option=top-" + key + "]") && handler) {
        return element.querySelector("[data-option=top-" + key + "]").onclick = function() {
          if (typeof handler === 'string') {
            return eval(handler);
          } else {
            return handler(this);
          }
        };
      }
    };
    _deleteCtxMenu = function() {
      var array;
      array = document.querySelectorAll("[data-role=win-ctxmenu]");
      return [].forEach.call(array, function(menu) {
        return menu.parentNode.removeChild(menu);
      });
    };
    _router = function(obj, idParent) {
      var cont, float;
      if (typeof obj === 'object') {
        float = 'left';
        cont = 0;
        obj.forEach(function(json, index, element) {
          switch (json.xtype) {
            case 'textfield':
              _textfield(json, idParent);
              break;
            case 'textarea':
              _textarea(json, idParent);
              break;
            case 'combobox':
              _combobox(json, idParent);
              break;
            case 'checkbox':
              _checkbox(json, idParent);
              break;
            case 'separador':
              _separador(json, idParent);
              break;
            case 'button':
              _button(json, idParent);
              break;
            case 'buttongroup':
              _buttonGroup(json, idParent);
              break;
            case 'tbar':
              _tbar(json, idParent);
              break;
            case 'panel':
              _panel(json, idParent);
              break;
            case 'tabpanel':
              _tabPanel(json, idParent);
              break;
            case 'tab':
              _tab(json, idParent, cont);
              break;
            case 'tbtext':
              _tbText(json, idParent);
              break;
            case 'body':
              _body(json, idParent, 'router');
              break;
            default:
              if (json === '-') {
                _separator(idParent);
              } else if (json === '--') {
                _separatorHeight(idParent);
              } else if (json === '->') {
                float = 'right';
                $W("#" + idParent).append('<div data-role="div-empty"></div>');
              }
          }
          return cont++;
        });
        if (float === 'left') {
          return $W("#" + idParent).append('<div data-role="div-empty"></div>');
        }
      }
    };
    _textfield = function(obj, idParent) {
      var DivAlto, DivAncho, DivMaxAncho, FormMaterial, field, height, label, nObj, name, required, size, type, validate, value, width;
      DivAlto = obj.DivAlto || 30;
      DivAncho = obj.DivAncho || 'calc(100% - 20px)';
      DivMaxAncho = obj.DivMaxAncho || '100%';
      height = obj.height || 80;
      width = obj.width || '100%';
      value = obj.value || "";
      required = obj.required || false;
      type = obj.type || 'text';
      label = obj.label || false;
      validate = obj.validate || "";
      if (obj.FormMaterial) {
        FormMaterial = obj.FormMaterial;
      } else {
        FormMaterial = 'true';
      }
      if (!isNaN(DivAlto)) {
        DivAlto = DivAlto + 'px';
      }
      if (!isNaN(DivAncho)) {
        DivAncho = DivAncho + 'px';
      }
      if (!isNaN(DivMaxAncho)) {
        DivMaxAncho = DivMaxAncho + 'px';
      }
      if (!isNaN(height)) {
        height = height + 'px';
      }
      if (!isNaN(width)) {
        width = width + 'px';
      }
      name = idParent;
      field = obj.id;
      nObj = {
        value: value,
        required: required,
        type: type,
        label: label,
        width: width,
        height: height,
        validate: validate
      };
      size = {
        FormMaterial: FormMaterial,
        fBodyAncho: "100%",
        fDivAlto: DivAlto,
        fDivAncho: DivAncho,
        fDivMaxAncho: DivMaxAncho,
        fFieldAncho: "auto",
        fLabelAncho: "auto"
      };
      field = $W.createTextField(name, field, nObj, size);
      $W("#" + idParent).append(field);
      return $W.VerifiIsInputFilled(document.getElementById(idParent));
    };
    _textarea = function(obj, idParent) {
      var DivAlto, DivAncho, DivMaxAncho, FormMaterial, field, height, label, nObj, name, required, size, type, value, width;
      DivAlto = obj.DivAlto || 30;
      DivAncho = obj.DivAncho || 'calc(100% - 20px)';
      DivMaxAncho = obj.DivMaxAncho || '100%';
      height = obj.height || 80;
      width = obj.width || '100%';
      value = obj.value || "";
      required = obj.required || false;
      type = 'TextArea';
      label = obj.label || false;
      if (obj.FormMaterial) {
        FormMaterial = obj.FormMaterial;
      } else {
        FormMaterial = 'true';
      }
      if (!isNaN(DivAlto)) {
        DivAlto = DivAlto + 'px';
      }
      if (!isNaN(DivAncho)) {
        DivAncho = DivAncho + 'px';
      }
      if (!isNaN(DivMaxAncho)) {
        DivMaxAncho = DivMaxAncho + 'px';
      }
      if (!isNaN(height)) {
        height = height + 'px';
      }
      if (!isNaN(width)) {
        width = width + 'px';
      }
      name = idParent;
      field = obj.id;
      nObj = {
        "value": value,
        "required": required,
        "type": type,
        "label": label,
        "width": width,
        "height": height
      };
      size = {
        "FormMaterial": FormMaterial,
        "fBodyAncho": "100%",
        "fDivAlto": DivAlto,
        "fDivAncho": DivAncho,
        "fDivMaxAncho": DivMaxAncho,
        "fFieldAncho": "auto",
        "fLabelAncho": "auto"
      };
      field = $W.createTextArea(name, field, nObj, size);
      $W("#" + idParent).append(field);
      return $W.VerifiIsInputFilled(document.getElementById(idParent));
    };
    _combobox = function(obj, idParent) {
      var DivAlto, DivAncho, DivMaxAncho, FormMaterial, field, height, label, nObj, name, required, size, type, value, width;
      DivAlto = obj.DivAlto || 30;
      DivAncho = obj.DivAncho || 'calc(100% - 20px)';
      DivMaxAncho = obj.DivMaxAncho || '100%';
      height = obj.height || 80;
      width = obj.width || '100%';
      value = obj.value || "";
      required = obj.required || false;
      type = 'select';
      label = obj.label || false;
      if (obj.FormMaterial) {
        FormMaterial = obj.FormMaterial;
      } else {
        FormMaterial = 'true';
      }
      if (!isNaN(DivAlto)) {
        DivAlto = DivAlto + 'px';
      }
      if (!isNaN(DivAncho)) {
        DivAncho = DivAncho + 'px';
      }
      if (!isNaN(DivMaxAncho)) {
        DivMaxAncho = DivMaxAncho + 'px';
      }
      if (!isNaN(height)) {
        height = height + 'px';
      }
      if (!isNaN(width)) {
        width = width + 'px';
      }
      name = idParent;
      field = obj.id;
      nObj = {
        "value": value,
        "required": required,
        "type": type,
        "label": label,
        "width": width,
        "height": height,
        "option": obj.data
      };
      size = {
        "FormMaterial": FormMaterial,
        "fBodyAncho": "100%",
        "fDivAlto": DivAlto,
        "fDivAncho": DivAncho,
        "fDivMaxAncho": DivMaxAncho,
        "fFieldAncho": "auto",
        "fLabelAncho": "auto"
      };
      field = $W.createComboBox(name, field, nObj, size);
      $W("#" + idParent).append(field);
      return $W.VerifiIsInputFilled(document.getElementById(idParent));
    };
    _checkbox = function(obj, idParent) {
      var DivAlto, DivAncho, DivMaxAncho, FormMaterial, checked, field, height, label, labelOrientation, nObj, name, required, size, type, validate, value, width;
      DivAlto = obj.DivAlto || 30;
      DivAncho = obj.DivAncho || 'calc(100% - 20px)';
      DivMaxAncho = obj.DivMaxAncho || '100%';
      height = obj.height || 80;
      width = obj.width || '100%';
      value = obj.value || "";
      required = obj.required || false;
      type = 'checkbox';
      label = obj.label || false;
      labelOrientation = obj.labelOrientation || "R";
      validate = "";
      checked = obj.checked || false;
      if (obj.FormMaterial) {
        FormMaterial = obj.FormMaterial;
      } else {
        FormMaterial = 'true';
      }
      if (!isNaN(DivAlto)) {
        DivAlto = DivAlto + 'px';
      }
      if (!isNaN(DivAncho)) {
        DivAncho = DivAncho + 'px';
      }
      if (!isNaN(DivMaxAncho)) {
        DivMaxAncho = DivMaxAncho + 'px';
      }
      if (!isNaN(height)) {
        height = height + 'px';
      }
      if (!isNaN(width)) {
        width = width + 'px';
      }
      name = idParent;
      field = obj.id;
      nObj = {
        value: value,
        required: required,
        type: type,
        label: label,
        width: width,
        height: height,
        validate: validate,
        labelOrientation: labelOrientation,
        checked: checked
      };
      size = {
        FormMaterial: FormMaterial,
        fBodyAncho: "100%",
        fDivAlto: DivAlto,
        fDivAncho: DivAncho,
        fDivMaxAncho: DivMaxAncho,
        fFieldAncho: "auto",
        fLabelAncho: "auto"
      };
      field = $W.createCheckBox(name, field, nObj, size);
      $W("#" + idParent).append(field);
      return $W.VerifiIsInputFilled(document.getElementById(idParent));
    };
    _separador = function(obj, idParent) {
      var FormMaterial, field, id, nObj, size, text;
      text = obj.text || false;
      id = obj.id || false;
      if (obj.FormMaterial) {
        FormMaterial = obj.FormMaterial;
      } else {
        FormMaterial = 'true';
      }
      nObj = {
        text: text
      };
      size = {
        FormMaterial: FormMaterial
      };
      field = $W.createSeparador(nObj, size);
      return $W("#" + idParent).append(field);
    };
    _tabPanel = function(obj, idParent) {
      var ButomBack, ButomNext, LargoContentTabs, OverflowContentTabs, bodyHeight, bodyStyle, estyleIconBackNext, height, heightTabPanel, id, os, overflow, scrollX, scrollY, style, width;
      os = $W.Device().os.toLowerCase();
      if (!obj.height) {
        if (os === 'android' || os === 'ios') {
          height = 70;
        } else {
          height = 35;
        }
      } else {
        height = obj.height;
      }
      style = obj.style || '';
      bodyStyle = obj.bodyStyle || "";
      bodyHeight = obj.bodyHeight || ("calc(100% - " + height + ")");
      scrollX = obj.scrollX || false;
      scrollY = obj.scrollY || false;
      overflow = 'overflow:hidden;';
      if (scrollX === true && scrollY === true) {
        overflow = 'overflow-x:auto; overflow-y:auto;';
      }
      if (scrollX === true && scrollY === false) {
        overflow = 'overflow-x:auto; overflow-y:hidden;';
      }
      if (scrollX === false && scrollY === true) {
        overflow = 'overflow-x:hidden; overflow-y:auto;';
      }
      if (!isNaN(width)) {
        width = width + 'px';
      }
      if (!isNaN(height)) {
        height = height + 'px';
      }
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "win-tabpanel-" + CONTWIDGET;
      }
      if (os === 'android' || os === 'ios') {
        estyleIconBackNext = "style=\"font-size:50px; margin: 0 0 0 -11px\"";
        ButomBack = "";
        ButomNext = "";
        LargoContentTabs = "; width:100%";
        OverflowContentTabs = "; overflow-x:auto";
      } else {
        estyleIconBackNext = "";
        ButomBack = "<div class=\"tabPanelBTN\" position=\"left\" style=\"height:" + height + ";width:24px;\"> <i class=\"material-icons tabPanelBTN" + id + "\" " + estyleIconBackNext + " onclick=\"$W.ConfScrollTab('" + id + "','prev')\">&#xE5CB;</i> </div>";
        ButomNext = "<div class=\"tabPanelBTN\" position=\"right\" style=\"height:" + height + ";width:24px;\"> <i class=\"material-icons tabPanelBTN" + id + "\"  " + estyleIconBackNext + " onclick=\"$W.ConfScrollTab('" + id + "','next')\">&#xE5CC;</i> </div>";
        LargoContentTabs = "";
        OverflowContentTabs = "";
      }
      $W("#" + idParent).append(" <div style=\"width:100%\"> " + ButomBack + " <div id=\"" + id + "\" class=\"win-tabpanel\" style=\"height:" + height + " " + LargoContentTabs + " " + OverflowContentTabs + " " + style + "\" data-role=\"win-tabpanel\"> <div id=\"Content" + id + "\" class=\"ContentTabs\" style=\"height:" + height + ";\" largo=\"0\"></div> </div> " + ButomNext + " </div> <div id=\"win-tabpanel-body-" + id + "\" class=\"win-tabpanel-body\" style=\"" + overflow + " float:left; width:100%; height:" + bodyHeight + "; " + bodyStyle + "\"></div>");
      ELEMENTS[id] = {
        idParent: idParent,
        items: obj.items,
        disable: false,
        type: 'tabpanel'
      };
      if (obj.items) {
        _router(obj.items, id);
      }
      heightTabPanel = document.getElementById(id).offsetHeight;
      document.getElementById("win-tabpanel-body-" + id).style.height = "calc(100% - " + heightTabPanel + "px)";
      return setTimeout(function() {
        var Content, largo, padre;
        if ($W.Element(id).selected() === void 0) {
          $W.Element(id).selected(0);
        }
        Content = $W("#Content" + id);
        padre = $W("#" + id);
        largo = parseInt(Content.attr('largo')) + 40;
        Content.style('width', largo + 'px');
        if (parseInt(Content.attr('largo')) < parseInt(padre[0].offsetWidth)) {
          return $W(".tabPanelBTN" + id).hide();
        }
      });
    };
    $W.ConfScrollTab = function(cual, que) {
      var cuanto, div;
      div = document.getElementById(cual);
      cuanto = 100;
      if (que === 'prev') {
        div.scrollLeft = div.scrollLeft - cuanto;
      }
      if (que === 'next') {
        return div.scrollLeft = div.scrollLeft + cuanto;
      }
    };
    _tab = function(obj, idParent, cont) {
      var IconSize, IconoYLabel, WidthTab, bodyStyle, cls, dataSelected, dataState, disable, hidden, icon, id, os, overflow, scrollX, scrollY, selected, style, title;
      os = $W.Device().os.toLowerCase();
      if (os === 'android' || os === 'ios') {
        IconoYLabel = "width:100%;text-align:center;font-size:10px";
        IconSize = "28";
        WidthTab = "width:80px";
      } else {
        IconoYLabel = "";
        IconSize = "16";
        WidthTab = "";
      }
      style = obj.style || '';
      title = obj.title || '';
      hidden = obj.hidden || false;
      disable = obj.disable || false;
      cls = obj.cls || obj.icon || '';
      scrollX = obj.scrollX || false;
      scrollY = obj.scrollY || false;
      selected = obj.selected || false;
      bodyStyle = obj.bodyStyle || '';
      if (WidthTab !== "" && style !== "") {
        WidthTab = WidthTab + '; ';
      }
      overflow = 'overflow:hidden;';
      if (scrollX === true && scrollY === true) {
        overflow = 'overflow-x:auto; overflow-y:auto;';
      }
      if (scrollX === true && scrollY === false) {
        overflow = 'overflow-x:auto; overflow-y:hidden;';
      }
      if (scrollX === false && scrollY === true) {
        overflow = 'overflow-x:hidden; overflow-y:auto;';
      }
      if (cls !== '') {
        icon = "<i class=\"material-icons\" style=\'font-size:" + IconSize + "px; top:0px\'>" + cls + "</i>";
      } else {
        icon = '';
      }
      dataState = disable ? 'disable' : 'enable';
      dataSelected = selected ? 'true' : 'false';
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "win-tab-" + CONTWIDGET;
      }
      $W("#Content" + idParent).append("<div id=\"" + id + "\"class=\"win-tab\" data-selected=\"" + dataSelected + "\" data-state=\"" + dataState + "\" data-index=\"index-" + cont + "\" data-load=\"false\" style=\"" + WidthTab + " " + style + "\"> <div style=\"float:left; margin:0 3px 0 0; " + IconoYLabel + "\">" + icon + "</div> <div style=\"float:left; margin:0; " + IconoYLabel + "\">" + title + "</div> </div>");
      $W("#win-tabpanel-body-" + idParent).append("<div id=\"win-tab-body-" + id + "\" class=\"win-tab-body\" style=\"" + overflow + " height:100%; " + bodyStyle + "\" data-selected=\"false\" data-index=\"index-" + cont + "\"></div>");
      return setTimeout(function() {
        var largo, largoTab, objAdd;
        objAdd = [];
        if (obj.items) {
          objAdd = obj.items;
        }
        if (obj.autoLoad) {
          objAdd.push({
            xtype: 'body',
            scrollY: scrollY,
            scrollX: scrollX,
            autoLoad: obj.autoLoad
          });
        }
        if (obj.html) {
          objAdd.push({
            xtype: 'body',
            scrollY: scrollY,
            scrollX: scrollX,
            html: obj.html
          });
        }
        if (obj.tbar) {
          objAdd.unshift({
            xtype: 'tbar',
            items: obj.tbar
          });
        }
        ELEMENTS[id] = {
          idParent: idParent,
          items: objAdd,
          disable: disable,
          type: 'tab'
        };
        document.getElementById(id).onclick = function() {
          return _selectedTab(id);
        };
        if (selected === true) {
          _selectedTab(id);
        }
        largoTab = parseInt($W("#" + id).style('width'));
        largo = parseInt($W("#Content" + idParent).attr('largo')) + largoTab;
        return $W("#Content" + idParent).attr('largo', largo);
      });
    };
    _selectedTab = function(id) {
      var idParent, items, load, tab;
      if (ELEMENTS[id].disable) {
        return;
      }
      tab = document.getElementById(id);
      items = ELEMENTS[id].items;
      idParent = ELEMENTS[id].idParent;
      $W("#Content" + idParent + " > [data-selected=true]").attr("data-selected", "false");
      tab.setAttribute("data-selected", "true");
      $W("#win-tabpanel-body-" + idParent + " > [data-selected=true]").attr("data-selected", "false");
      $W("#win-tab-body-" + id).attr("data-selected", "true");
      load = tab.getAttribute("data-load");
      if (load === "false") {
        tab.setAttribute("data-load", "true");
        if (items) {
          return _router(items, "win-tab-body-" + id);
        }
      }
    };
    _panel = function(obj, idParent) {
      var height, html, id, overflow, scrollX, scrollY, style, title, width;
      width = obj.width || '160';
      height = obj.height || '60';
      html = obj.html || '';
      style = obj.style || '';
      title = obj.title || '';
      scrollX = obj.scrollX || false;
      scrollY = obj.scrollY || false;
      overflow = 'overflow:hidden;';
      if (scrollX === true && scrollY === true) {
        overflow = 'overflow-x:auto; overflow-y:auto;';
      }
      if (scrollX === true && scrollY === false) {
        overflow = 'overflow-x:auto; overflow-y:hidden;';
      }
      if (scrollX === false && scrollY === true) {
        overflow = 'overflow-x:hidden; overflow-y:auto;';
      }
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = CONTWIDGET;
      }
      if (title !== '') {
        height = height - 20;
        title = "<div id=\"win-panel-title-" + id + "\" style=\"height:20px; " + style + "\" class=\"win-panel-title\">" + title + "</div>";
      }
      if (!isNaN(width)) {
        width = width + 'px';
      }
      if (!isNaN(height)) {
        height = height + 'px';
      }
      $W("#" + idParent).append("<div id=\"win-panel-" + id + "\" class=\"win-panel\" style=\"width:" + width + "; height:" + height + "; " + style + "\" data-role=\"win-panel\"> " + title + " <div id=\"win-panel-load-" + id + "\" class=\"win-panel-load\" style=\"" + overflow + " width:" + width + "; height:" + height + "; " + style + "\"> " + html + " </div> </div>");
      if (obj.autoLoad) {
        return setTimeout(function() {
          obj.autoLoad.idApply = 'win-panel-load-' + id;
          return $W.Load(obj.autoLoad);
        });
      } else if (obj.items) {
        return _router(obj.items, "win-panel-load-" + id);
      }
    };
    _tbar = function(obj, idParent) {
      var id, os;
      os = $W.Device().os.toLowerCase();
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "win-tbar-" + CONTWIDGET;
      }
      $W("#" + idParent).append("<div id=\"" + id + "\" class=\"win-tbar\" os=\"" + os + "\" data-role=\"win-tbar\"></div>");
      if (obj.items) {
        _router(obj.items, "" + id);
      }
      return setTimeout(function() {
        return _resizeBody(document.getElementById(id).parentNode.id);
      });
    };
    _buttonGroup = function(obj, idParent) {
      var hidden, id, item, l, len1, ref1, style, title, width;
      hidden = obj.hidden || '';
      width = obj.width || 0;
      style = obj.style || '';
      title = obj.title || '';
      if (width === 0 && obj.items) {
        ref1 = obj.items;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          item = ref1[l];
          if (!item.hidden) {
            width += item.width > 0 ? item.width || 60 : void 0;
          }
        }
      }
      if (!isNaN(width)) {
        width = width + 'px';
      }
      if (hidden === true) {
        hidden = "display:none;";
      }
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = CONTWIDGET;
      }
      ELEMENTS[id] = {
        disable: false,
        hidden: hidden,
        type: 'buttonGroup'
      };
      if (title !== '') {
        title = "<div id=\"win-buttongroup-title-" + id + "\" style=\"height:20px;\" class=\"win-buttongroup-title\">" + title + "</div>";
      }
      $W("#" + idParent).append("<div id=\"" + id + "\" class=\"win-buttongroup\" style=\"width:" + width + "; " + hidden + " " + style + "\" data-role=\"win-buttongroup\"> " + title + " <div id=\"win-buttongroup-body-" + id + "\" class=\"win-buttongroup-body\" style=\"" + style + "\"></div> </div>");
      if (obj.items) {
        return _router(obj.items, "win-buttongroup-body-" + id);
      }
    };
    _button = function(obj, idParent) {
      var align, cls, dataState, disable, hidden, icon, iconColor, iconSize, id, os, styleHidden, text, width;
      text = obj.text || '';
      cls = obj.cls || '&#xE876;';
      icon = obj.icon || obj.cls;
      iconColor = obj.iconColor || '#FFF';
      iconSize = obj.iconSize || '24';
      align = obj.align || 'top';
      width = obj.width || 50;
      disable = obj.disable || false;
      hidden = obj.hidden || false;
      dataState = disable ? 'disable' : 'enable';
      styleHidden = hidden ? 'display:none;' : '';
      os = $W.Device().os.toLowerCase();
      if (os === 'android' || os === 'ios') {
        width = 60;
      }
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "win-btn-" + CONTWIDGET;
      }
      ELEMENTS[id] = {
        disable: disable,
        hidden: hidden,
        type: 'button'
      };
      if (!isNaN(width)) {
        width = width + 'px';
      }
      $W("#" + idParent).append("<div id=\"" + id + "\" class=\"win-btn\" style=\"width:" + width + ";\" data-role=\"win-btn\" data-state=\"" + dataState + "\" style=\"" + styleHidden + "\"> <i class=\"material-icons\" style=\"color:" + iconColor + "; font-size:" + iconSize + "px; width:100%;top:10px\">" + icon + "</i> <button class=\"save\" os=\"" + os + "\">" + text + "</button> </div>");
      _findResizeBody(id);
      if (obj.handler) {
        return setTimeout(function() {
          return document.querySelector("\#" + idParent + " > \#" + id).onclick = function() {
            if (ELEMENTS[id].disable || ELEMENTS[id].hidden) {
              return;
            }
            $W.BlockBtn(id);
            return obj.handler(this);
          };
        });
      }
    };
    _tbText = function(obj, idParent) {
      var id, style, text, width;
      text = obj.text || '';
      width = obj.width || 120;
      style = obj.style || 'left';
      if (width > 0) {
        width = width + 'px';
      }
      if (obj.id) {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "win-tbtext-" + CONTWIDGET;
      }
      return $W("#" + idParent).append("<div id=\"" + id + "\" class=\"win-tbtext\" style=\"width:" + width + "; " + style + "\" data-role=\"win-tbtext\">" + text + "</div>");
    };
    _separator = function(idParent) {
      return $W("#" + idParent).append("<div class=\"win-separator\" data-role=\"win-separator\">|</div>");
    };
    _separatorHeight = function(idParent) {
      return $W("#" + idParent).append("<div class=\"win-separatorHeight\" data-role=\"win-separatorHeight\"></div>");
    };
    _body = function(obj, idParent, exec) {
      var bodyStyle, clsBody, html, id, items, overflow, scrollX, scrollY;
      items = obj.items || '';
      html = obj.html || '';
      exec = exec || 'json';
      clsBody = obj.clsBody || '';
      bodyStyle = obj.bodyStyle || '';
      scrollX = obj.scrollX || false;
      scrollY = obj.scrollY || false;
      overflow = 'overflow:hidden;';
      if (scrollX === true && scrollY === true) {
        overflow = 'overflow-x:auto; overflow-y:auto;';
      }
      if (scrollX === true && scrollY === false) {
        overflow = 'overflow-x:auto; overflow-y:hidden;';
      }
      if (scrollX === false && scrollY === true) {
        overflow = 'overflow-x:hidden; overflow-y:auto;';
      }
      if (obj.idApply) {
        id = obj.idApply;
      } else if (obj.id && exec === 'router') {
        id = obj.id;
      } else {
        CONTWIDGET++;
        id = "win-body-" + CONTWIDGET;
      }
      $W("#" + idParent).append("<div id=\"" + id + "\" class=\"win-body " + clsBody + "\" style=\"" + overflow + " " + bodyStyle + "\" data-role=\"win-body\">" + html + "</div>");
      return setTimeout(function() {
        _resizeBody(idParent);
        if (obj.autoLoad) {
          obj.autoLoad.idApply = id;
          return $W.Load(obj.autoLoad);
        }
      });
    };
    _findResizeBody = function(id) {
      var body, div1, div2, div3, role, role1, role2, role3;
      if (!document.getElementById(id)) {
        return;
      }
      role = document.getElementById(id).getAttribute("data-role");
      if (role = "win-btn" || (role = "win-buttongroup")) {
        div1 = document.getElementById(id).parentNode;
        div2 = document.getElementById(id).parentNode.parentNode;
        div3 = document.getElementById(id).parentNode.parentNode.parentNode;
        body = '';
        role1 = div1.getAttribute("data-role");
        role2 = div2.getAttribute("data-role");
        role3 = div3.getAttribute("data-role");
        if (role1 === "win-body" || role1 === "win-section") {
          body = div1;
        } else if (role2 === "win-body" || role2 === "win-section") {
          body = div2;
        } else if (role3 === "win-body" || role3 === "win-section") {
          body = div3;
        }
        if (body !== '') {
          return setTimeout(function() {
            return _resizeBody(body.id);
          });
        }
      }
    };
    _resizeBody = function(idParent) {
      var alto, arrayDiv, body, height;
      if (!document.getElementById(idParent)) {
        return;
      }
      alto = 0;
      body = '';
      arrayDiv = document.querySelectorAll('#' + idParent + ' > [data-role]');
      [].forEach.call(arrayDiv, function(element) {
        var role;
        role = element.getAttribute("data-role");
        if (body !== '') {
          return;
        } else if (role === "win-body") {
          body = element;
          return;
        }
        return alto += element.offsetHeight;
      });
      height = alto === 0 ? '100%' : 'calc(100% - ' + (alto + 1) + 'px)';
      if (body !== '') {
        return setTimeout(function() {
          return body.style.height = height;
        });
      }
    };
    _draggStart = function(id, divParent, evt) {
      var cHe, cWi, diffX, diffY, divLeft, divTop, domMove, eHe, eWi, posX, posY;
      domMove = document.getElementById(id);
      evt = evt || window.event;
      posX = evt.clientX;
      posY = evt.clientY;
      divTop = domMove.style.top.replace('px', '');
      divLeft = domMove.style.left.replace('px', '');
      eWi = parseInt(domMove.offsetWidth);
      eHe = parseInt(domMove.offsetHeight);
      cWi = parseInt(divParent.offsetWidth);
      cHe = parseInt(divParent.offsetHeight);
      divParent.style.cursor = 'move';
      diffX = posX - divLeft;
      diffY = posY - divTop;
      return document.onmousemove = function(evt) {
        var aX, aY;
        evt = evt || window.event;
        posX = evt.clientX;
        posY = evt.clientY;
        aX = posX - diffX;
        aY = posY - diffY;
        if (aX < 0) {
          aX = 0;
        }
        if (aY < 0) {
          aY = 0;
        }
        if (aX + eWi > cWi) {
          aX = cWi - eWi;
        }
        if (aY + eHe > cHe) {
          aY = cHe - eHe;
        }
        return _draggMove(domMove, aX, aY);
      };
    };
    _draggMove = function(objDom, xpos, ypos) {
      objDom.style.left = xpos + 'px';
      return objDom.style.top = ypos + 'px';
    };
    _draggStop = function(objDom) {
      objDom.style.cursor = 'default';
      return document.onmousemove = function(e) {
        return e.preventDefault;
      };
    };
    _resize = function(objDom) {
      var _doDrag, _initDrag, _resizeXLeft, _resizeXRight, _resizeYBottom, _resizeYTop, _stopDrag, attrData, objParent, positionX, positionY, startHeight, startWidth, startX, startY;
      startX = 0;
      startY = 0;
      startWidth = 0;
      startHeight = 0;
      positionY = objDom.parentNode.style.top.replace('px', '') * 1;
      positionX = objDom.parentNode.style.left.replace('px', '') * 1;
      objParent = objDom.parentNode;
      attrData = objDom.getAttribute("data-resize");
      objDom.onmousedown = function(e) {
        return _initDrag(e);
      };
      _initDrag = function(e) {
        startX = e.clientX;
        startY = e.clientY;
        startWidth = parseInt(document.defaultView.getComputedStyle(objParent).width, 10);
        startHeight = parseInt(document.defaultView.getComputedStyle(objParent).height, 10);
        document.documentElement.addEventListener('mousemove', _doDrag, false);
        return document.documentElement.addEventListener('mouseup', _stopDrag, false);
      };
      _doDrag = function(e) {
        if (attrData === 'left') {
          return _resizeXLeft(e);
        } else if (attrData === 'right') {
          return _resizeXRight(e);
        } else if (attrData === 'top') {
          return _resizeYTop(e);
        } else if (attrData === 'bottom') {
          return _resizeYBottom(e);
        }
      };
      _stopDrag = function(e) {
        document.documentElement.removeEventListener('mousemove', _doDrag, false);
        return document.documentElement.removeEventListener('mouseup', _stopDrag, false);
      };
      _resizeXLeft = function(e) {
        objParent.style.left = (positionX + e.clientX - startX) + 'px';
        return objParent.style.width = (startWidth - e.clientX + startX) + 'px';
      };
      _resizeYTop = function(e) {
        objParent.style.top = (positionY + e.clientY - startY) + 'px';
        return objParent.style.height = (startHeight - e.clientY + startY) + 'px';
      };
      _resizeXRight = function(e) {
        if (e.clientX >= 500) {
          return objParent.style.width = (startWidth + e.clientX - startX) + 'px';
        }
      };
      return _resizeYBottom = function(e) {
        if (e.clientY >= 340) {
          return objParent.style.height = (startHeight + e.clientY - startY) + 'px';
        }
      };
    };
    return $W.Tooltip = function(obj) {
      if (obj === null) {
        return;
      }
      if (!obj.idApply) {
        $W.Error('Propiedad idApply no definida!');
        return;
      }
      if (!obj.html) {
        obj.html = "vacio";
      }
      if (!obj.width) {
        obj.width = 200;
      }
      if (!obj.style) {
        obj.style = "";
      }
      $W("#" + obj.idApply).on("mouseover", function() {
        var C, H, Ntop, StyleHori, StyleVert, V, alto, ancho, bottom, elemento, left, leftYwidth, margin, posicion, right, top, winAlto, winAncho;
        elemento = document.getElementById("" + obj.idApply);
        posicion = elemento.getBoundingClientRect();
        left = parseInt(posicion.left);
        right = parseInt(posicion.right);
        top = parseInt(posicion.top);
        bottom = parseInt(posicion.bottom);
        ancho = parseInt(posicion.width);
        alto = parseInt(posicion.height);
        margin = 10;
        winAncho = document.getElementsByTagName('body')[0].clientWidth;
        winAlto = document.getElementsByTagName('body')[0].clientHeight;
        H = "L";
        StyleHori = "left : " + left + ";";
        if (left < 10) {
          StyleHori = "left : 10;";
          H = "L";
        }
        leftYwidth = parseInt(left) + parseInt(obj.width);
        if (leftYwidth > winAncho) {
          StyleHori = "right : 10;";
          H = "R";
        }
        C = top - alto;
        if (C > (winAlto / 2)) {
          Ntop = winAlto - top + margin;
          StyleVert = "bottom:" + Ntop + "px;";
          V = 'B';
        } else {
          Ntop = top + alto + margin;
          StyleVert = "top:" + Ntop + "px;";
          V = 'T';
        }
        return $W("body").append("<div id=\"WinJSToolTip\" style=\"width:" + obj.width + "px; " + StyleHori + " " + StyleVert + " " + obj.style + "\" class=\"WinJSToolTip\"> <div class=\"WinJSToolTipFlecha\" posicion=\"" + V + H + "\"></div> <div class=\"WinJSToolTipFlecha2\" posicion=\"" + V + H + "\"></div> <div class=\"contentNombre\"> " + obj.html + " </div> </div>");
      });
      return $W("#" + obj.idApply).on("mouseout", function() {
        return $W("#WinJSToolTip").remove();
      });
    };
  })(Win);

  "use strict";

  (function($W) {
    var _contentsHtml, _contentsIframe, _tabs;
    $W.Desk = function(obj) {
      var OpcionesCabecera, contents, foto, logo, logoMain, logoMin, menuDerecho, os, tabs, type, typeContent, user;
      type = obj.type || 'dashboard';
      user = obj.user || '';
      foto = obj.foto || '';
      logo = obj.logo || 'images/logo.png';
      logoMin = obj.logoMin || 'images/logo.min.png';
      logoMain = obj.logoMain || 'images/logo.main.png';
      typeContent = obj.typeContent || 'html';
      os = $W.Device().os.toLowerCase();
      if (type = 'dashboard') {
        tabs = _tabs(obj);
        if (typeContent === 'iframe') {
          contents = _contentsIframe(obj);
        }
        if (typeContent === 'html') {
          contents = _contentsHtml(obj);
        }
        if (os === 'android' || os === 'ios') {
          OpcionesCabecera = "<div id=\"LabelNameModuleActive\" style=\"\"></div>";
        } else {
          OpcionesCabecera = "	<div id=\"ContentUser\" class=\"ContentUser\"> <div class=\"FotoUsuario\"><img src=\"" + foto + "\"></div> <div class=\"NombreUsuario\">" + user + "</div> <div class=\"OptionUsuario\"><i class=\"material-icons\">keyboard_arrow_down</i></div> </div>";
        }
        $W("body").style("perspective", "800px");
        $W("body").style("backgroundColor", "#2a3f54");
        $W("body").style("overflow", "hidden");
        if (os === 'android' || os === 'ios') {
          menuDerecho = "<input type=\"checkbox\" id=\"nav-trigger2\" class=\"nav-trigger2\"/> <label id=\"label_nav-trigger2\" for=\"nav-trigger2\"><i class=\"material-icons\">person</i></label> <div id=\"pestanas2\" class=\"navigationDesk2\"> <div id=\"ContentUserMovil\" class=\"ContentUserMovil\"> <div class=\"FotoUsuario\"><img src=\"" + foto + "\"></div> <div class=\"NombreUsuario\">" + user + "</div> </div> </div>";
        } else {
          menuDerecho = "";
        }
        $W("body").prepend("<style> .LogoCabecera{background-image: url(" + logo + ")} @media only screen and (min-width: 1025px) and (max-width: 1114px){ .nav-trigger:checked ~ #pestanas .LogoCabecera{background-image: url(" + logo + ");} .nav-trigger:not(checked) ~ #pestanas .LogoCabecera{background-image: url(" + logoMin + ");} } @media only screen and (min-width: 1115px){ .nav-trigger:checked ~ #pestanas .LogoCabecera{background-image: url(" + logoMin + ");} .nav-trigger:not(checked) ~ #pestanas .LogoCabecera{background-image: url(" + logo + ");} } </style> <input type=\"checkbox\" id=\"nav-trigger\" class=\"nav-trigger\"/> <label id=\"label_nav-trigger\" for=\"nav-trigger\"><i class=\"material-icons\">menu</i></label> <div id=\"pestanas\" class=\"navigationDesk\"> <div class=\"LogoCabecera\"></div> <ul id=lista> " + tabs + " </ul> </div> </div> " + menuDerecho + " <div id=\"ContenedorDerechoDesk\" class=\"ContenedorDerechoDesk\"> <div id=\"cabeceraDesk\" class=\"cabeceraDesk\"> " + OpcionesCabecera + " </div> <div id=\"contenidopestanas\" class=\"contentDesk\" style=\"background-image: url(images/logo.main.png); background-position: center; background-repeat: no-repeat;\"> " + contents + " </div> </div>");
        if (os === 'android' || os === 'ios') {
          $W('#nav-trigger').on('change', function() {
            return $W.checkNav1(this);
          });
          $W('#nav-trigger2').on('change', function() {
            return $W.checkNav2(this);
          });
          if (obj.contextItems) {
            return setTimeout(function() {
              var contentMenu, i, results;
              i = 0;
              results = [];
              while (i < obj.contextItems.length) {
                contentMenu = "<div id=\"menuUser_" + i + "\" class=\"MenuPersonalMovil\"> <a> <div class=\"icon\"> <i class=\"material-icons\">" + obj.contextItems[i].icon + "</i> </div> <div class=\"text\">" + obj.contextItems[i].text + "</div> </a> </div>";
                $W("#ContentUserMovil").append(contentMenu);
                $W("#menuUser_" + i).on("click", obj.contextItems[i].handler);
                results.push(i++);
              }
              return results;
            });
          }
        } else {
          if (obj.contextItems) {
            return setTimeout(function() {
              return $W.CtxMenu({
                idApply: "ContentUser",
                type: 'click',
                position: 'B-R',
                width: 300,
                items: obj.contextItems
              });
            });
          }
        }
      }
    };
    $W.checkNav1 = function(cual) {
      if (cual.checked === true) {
        $W("#nav-trigger").attr('checked', false);
        $W('#label_nav-trigger2').hide();
      } else {
        $W('#label_nav-trigger2').show();
      }
    };
    $W.checkNav2 = function(cual) {
      if (cual.checked === true) {
        $W("#nav-trigger2").attr('checked', false);
        $W('#label_nav-trigger').hide();
      } else {
        $W('#label_nav-trigger').show();
      }
    };
    _tabs = function(obj) {
      var arr, func, i, key, li, ref1, status, typeContent;
      typeContent = obj.typeContent || 'html';
      if (obj.items) {
        i = 0;
        li = '';
        ref1 = obj.items;
        for (key in ref1) {
          if (!hasProp1.call(ref1, key)) continue;
          arr = ref1[key];
          if (arr.enable === true || arr.enable === void 0) {
            func = '$W.Desk.Pestana(' + i + ',\'' + typeContent + '\',\'' + arr.text + '\',\'' + arr.icon + '\');';
            status = 'enable';
          } else {
            func = '';
            status = 'disable';
          }
          li += '<li id="pestana' + i + '" status="' + status + '"> <a href="javascript:' + func + '"> <div class="LiIcon"><i class="material-icons">' + arr.icon + '</i></div> <div class="LiTitle">' + arr.text + '</div> <div class="LiDescrip">' + arr.detail + '</div> </a> </li>';
          i++;
        }
      }
      return li;
    };
    _contentsHtml = function(obj) {
      var arr, div, i, key, ref1;
      if (obj.items) {
        i = 0;
        div = '';
        ref1 = obj.items;
        for (key in ref1) {
          if (!hasProp1.call(ref1, key)) continue;
          arr = ref1[key];
          div += '<div class="TabContent" id="cpestana' + i + '" open="false" url="' + arr.url + '"></div>';
          i++;
        }
      }
      return div;
    };
    _contentsIframe = function(obj) {
      var arr, div, i, key, ref1;
      if (obj.items) {
        i = 0;
        div = '';
        ref1 = obj.items;
        for (key in ref1) {
          if (!hasProp1.call(ref1, key)) continue;
          arr = ref1[key];
          div += '<div class="TabContent" id="cpestana' + i + '" open="false" url="' + arr.url + '">';
          div += '	<iframe id="IFR_CONTENIDO' + i + '" style="width:100%; height:100%" frameborder="0" scrolling="auto" AllowTransparency></iframe>';
          div += '</div>';
          i++;
        }
      }
      return div;
    };
    return $W.Desk.Pestana = function(cual, typeContent, label, ico) {
      var ElIframe, i, os, url, width;
      os = $W.Device().os.toLowerCase();
      i = 0;
      while (typeof $W('#contenidopestanas > div')[i] !== 'undefined') {
        $W('#contenidopestanas > .TabContent')[i].style.display = 'none';
        $W('#lista > li')[i].style.background = '';
        $W('#lista > li')[i].style.paddingBottom = '';
        i += 1;
      }
      $W('#cpestana' + cual).style('display', 'inline');
      $W('#cpestana' + cual).style('top', '0');
      $W('#cpestana' + cual).style('left', '0');
      $W('#pestana' + cual).style('background', 'rgba(255, 255, 255, .10)');
      $W('#pestana' + cual).style('paddingBottom', '2px');
      if ($W('#cpestana' + cual).attr('open') === 'false') {
        if (typeContent === 'html') {
          $W.Load({
            idApply: 'cpestana' + cual,
            url: $W('#cpestana' + cual).attr('url')
          });
        }
        if (typeContent === 'iframe') {
          $W.Loading();
          url = $W("#cpestana" + cual).attr("url");
          ElIframe = document.getElementById('IFR_CONTENIDO' + cual);
          ElIframe.onload = function() {
            return $W.Loading();
          };
          ElIframe.src = url + "?autorizado=true";
        }
        $W('#cpestana' + cual).attr('open', 'true');
        $W('#contenidopestanas').style('backgroundImage', 'none');
      }
      if (os === 'android' || os === 'ios') {
        $W('#LabelNameModuleActive').html("<i class=\"material-icons\">" + ico + "</i> " + label);
      }
      width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth2;
      if (width < 1115) {
        cual = document.getElementById('nav-trigger');
        cual.checked = false;
        $W.checkNav1(cual);
      }
    };
  })(Win);


  /*
   * Request XHR
   */

  (function($W) {
    var DEFAULT, JSONP_ID, MIME_TYPES, _isJsonP, _jsonp, _loadScript, _parseResponse, _xhr, _xhrError, _xhrForm, _xhrHeaders, _xhrStatus, _xhrSuccess, _xhrTimeout;
    DEFAULT = {
      METHOD: "POST",
      MIME: "text"
    };
    MIME_TYPES = {
      script: "text/javascript, application/javascript",
      json: "application/json",
      xml: "application/xml, text/xml",
      html: "text/html",
      text: "text/plain"
    };
    JSONP_ID = 0;
    $W.ajaxSettings = {
      async: true,
      method: DEFAULT.METHOD,
      success: {},
      failure: {},
      context: null,
      dataType: DEFAULT.MIME,
      headers: {},
      xhr: function() {
        return new window.XMLHttpRequest();
      },
      crossDomain: false,
      timeout: 0
    };
    _xhr = function(type, options) {
      var abortTimeout, error, settings, xhr;
      if (!options.contentType) {
        options.contentType = "application/x-www-form-urlencoded";
      }
      settings = $W.Mix($W.ajaxSettings, options);
      if (settings.method === DEFAULT.METHOD) {
        settings.params = $W.Serialize(settings.params);
      } else {
        settings.url += $W.Serialize(settings.params, "?");
      }
      if (_isJsonP(settings.url)) {
        return _jsonp(settings);
      }
      xhr = settings.xhr();
      xhr.onreadystatechange = function() {
        var error;
        if (xhr.readyState === 4) {
          clearTimeout(abortTimeout);
          if (type !== 'load') {
            return _xhrStatus(xhr, settings);
          } else {
            if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0) {
              try {
                $W("#" + options.idApply).html(xhr.responseText);
                return _loadScript($W("#" + options.idApply)[0]);
              } catch (error1) {
                error = error1;
                return console.log("Container not found!");
              }
            } else {
              $W("#" + options.idApply).html("Not found");
            }
          }
        }
      };
      xhr.open(settings.method, settings.url, settings.async);
      _xhrHeaders(xhr, settings);
      if (settings.timeout > 0) {
        abortTimeout = setTimeout((function() {
          return _xhrTimeout(xhr, settings);
        }), settings.timeout);
      }
      try {
        return xhr.send(settings.params);
      } catch (error1) {
        error = error1;
        xhr = error;
        _xhrError("Resource not found", xhr, settings);
        return xhr;
      }
    };
    $W.Ajax = function(options) {
      return _xhr('request', options);
    };
    $W.Load = function(options) {
      var error, text;
      text = options.text || 'cargando...';
      if (!options.idApply) {
        $W.Alert('idApply Obligatorio');
        return;
      }
      try {
        $W("#" + options.idApply).html("<div class=\"win-content-min-load\" > <div class=\"win-content-min-load-img\"> <div class=\"win-min-load-ajax\"></div> </div> <div class=\"win-content-min-load-label\">" + text + "</div> </div>");
        return _xhr('load', options);
      } catch (error1) {
        error = error1;
        return console.log("Container not found!");
      }
    };

    /*
    	Load data from the server using a HTTP GET request.
    	@method get
    	@param  {string} A string containing the URL to which the request is sent.
    	@param  {string} [OPTIONAL] A plain object or string that is sent to the server with the request.
    	@param  {string} [OPTIONAL] A callback function that is executed if the request succeeds.
    	@param  {string} [OPTIONAL] The type of data expected from the server
     */
    $W.get = function(url, params, success, dataType) {
      return $W.Ajax({
        url: url,
        method: 'GET',
        params: params,
        success: success,
        dataType: dataType
      });
    };

    /*
    	Load data from the server using a HTTP POST request.
    	@method post
    	@param  {string} A string containing the URL to which the request is sent.
    	@param  {string} [OPTIONAL] A plain object or string that is sent to the server with the request.
    	@param  {string} [OPTIONAL] A callback function that is executed if the request succeeds.
    	@param  {string} [OPTIONAL] The type of data expected from the server
     */
    $W.Post = function(url, params, success, dataType) {
      return _xhrForm("POST", url, params, success, dataType);
    };

    /*
    	Load data from the server using a HTTP PPUTOST request.
    	@method put
    	@param  {string} A string containing the URL to which the request is sent.
    	@param  {string} [OPTIONAL] A plain object or string that is sent to the server with the request.
    	@param  {string} [OPTIONAL] A callback function that is executed if the request succeeds.
    	@param  {string} [OPTIONAL] The type of data expected from the server
     */
    $W.Put = function(url, params, success, dataType) {
      return _xhrForm("PUT", url, params, success, dataType);
    };

    /*
    	Load data from the server using a HTTP DELETE request.
    	@method delete
    	@param  {string} A string containing the URL to which the request is sent.
    	@param  {string} [OPTIONAL] A plain object or string that is sent to the server with the request.
    	@param  {string} [OPTIONAL] A callback function that is executed if the request succeeds.
    	@param  {string} [OPTIONAL] The type of data expected from the server
     */
    $W.Delete = function(url, params, success, dataType) {
      return _xhrForm("DELETE", url, params, success, dataType);
    };

    /*
    	Encode a set of form elements as a string for submission.
    	@method serialize
    	@param  {object}
     */
    $W.Serialize = function(parameters, character) {
      var parameter, serialize;
      if (character == null) {
        character = "";
      }
      serialize = character;
      for (parameter in parameters) {
        if (parameters.hasOwnProperty(parameter)) {
          if (serialize !== character) {
            serialize += "&";
          }
          serialize += (encodeURIComponent(parameter)) + "=" + (encodeURIComponent(parameters[parameter]));
        }
      }
      if (serialize === character) {
        return "";
      } else {
        return serialize;
      }
    };
    _jsonp = function(settings) {
      var abortTimeout, callbackName, script, xhr;
      if (settings.async) {
        callbackName = "jsonp" + (++JSONP_ID);
        script = document.createElement("script");
        xhr = {
          abort: function() {
            $$(script).remove();
            if (callbackName in window) {
              return window[callbackName] = {};
            }
          }
        };
        abortTimeout = void 0;
        window[callbackName] = function(response) {
          clearTimeout(abortTimeout);
          $$(script).remove();
          return delete window[callbackName];
        };
        _xhrSuccess(response, xhr, settings);
        script.src = settings.url.replace(RegExp("=\\?"), "=" + callbackName);
        $$("head").append(script);
        if (settings.timeout > 0) {
          abortTimeout = setTimeout((function() {
            return _xhrTimeout(xhr, settings);
          }), settings.timeout);
        }
        return xhr;
      } else {
        return console.error("Win.ajax: Unable to make jsonp synchronous call.");
      }
    };
    _xhrStatus = function(xhr, settings) {
      if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0) {
        if (settings.async) {
          _xhrSuccess(_parseResponse(xhr, settings), xhr, settings);
        }
      } else {
        _xhrError("Win.ajax: Unsuccesful request", xhr, settings);
      }
    };
    _xhrSuccess = function(response, xhr, settings) {
      settings.success.call(settings.context, response, xhr);
    };
    _xhrError = function(method, xhr, settings) {
      settings.failure.call(settings.context, method, xhr, settings);
    };
    _xhrHeaders = function(xhr, settings) {
      var header;
      if (settings.contentType) {
        settings.headers["Content-Type"] = settings.contentType;
      }
      if (settings.dataType) {
        settings.headers["Accept"] = MIME_TYPES[settings.dataType];
      }
      for (header in settings.headers) {
        xhr.setRequestHeader(header, settings.headers[header]);
      }
    };
    _xhrTimeout = function(xhr, settings) {
      xhr.onreadystatechange = {};
      xhr.abort();
      _xhrError("win.ajax: Timeout exceeded", xhr, settings);
    };
    _xhrForm = function(method, url, params, success, dataType) {
      return $W.Ajax({
        url: url,
        method: method,
        params: params,
        success: success,
        dataType: dataType,
        contentType: "application/x-www-form-urlencoded"
      });
    };
    _isJsonP = function(url) {
      return RegExp("=\\?").test(url);
    };
    _parseResponse = function(xhr, settings) {
      var error, response;
      response = xhr;
      if (xhr.responseText) {
        if (settings.dataType === 'json') {
          try {
            response = JSON.parse(xhr.responseText);
          } catch (error1) {
            error = error1;
            response = error;
            _xhrError("Win.ajax: Parse Error", xhr, settings);
          }
        }
        if (settings.dataType === "xml") {
          response = xhr.responseXML;
        }
      }
      return response;
    };

    /*
    	@method _loadScript
    	@param  obj objectDom load script
     */
    return _loadScript = function(obj) {
      var i, l, len1, results, tagScript, tagsScript;
      tagsScript = obj.getElementsByTagName('script');
      results = [];
      for (l = 0, len1 = tagsScript.length; l < len1; l++) {
        i = tagsScript[l];
        tagScript = document.createElement('script');
        tagScript.innerHTML = i.innerHTML;
        results.push(i.parentNode.replaceChild(tagScript, i));
      }
      return results;
    };
  })(Win);

  "use strict";

  (function($W) {
    var _addListener, _createBtnTbar, _createOptionCombo, _isInputFilled, _keyEnable, _onInputBlur, _onInputFocus, _routerForm, _sizeBody, _validateDate, _validateDouble, _validateEmail, _validateInteger, _validateLowerCase, _validatePercent, _validateReal, _validateText, _validateUpperCase;
    $W.VerifiIsInputFilled = function(obj) {
      var i, inputs;
      inputs = obj.querySelectorAll('.with-label');
      i = 0;
      while (i < inputs.length) {
        _isInputFilled(inputs[i]);
        $W(inputs[i]).on('focus', _onInputFocus);
        $W(inputs[i]).on('blur', _onInputBlur);
        i++;
      }
    };
    _addListener = function(inputEl) {
      inputEl.on('focus', _onInputFocus);
      inputEl.on('blur', _onInputBlur);
    };
    _onInputFocus = function(evt) {
      evt.target.parentNode.classList.add('input-filled');
    };
    _onInputBlur = function(evt) {
      if (evt.target.value.trim() === '') {
        evt.target.parentNode.classList.remove('input-filled');
        evt.target.setAttribute('input-ok', 'false');
      } else {
        evt.target.setAttribute('input-ok', 'true');
      }
    };
    _isInputFilled = function(input) {
      if (input.value.trim() !== '' && !input.parentNode.classList.contains('input-filled')) {
        input.parentNode.classList.add('input-filled');
        input.setAttribute('input-ok', 'true');
      }
    };
    $W.Form = {};
    $W.Form.ini = function(obj, varPost) {
      var FLastDelete, FLastInsert, FLastUpdate, columNumber, fBodyAncho, fPermisoDelete, fPermisoInsert, fPermisoUpdate, fTbar, field, htmlForm, idApply, indexClass, name, opcionClass, size, url;
      if (obj === null) {
        return;
      }
      indexClass = obj.indexClass || '';
      name = obj.name || '';
      url = obj.url || '';
      size = obj.size || {};
      field = obj.field || {};
      opcionClass = obj.opcionClass || '';
      idApply = "parent_form_" + name;
      fBodyAncho = size.fBodyAncho || '';
      if (fBodyAncho > 0) {
        fBodyAncho += 'px';
      } else if (fBodyAncho === 'auto' || fBodyAncho === 0) {
        fBodyAncho = 'auto';
      }
      fTbar = obj.fTbar || false;
      fPermisoInsert = obj.fPermisoInsert || false;
      fPermisoUpdate = obj.fPermisoUpdate || false;
      fPermisoDelete = obj.fPermisoDelete || false;
      FLastInsert = obj.FLastInsert || false;
      FLastUpdate = obj.FLastUpdate || false;
      FLastDelete = obj.FLastDelete || false;
      columNumber = obj.columNumber || true;
      varPost = varPost || {};
      if (opcionClass === 'vInsert' && fPermisoInsert !== true && fPermisoInsert !== "true") {
        return;
      }
      htmlForm = _routerForm(opcionClass, name, field, size);
      $W("#" + idApply).append("<div id=\"form_tbar_" + name + "\"></div> <form name=\"form_" + name + "\" id=\"form_" + name + "\" autocomplete=\"off\" onsubmit=\"return false;\" data-role=\"win-body\" style=\"overflow:auto;\"> <div id=\"div_script_form_" + name + "\" class=\"form_load\"></div> <div class=\"form_body\" style=\"width:" + fBodyAncho + ";\">" + htmlForm + "</div> </form>");
      if (fTbar === true) {
        _createBtnTbar(name, opcionClass, url, indexClass, fPermisoInsert, fPermisoUpdate, fPermisoDelete, varPost, FLastInsert, FLastUpdate, FLastDelete, columNumber);
      }
      if (opcionClass === 'vUpdate' && fPermisoUpdate !== true && fPermisoUpdate !== "true") {
        $W("#form_" + name + " input, #form_" + name + " select, #form_" + name + " textarea").attr("disabled", "true");
      }
      return $W.Form.validate(idApply);
    };
    _sizeBody = (function(_this) {
      return function(size) {
        if (size.fDivMaxAncho !== false || size.fDivMaxAncho !== 'false') {
          if (!isNaN(size.fDivMaxAncho)) {
            size.fDivMaxAncho = size.fDivMaxAncho + 'px';
          }
          size.fDivMaxAncho = "max-width : " + size.fDivMaxAncho + ";";
        } else {
          size.fDivMaxAncho = "";
        }
        if (!isNaN(size.fDivAncho)) {
          size.fDivAncho = size.fDivAncho + 'px';
        }
        if (!isNaN(size.fDivAlto)) {
          size.fDivAlto = size.fDivAlto + 'px';
        }
        if (!isNaN(size.fLabelAncho)) {
          size.fLabelAncho = size.fLabelAncho + 'px';
        }
        if (!isNaN(size.fFieldAncho)) {
          size.fFieldAncho = size.fFieldAncho + 'px';
        }
        return size;
      };
    })(this);
    _createBtnTbar = function(name, opcionClass, url, indexClass, fPermisoInsert, fPermisoUpdate, fPermisoDelete, varPost, FLastInsert, FLastUpdate, FLastDelete, columNumber) {
      var arrayBtn;
      arrayBtn = [];
      if (opcionClass === 'vInsert' && fPermisoInsert !== false && fPermisoInsert !== "false") {
        arrayBtn.push({
          xtype: "button",
          id: "fInsert_" + name,
          cls: "&#xE876;",
          width: 60,
          text: "Guardar",
          handler: function() {
            return $W.Form.fSave(name, url, indexClass, varPost, FLastInsert, columNumber);
          }
        });
      } else if (opcionClass === 'vUpdate' && fPermisoUpdate !== false && fPermisoUpdate !== "false") {
        arrayBtn.push({
          xtype: "button",
          id: "fUpdate_" + name,
          cls: "&#xE877;",
          width: 60,
          text: "Actualizar",
          handler: function() {
            return $W.Form.fSave(name, url, indexClass, varPost, FLastUpdate, columNumber);
          }
        });
      }
      if (opcionClass === 'vUpdate' && fPermisoDelete !== false && fPermisoDelete !== "false") {
        arrayBtn.push({
          xtype: "button",
          id: "fDelete_" + name,
          cls: "&#xE872;",
          width: 60,
          text: "Eliminar",
          handler: function() {
            return $W.Form.fDelete(name, url, indexClass, varPost, FLastDelete, columNumber);
          }
        });
      }
      return $W.Tbar({
        idApply: "form_tbar_" + name,
        items: arrayBtn
      });
    };
    _routerForm = function(opcionClass, name, obj, size) {
      var field, html, value;
      html = "";
      for (field in obj) {
        if (!hasProp1.call(obj, field)) continue;
        value = obj[field];
        switch (value.type) {
          case 'Password':
            html += $W.createTextField(name, field, value, size);
            break;
          case 'TextField':
            html += $W.createTextField(name, field, value, size);
            break;
          case 'ComboBox':
            html += $W.createComboBox(name, field, value, size);
            break;
          case 'CheckBox':
            html += $W.createCheckBox(name, field, value, size);
            break;
          case 'TextArea':
            html += $W.createTextArea(name, field, value, size);
            break;
          case 'Separador':
            html += $W.createSeparador(value, size);
        }
      }
      return html;
    };
    $W.createTextField = function(name, field, obj, size) {
      var display, hayLabel, obligatorio, style, type, validate;
      size = _sizeBody(size);
      type = obj.type || 'text';
      if (type === 'TextField') {
        type = 'text';
      }
      display = 'block';
      validate = obj.validate || '';
      if (validate !== '') {
        validate = "data-validate=\"" + validate + "\"";
      }
      if (obj.hidden === true || obj.hidden === "true" || obj.hidden === "hidden") {
        type = 'hidden';
        display = 'none';
      }
      style = obj.required === true && obj.value === '' ? 'empty' : 'none';
      if (!isNaN(obj.width)) {
        obj.width = obj.width + 'px';
      }
      if (size.FormMaterial === true || size.FormMaterial === 'true') {
        if (obj.required === 'true') {
          obligatorio = 'true';
        } else {
          obligatorio = 'false';
        }
        if (!obj.label) {
          obj.label = 'Sin Label';
        }
        return "<div id=\"form_content_field_" + name + "_" + field + "\" materialDesign=\"true\" class=\"form_content_field\" style=\"width:" + size.fDivAncho + "; min-height:" + size.fDivAlto + "; display:" + display + "; " + size.fDivMaxAncho + "\"> <input type=\"" + type + "\" style=\"width:" + obj.width + ";\" class=\"with-label\" obligatorio=\'" + obligatorio + "\' input-ok=\'false\' name=\"" + field + "\" id=\"form_" + name + "_" + field + "\" value=\"" + obj.value + "\" data-value=\"" + obj.value + "\" data-required=\"" + obj.required + "\" data-style=\"" + style + "\" data-label=\"" + obj.label + "\" " + validate + "/> <label class=\"floating-label\" for=\"form_" + name + "_" + field + "\">" + obj.label + "</label> </div>";
      } else {
        if (obj.label) {
          hayLabel = "<div id=\"form_label_" + name + "_" + field + "\" class=\"form_label\" style=\"width:" + size.fLabelAncho + ";\">" + obj.label + "</div>";
        } else {
          hayLabel = "";
        }
        return "<div id=\"form_content_field_" + name + "_" + field + "\" materialDesign=\"false\" class=\"form_content_field\" style=\"width:" + size.fDivAncho + "; min-height:" + size.fDivAlto + "; display:" + display + "\"> " + hayLabel + " <div id=\"form_field_" + name + "_" + field + "\" class=\"form_field\" style=\"width:" + size.fFieldAncho + ";\"> <input type=\"" + type + "\" name=\"" + field + "\" id=\"form_" + name + "_" + field + "\" value=\"" + obj.value + "\" style=\"width:" + obj.width + ";\" data-value=\"" + obj.value + "\" data-required=\"" + obj.required + "\" data-style=\"" + style + "\" data-label=\"" + obj.label + "\" " + validate + "/> </div> </div>";
      }
    };
    $W.createComboBox = function(name, field, obj, size) {
      var hayLabel, htmlOption, obligatorio, option, style;
      size = _sizeBody(size);
      style = obj.required === true && obj.value === '' ? 'empty' : 'none';
      option = obj.option || {};
      htmlOption = _createOptionCombo(obj.value, option);
      if (!isNaN(obj.width)) {
        obj.width = obj.width + 'px';
      }
      if (size.FormMaterial == true || size.FormMaterial == 'true') {
        if (obj.required === 'true') {
          obligatorio = 'true';
        } else {
          obligatorio = 'false';
        }
        if (!obj.label) {
          obj.label = 'Sin Label';
        }
        return "<div id=\"form_content_field_" + name + "_" + field + "\" materialDesign=\"true\" class=\"form_content_field\" style=\"width:" + size.fDivAncho + "; min-height:" + size.fDivAlto + "; " + size.fDivMaxAncho + "\"> <select class=\"with-label\" obligatorio=\'" + obligatorio + "\' input-ok=\'false\' name=\"" + field + "\" id=\"form_" + name + "_" + field + "\" data-value=\"" + obj.value + "\" data-textdb=\"" + obj.textdb + "\" data-required=\"" + obj.required + "\" data-style=\"" + style + "\" data-label=\"" + obj.label + "\">" + htmlOption + "</select> <label class=\"floating-label\" for=\"form_" + name + "_" + field + "\">" + obj.label + "</label> </div>";
      } else {
        if (obj.label) {
          hayLabel = "<div id=\"form_label_" + name + "_" + field + "\" class=\"form_label\" style=\"width:" + size.fLabelAncho + ";\">" + obj.label + "</div>";
        } else {
          hayLabel = "";
        }
        return "<div id=\"form_content_field_" + name + "_" + field + "\" materialDesign=\"false\" class=\"form_content_field\" style=\"width:" + size.fDivAncho + "; min-height:" + size.fDivAlto + ";\"> " + hayLabel + " <div id=\"form_field_" + name + "_" + field + "\" class=\"form_field\" style=\"width:" + size.fFieldAncho + ";\"> <select name=\"" + field + "\" id=\"form_" + name + "_" + field + "\" style=\"width:" + obj.width + ";\" data-value=\"" + obj.value + "\" data-textdb=\"" + obj.textdb + "\" data-required=\"" + obj.required + "\" data-style=\"" + style + "\" data-label=\"" + obj.label + "\">" + htmlOption + "</select> </div> </div>";
      }
    };
    _createOptionCombo = function(value, obj) {
      var html, index, key, option, selected;
      html = "<option value=\"\">Seleccione...</option>";
      value = value.toString();
      for (key in obj) {
        if (!hasProp1.call(obj, key)) continue;
        option = obj[key];
        index = option.index.toString();
        selected = index === value ? "selected" : "";
        html += "<option value=\"" + index + "\" " + selected + ">" + option.value + "</option>";
      }
      return html;
    };
    $W.createTextArea = function(name, field, obj, size) {
      var obligatorio, style, value;
      size = _sizeBody(size);
      style = obj.required === true && obj.value === '' ? 'empty' : 'none';
      value = obj.value.replace(/<br \/>/g, '\n');
      if (!isNaN(obj.width)) {
        obj.width = obj.width + 'px';
      }
      if (!isNaN(obj.height)) {
        obj.height = obj.height + 'px';
      }
      if (size.FormMaterial == true || size.FormMaterial == 'true') {
        if (obj.required == 'true') {
          obligatorio = 'true';
        } else {
          obligatorio = 'false';
        }
        return "<div id=\"form_content_field_" + name + "_" + field + "\" materialDesign=\"true\" class=\"form_content_field\" style=\"width:" + size.fDivAncho + "; " + size.fDivMaxAncho + " min-height:" + size.fDivAlto + ";\"> <textarea class=\"with-label\" obligatorio=\'" + obligatorio + "\' input-ok=\'false\' name=\"" + field + "\" id=\"form_" + name + "_" + field + "\" style=\"height:" + obj.height + ";\" data-required=\"" + obj.required + "\" data-style=\"" + style + "\" data-label=\"" + obj.label + "\">" + value + "</textarea> <label class=\"floating-label\" for=\"form_" + name + "_" + field + "\">" + obj.label + "</label> </div>";
      } else {
        return "<div id=\"form_content_field_" + name + "_" + field + "\" materialDesign=\"false\" class=\"form_content_field\" style=\"width:" + size.fDivAncho + "; min-height:" + size.fDivAlto + ";\"> <div id=\"form_label_" + name + "_" + field + "\" class=\"form_label\" style=\"width:" + size.fLabelAncho + ";\">" + obj.label + "</div> <div id=\"form_field_" + name + "_" + field + "\" class=\"form_field\" style=\"width:" + size.fFieldAncho + ";\"> <textarea name=\"" + field + "\" id=\"form_" + name + "_" + field + "\" style=\"width:" + obj.width + "; height:" + obj.height + ";\" data-required=\"" + obj.required + "\" data-style=\"" + style + "\" data-label=\"" + obj.label + "\">" + value + "</textarea> </div> </div>";
      }
    };
    $W.createSeparador = function(obj, size) {
      if (size.FormMaterial == true || size.FormMaterial == 'true') {
        return "<div class=\"form_separador\" materialdesign=\"true\"> <div style=\"width:80%; float:left\">" + obj.text + "</div> </div>";
      } else {
        return "<div class=\"form_separador\" materialdesign=\"false\"> <div style=\"width:80%; float:left\">" + obj.text + "</div> </div>";
      }
    };
    $W.createCheckBox = function(name, field, obj, size) {
      var Label_L, Label_R, checked, checkedd, display, hayLabel, labelOrientation, label_L, label_R, obligatorio, style, type, validate;
      size = _sizeBody(size);
      type = obj.type || 'checkbox';
      display = 'block';
      validate = obj.validate || '';
      labelOrientation = obj.labelOrientation || 'R';
      checked = obj.checked || false;
      if (obj.checked === true) {
        checkedd = "checked";
      } else {
        checkedd = "";
      }
      if (validate !== '') {
        validate = "data-validate=\"" + validate + "\"";
      }
      if (obj.hidden === true || obj.hidden === "true" || obj.hidden === "hidden") {
        type = 'hidden';
        display = 'none';
      }
      style = obj.required === true && obj.value === '' ? 'empty' : 'none';
      if (!isNaN(obj.width)) {
        obj.width = obj.width + 'px';
      }
      if (obj.required === 'true') {
        obligatorio = 'true';
      } else {
        obligatorio = 'false';
      }
      if (labelOrientation === "R") {
        Label_R = "<label class=\"floating-label\" for=\"form_" + name + "_" + field + "\">" + obj.label + "</label>";
        Label_L = "";
      }
      if (labelOrientation === "L") {
        Label_L = "<label class=\"floating-label\" for=\"form_" + name + "_" + field + "\">" + obj.label + "</label>";
        Label_R = "";
      }
      if (size.FormMaterial === true || size.FormMaterial === 'true') {
        if (!obj.label) {
          obj.label = 'Sin Label';
        }
        if (labelOrientation === "R") {
          label_R = "<div id=\"form_label_" + name + "_" + field + "\" class=\"form_label\" style=\"width:" + size.fLabelAncho + ";\">" + obj.label + "</div>";
          label_L = "";
        }
        if (labelOrientation === "L") {
          label_L = "<div id=\"form_label_" + name + "_" + field + "\" class=\"form_label\" style=\"width:" + size.fLabelAncho + ";\">" + obj.label + "</div>";
          label_R = "";
        }
        return "<div id=\"form_content_field_" + name + "_" + field + "\" materialDesign=\"true\" class=\"form_content_field\" style=\"width:" + size.fDivAncho + "; min-height:" + size.fDivAlto + "; display:" + display + "; " + size.fDivMaxAncho + "\"> " + label_L + " <div id=\"form_field_" + name + "_" + field + "\" class=\"form_field\" style=\"width:" + size.fFieldAncho + ";\"> <input type=\"" + type + "\" " + checkedd + " style=\"width:" + obj.width + ";\" input-ok=\'false\' name=\"" + field + "\" id=\"form_" + name + "_" + field + "\" value=\"" + obj.value + "\" data-value=\"" + obj.value + "\" data-required=\"" + obj.required + "\" data-style=\"" + style + "\" data-label=\"" + obj.label + "\" " + validate + "/> <div> <label for=\"form_" + name + "_" + field + "\"></label> </div> </div> " + label_R + " </div>";
      } else {
        if (obj.label) {
          hayLabel = "<div id=\"form_label_" + name + "_" + field + "\" class=\"form_label\" style=\"width:" + size.fLabelAncho + ";\">" + obj.label + "</div>";
        } else {
          hayLabel = "";
        }
        return "<div id=\"form_content_field_" + name + "_" + field + "\" materialDesign=\"false\" class=\"form_content_field\" style=\"width:" + size.fDivAncho + "; min-height:" + size.fDivAlto + "; display:" + display + "\"> " + hayLabel + " <div id=\"form_field_" + name + "_" + field + "\" class=\"form_field\" style=\"width:" + size.fFieldAncho + ";\"> <input type=\"" + type + "\" " + checkedd + " name=\"" + field + "\" id=\"form_" + name + "_" + field + "\" value=\"" + obj.value + "\" style=\"width:" + obj.width + ";\" data-value=\"" + obj.value + "\" data-required=\"" + obj.required + "\" data-style=\"" + style + "\" data-label=\"" + obj.label + "\" " + validate + "/> </div> </div>";
      }
    };
    $W.Form.field = function(obj) {
      switch (obj.type) {
        case 'integer':
          $W('#' + obj.idApply).addClass += " win-input-number";
          $W('#' + obj.idApply)[0].onkeypress = function(event) {
            return _validateInteger({
              event: event,
              eventType: 'keypress',
              input: this
            });
          };
          return $W('#' + obj.idApply)[0].onchange = function(event) {
            return _validateInteger({
              event: event,
              eventType: 'change',
              input: this
            });
          };
        case 'double':
          $W('#' + obj.idApply).addClass += " win-input-number";
          $W('#' + obj.idApply)[0].onkeypress = function(event) {
            return _validateDouble({
              event: event,
              eventType: 'keypress',
              input: this
            });
          };
          return $W('#' + obj.idApply)[0].onchange = function(event) {
            return _validateDouble({
              event: event,
              eventType: 'change',
              input: this
            });
          };
        case 'real':
          $W('#' + obj.idApply).addClass += " win-input-number";
          $W('#' + obj.idApply)[0].onkeypress = function(event) {
            return _validateReal({
              event: event,
              eventType: 'keypress',
              input: this
            });
          };
          return $W('#' + obj.idApply).on('change', function(event) {
            return _validateReal({
              event: event,
              eventType: 'change',
              input: this
            });
          });
        case 'text':
          $W('#' + obj.idApply)[0].onkeyup = function(event) {
            return _validateText({
              event: event,
              eventType: 'keyup',
              input: this,
              option: obj.option
            });
          };
          return $W('#' + obj.idApply)[0].onchange = function(event) {
            return _validateText({
              event: event,
              eventType: 'change',
              input: this,
              option: obj.option
            });
          };
        case 'email':
          return $W('#' + obj.idApply)[0].onchange = function(event) {
            return _validateEmail({
              event: event,
              input: this
            });
          };
        case 'date':
          return new $W.DatePicker(_validateDate(obj));
        case 'time':
          return $('#' + obj.idApply).clockpicker({
            placement: 'bottom',
            align: 'left',
            autoclose: true,
            'default': 'now'
          });
        case 'percent':
          $W('#' + obj.idApply)[0].onkeydown = function(event) {
            if (event.keyCode === 13) {
              return _validatePercent({
                event: event,
                eventType: 'keypress',
                input: this
              });
            }
          };
          return $W('#' + obj.idApply)[0].onchange = function(event) {
            return _validatePercent({
              event: event,
              input: this
            });
          };
      }
    };
    $W.Form.validate = function(id) {
      var campos;
      campos = document.getElementById(id).querySelectorAll("input, textarea, select");
      [].forEach.call(campos, function(input) {
        var type;
        type = input.getAttribute('data-validate');
        switch (type) {
          case 'integer':
            input.className += " win-input-number";
            input.onkeypress = function(event) {
              return _validateInteger({
                event: event,
                eventType: 'keypress',
                input: this
              });
            };
            return input.addEventListener("change", function(event) {
              return _validateInteger({
                event: event,
                eventType: 'change',
                input: this
              });
            });
          case 'double':
            input.className += " win-input-number";
            return input.addEventListener("change", function(event) {
              return _validateDouble({
                event: event,
                eventType: 'change',
                input: this
              });
            });
          case 'real':
            input.className += " win-input-number";
            input.onkeypress = function(event) {
              return _validateReal({
                event: event,
                eventType: 'keypress',
                input: this
              });
            };
            return input.onchange = function(event) {
              return _validateReal({
                event: event,
                eventType: 'change',
                input: this
              });
            };
          case 'uppercase':
            input.className += " win-input-uppercase";
            return input.addEventListener("change", function(event) {
              return _validateUpperCase({
                event: event,
                eventType: 'change',
                input: this
              });
            });
          case 'lowercase':
            input.className += " win-input-lowercase";
            return input.addEventListener("change", function(event) {
              return _validateLowerCase({
                event: event,
                eventType: 'change',
                input: this
              });
            });
          case 'email':
            return input.addEventListener("change", function(event) {
              return _validateEmail({
                event: event,
                input: this
              });
            });
          case 'percent':
            return input.addEventListener("change", function(event) {
              return _validatePercent({
                event: event,
                input: this
              });
            });
          case 'date':
            return new $W.DatePicker({
              idApply: input.id
            });
          case 'time':
            return $('#' + input.id).clockpicker({
              placement: 'bottom',
              align: 'left',
              autoclose: true,
              'default': 'now'
            });
          default:
            input.onkeyup = function(event) {
              return _validateText({
                event: event,
                eventType: 'keyup',
                input: this
              });
            };
            return input.onchange = function(event) {
              return _validateText({
                event: event,
                eventType: 'change',
                input: this
              });
            };
        }
      });
      return $W.VerifiIsInputFilled(document.getElementById(id));
    };
    _validateInteger = function(obj) {
      var key;
      key = document.all ? obj.event.keyCode : obj.event.which;
      if (_keyEnable(key)) {
        return true;
      } else if (obj.eventType === 'keypress') {
        return /\d/.test(String.fromCharCode(key));
      } else if (obj.eventType === 'change') {
        return obj.input.value = obj.input.value.replace(/[^\d.]/g, '');
      }
    };
    _validateDouble = function(obj) {
      var arrayValue, key, validate;
      key = document.all ? obj.event.keyCode : obj.event.which;
      if (_keyEnable(key)) {
        return true;
      } else if (obj.eventType === 'keypress') {
        return /[\d.]/.test(String.fromCharCode(key));
      } else if (obj.eventType === 'change') {
        obj.input.value = obj.input.value.replace(/[^\d.]/g, '');
        validate = !!obj.input.value.toString().match(/(^-?\d\d*[\.|,]\d*$)|(^-?\d\d*$)|(^-?[\.|,]\d\d*$)/);
        if (!validate) {
          arrayValue = obj.input.value.split(".");
          return obj.input.value = arrayValue[0] + '.' + arrayValue[1];
        }
      }
    };
    _validateReal = function(obj) {
      var key, value;
      key = document.all ? obj.event.keyCode : obj.event.which;
      if (_keyEnable(key)) {
        return true;
      } else if (obj.eventType === 'keypress') {
        return /[\d.-]/.test(String.fromCharCode(key));
      } else if (obj.eventType === 'change') {
        value = obj.input.value;
        if (value === '') {
          return;
        }
        value = value.replace(/[^\d.-]/g, '');
        if (isNaN(value)) {
          return obj.input.value = '';
        } else {
          return obj.input.value = value;
        }
      }
    };
    _validateText = function(obj) {
      var key;
      key = document.all ? obj.event.keyCode : obj.event.which;
      if (_keyEnable(key)) {
        return true;
      } else if (obj.eventType === 'change') {
        return obj.input.value = obj.input.value.replace(/[\#\"\']/g, '');
      }
    };
    _validateUpperCase = function(obj) {
      var key;
      key = document.all ? obj.event.keyCode : obj.event.which;
      if (_keyEnable(key)) {
        return true;
      } else {
        obj.input.value = (obj.input.value.replace(/[\#\-\"\']/g, '')).toUpperCase();
      }
      return true;
    };
    _validateLowerCase = function(obj) {
      var key;
      key = document.all ? obj.event.keyCode : obj.event.which;
      if (_keyEnable(key)) {
        return true;
      } else {
        obj.input.value = (obj.input.value.replace(/[\#\-\"\']/g, '')).toUpperCase();
      }
      return true;
    };
    _validateEmail = function(obj) {
      var validate;
      validate = !!obj.input.value.toString().match(/(^[a-z0-9]([0-9a-z\-_\.]*)@([0-9a-z_\-\.]*)([.][a-z]{3})$)|(^[a-z]([0-9a-z_\.\-]*)@([0-9a-z_\-\.]*)(\.[a-z]{2,4})$)/i);
      if (!validate) {
        obj.input.value = "";
        return obj.input.focus();
      }
    };
    _validatePercent = function(obj) {
      var max, min, result;
      max = obj.input.getAttribute('data-max') * 1;
      min = obj.input.getAttribute('data-min') * 1;
      result = obj.input.value * 1;
      if (result <= max) {
        if (result >= min) {
          console.log('valor aceptado');
        } else {
          alert('no se aceptan  menores a ' + min);
          obj.input.value = '';
          obj.input.focus();
        }
      } else {
        alert('no se aceptan muneros mayores a' + max);
        obj.input.value = '';
        obj.input.focus();
      }
      return true;
    };
    _keyEnable = function(key) {

      /*
      		 * KEY CODE
      		 *
      		 * key==8 		// BACKSPACE
      		 * key==9 		// TAB
      		 * key==0 		// TAB
      		 * key==13 		// ENTER
      		 * key==37 		// CURSOR LEFT
      		 * key==39 		// CURSOR RIGHT
      		 * key==38 		// CURSOR TOP
      		 * key==40 		// CURSOR BOTTOM
      		 *
       */
      if (key === 8 || key === 9 || key === 0 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40) {
        return true;
      }
      return false;
    };
    _validateDate = function(obj) {
      var values;
      obj.yearRange = obj.yearRange ? obj.yearRange : 10;
      obj.bound = obj.bound ? obj.bound : void 0;
      obj.position = obj.position ? obj.position : 'bottom left';
      obj.reposition = obj.reposition ? obj.reposition : true;
      obj.format = obj.format ? obj.format : 'YYYY-MM-DD';
      obj.defaultDate = obj.defaultDate ? obj.defaultDate : null;
      obj.setDefaultDate = obj.setDefaultDate ? obj.setDefaultDate : false;
      obj.firstDay = obj.firstDay ? obj.firstDay : 1;
      obj.formatStrict = obj.formatStrict ? obj.formatStrict : false;
      obj.minDate = obj.minDate ? obj.minDate : null;
      obj.maxDate = obj.maxDate ? obj.maxDate : null;
      obj.showWeekNumber = obj.showWeekNumber ? obj.showWeekNumber : false;
      obj.minYear = obj.minYear ? obj.minYear : 0;
      obj.maxYear = obj.maxYear ? obj.maxYear : 9999;
      obj.minMonth = obj.minMonth ? obj.minMonth : void 0;
      obj.maxMonth = obj.maxMonth ? obj.maxMonth : void 0;
      obj.startRange = obj.startRange ? obj.startRange : null;
      obj.endRange = obj.endRange ? obj.endRange : null;
      obj.isRTL = obj.isRTL ? obj.isRTL : false;
      obj.yearSuffix = obj.yearSuffix ? obj.yearSuffix : '';
      obj.showMonthAfterYear = obj.showMonthAfterYear ? obj.showMonthAfterYear : false;
      obj.showDaysInNextAndPreviousMonths = obj.showDaysInNextAndPreviousMonths ? obj.showDaysInNextAndPreviousMonths : false;
      obj.numberOfMonths = obj.numberOfMonths ? obj.numberOfMonths : 1;
      obj.mainCalendar = obj.mainCalendar ? obj.mainCalendar : 'left';
      obj.container = obj.container ? obj.container : void 0;
      return values = {
        idApply: obj.idApply,
        yearRange: obj.yearRange
      };
    };
    return "use strict";
  })(Win);

  (function($W) {
    var GRILLA, _DVcreateAside, _DVcreateFab, _DVcreateTitles, _DVcreateToolbar, _DVcreateToolbarMovil, _createAside, _createCol, _createColMovil, _createContent, _createFab, _createPagination, _createRows, _createTbar, _createTitle, _createToolbar, _createToolbarMovil, _execScript, _insertUpdateRow, _jsonParams;
    $W.Grilla = {};
    GRILLA = {};
    $W.Dataview = function(obj) {
      var FunctionOnScroll, GrillaTitles, advancedToolbar, arrayAside, columNumber, columns, columnsMovil, fab, htmlAside, htmlContent, htmlGrilla, htmlToolbar, idApply, name, os, style, titles, toolbar, widthGrilla;
      os = $W.Device().os.toLowerCase();
      name = obj.name || '';
      arrayAside = obj.filterAside || '';
      toolbar = obj.toolbar || true;
      advancedToolbar = obj.advancedToolbar || 'disable';
      columns = obj.columns || [];
      columnsMovil = obj.columnsMovil || [];
      columNumber = obj.columNumber || true;
      GRILLA[name] = {
        columns: columns,
        idApply: idApply,
        columNumber: columNumber,
        countRows: 1
      };
      if (!obj.idApply) {
        $W.Alert('No se puede renderizar, no existe el parametro "idApply"');
        return;
      } else {
        idApply = obj.idApply;
      }
      if (toolbar === true) {
        if (os === 'android' || os === 'ios') {
          htmlToolbar = _DVcreateToolbarMovil(name, advancedToolbar);
        } else {
          style = 'style="height:calc(100% - 28px);"';
          htmlToolbar = _DVcreateToolbar(name, advancedToolbar);
        }
      } else {
        htmlToolbar = '';
      }
      htmlAside = _DVcreateAside(name, arrayAside);
      fab = _DVcreateFab(name, toolbar, htmlAside, os);
      if (os === 'android' || os === 'ios') {
        widthGrilla = '100%';
      } else {
        if (htmlAside !== "") {
          widthGrilla = "calc(100% - 200px);";
        }
      }
      titles = _DVcreateTitles(name, columns, columNumber);
      GrillaTitles = "<div id=\"grilla_title_" + name + "\" class=\"grilla_title\" style=\"width:100%;overflow:hidden;\"> <div style=\"width:# objTitle.width px;\">" + titles + "</div> </div>";
      FunctionOnScroll = "onscroll=\"$W.ConfScroll(this,'" + name + "')\"";
      htmlContent = "<div id=\"grilla_content_" + name + "\" class=\"grilla_content\" os=\"" + os + "\" " + style + "> " + GrillaTitles + " <div id=\"grilla_body_" + name + "\" class=\"grilla_body\" os=\"" + os + "\" style=\"\" " + FunctionOnScroll + ">  </div> <!--<div class=\"grilla_footer\" style=\"min-width:# objTitle.width px;\">#//{htmlPage}</div>--> </div>";
      htmlGrilla = "<div id=\"grilla_ventana_" + name + "\" class=\"grilla_ventana noSelect\" style=\"height:100%\" data-role=\"win-body\"> " + htmlAside + " <div id=\"grilla_" + name + "\" class=\"grilla_load\" style=\"width:100%\"> " + htmlToolbar + " " + htmlContent + " </div> " + fab + " </div>";
      return $W("#" + idApply).append(htmlGrilla);
    };
    $W.Dataview.createRow = function(obj) {
      var columNumberAttr, contRow, data, eventCtxMenu, handler, htmlCol, i, idRow, name, numeracion, opcionClass, os, osType, rowHtml, width;
      os = $W.Device().os.toLowerCase();
      osType = $W.Device().osType.toLowerCase();
      if (!obj.name) {
        $W.Alert("No se definio el Nombre del DataView en el parametro 'name'!");
        return;
      } else {
        name = obj.name;
      }
      if (!obj.idRow) {
        $W.Alert("No se definio el id unico de la fila 'idRow'!");
        return;
      } else {
        idRow = obj.idRow;
      }
      eventCtxMenu = "";
      opcionClass = "";
      contRow = GRILLA[name].countRows;
      if (!obj.handler) {
        handler = "$W.Dataview.AutoWindows(" + idRow + ",'insert')";
      } else {
        handler(obj.handler);
      }
      if (osType === 'movil') {
        data = obj.dataMovil;
      } else {
        data = obj.data;
      }
      htmlCol = "";
      i = 0;
      if (GRILLA[name].columNumber === 'true' || GRILLA[name].columNumber === true) {
        numeracion = "<div id=\"grilla_fila_cont_" + name + "_" + idRow + "\" class=\"grilla_fila_cont\">" + contRow + "</div>";
        columNumberAttr = '35';
      } else {
        numeracion = "<div id=\"grilla_fila_cont_" + name + "_" + idRow + "\" class=\"grilla_fila_cont\" style=\"width:0px;color:#FFF;\">" + contRow + "</div>";
        columNumberAttr = '17';
      }
      while (i < GRILLA[name].columns.length) {
        width = GRILLA[name].columns[i].width || 60;
        htmlCol += "<div id=\"div_" + name + "_" + GRILLA[name].columns[i].id + "_" + idRow + "\" class=\"grilla_celdas\" style=\"width:" + width + "px; " + obj.style + "\" data-type=\"col\">" + data[i] + "</div>";
        i++;
      }
      rowHtml = "<div id=\"grilla_content_fila_" + name + "_" + idRow + "\" os=\"" + os + "\" class=\"grilla_content_fila\" data-index=\"" + idRow + "\" data-cont=\"" + contRow + "\" style=\"float:left; width:100%; \"> <div id=\"grilla_fila_" + name + "_" + idRow + "\" os=\"" + os + "\" class=\"grilla_fila\" ondblclick=\"" + handler + "\" " + eventCtxMenu + " data-state=\"" + opcionClass + "\" data-index=\"" + idRow + "\"> <div id=\"MuestraToltip_" + name + "_" + idRow + "\" class=\"grilla_col_first\" style=\"width:" + columNumberAttr + "px\"> <div id=\"grilla_fila_image_" + name + "_" + idRow + "\" class=\"grilla_fila_image\" data-icon=\"" + opcionClass + "\"></div> " + numeracion + " </div> " + htmlCol + " </div> </div>";
      $W("#grilla_body_" + name).append(rowHtml);
      return GRILLA[name].countRows++;
    };
    $W.Dataview.createRows = function(obj) {};
    _DVcreateTitles = function(name, obj, columNumber) {
      var html, i, os, osType, tWidth, text, width;
      os = $W.Device().osType.toLowerCase();
      tWidth = 0;
      console.log(columNumber);
      if ((columNumber === 'true' || columNumber === true) && os !== 'movil') {
        html = "<div class=\"grilla_title_label\" style=\"width:35px;\">No.</div>";
        tWidth = tWidth + 35;
      } else {
        html = "<div class=\"grilla_title_label\" style=\"width:17px;\"></div>";
        tWidth = tWidth + 17;
      }
      i = 0;
      while (i < obj.length) {
        text = obj[i].text || obj[i].id;
        osType = obj[i].osType || 'all';
        width = obj[i].width || 60;
        if (osType === os || osType === 'all') {
          html += "<div class=\"grilla_title_label\" style=\"width:" + width + "px;\"> <div style=\"float:left; width:100%; height:100%;\">" + text + "</div> <!--# htmlOrder --> </div>";
        }
        tWidth = tWidth + width;
        i++;
      }
      return html;
    };
    _DVcreateAside = function(name, arrayAside) {

      /*os = $W.Device().os.toLowerCase()
      
      		html  = ""
      		group = ""
      
      		##console.log arrayAside
      		count = 0
      		for own key, value of arrayAside
      			##html += "<div class=\"grilla-aside-title\">#{value.title}</div>"
      			group += "<div class=\"grilla-aside-title\">#{value.title}</div>"
      
      			##console.log arrayAside.labels
      			for own key, value2 of value.labels
      				group += "<div id=\"grilla-aside-label-#{name}-#{count}\" activo=\"false\" class=\"grilla-aside-label\" groupname=\"#{name} \" group=\"#{value.idCampo}\" filtroCampo=\"#{value.idCampo}\" filtroValor=\"#{value2.valor}\" onclick=\"$W.Grilla.aplyFilter(this,'#{name}','#{arrayAside}')\">
      							<i class=\"material-icons\">&#xE5CA;</i>
      							<div class=\"grilla-aside-label-text\">#{value2.label}</div>
      						  	<div class=\"grilla-aside-label-count\">(#{value2.cantidad})</div>
      						  </div>"
      				count++
      
      		if group != ""
      			if os == 'android' || os == 'ios'
      				html = "<aside id=\"grilla_aside_#{name}\" os=\"#{os}\" data-state=\"close\" style=\"width:0;\">
      							<div id=\"grilla_aside_head_#{name}\"class=\"grilla-aside-head\" onclick=\"$W.Grilla.eventAside('#{name}')\"><i class=\"material-icons\" style=\"top:0\">arrow_back</i>&nbsp;Filtros de busqueda</div>
      							<div id=\"grilla_aside_content_group_#{name}\" class=\"grilla_aside_content_group\">#{group}</div>
      							<div id=\"grilla_aside_content_group2_#{name}\" class=\"grilla_aside_content_group2\" onclick=\"$W.Grilla.eventAside('#{name}')\">Filtros de busqueda <i class=\"material-icons\">&#xE5CB;</i></div>
      						</aside>"
      			else
      				html = "<aside id=\"grilla_aside_#{name}\" os=\"#{os}\" data-state=\"open\" style=\"width:200px;\">
      							<div id=\"grilla_aside_head_#{name}\"class=\"grilla-aside-head\" onclick=\"$W.Grilla.eventAside('#{name}')\"><i class=\"material-icons\" style=\"top:0\">filter_list</i>&nbsp;Filtros de busqueda</div>
      							<div id=\"grilla_aside_content_group_#{name}\" class=\"grilla_aside_content_group\">#{group}</div>
      							<div id=\"grilla_aside_content_group2_#{name}\" class=\"grilla_aside_content_group2\" onclick=\"$W.Grilla.eventAside('#{name}')\">Filtros de busqueda <i class=\"material-icons\">&#xE5CB;</i></div>
      						</aside>"
       */
      var html;
      html = "";
      return html;
    };
    _DVcreateFab = function(name, toolbar, htmlAside, os) {

      /*if os == 'android' || os == 'ios'
      
      			if toolbar == true && htmlAside != ""
      
      				fab = "<div class=\"fab\">
      							<span class=\"fab-action-button\">
      								<i class=\"material-icons\">more_vert</i>
      							</span>
      							<ul class=\"fab-buttons\">
      								<li class=\"fab-buttons__item\">
      									<a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.buscar('#{name}')\">
      										<i class=\"material-icons\">refresh</i>
      									</a>
      								</li>
      								<li class=\"fab-buttons__item\">
      									<a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.eventAside('#{name}'); $W.Grilla.eventAsideRecalculateHeightMovil('#{name}')\">
      										<i class=\"material-icons\">filter_list</i>
      									</a>
      								</li>
      								<li class=\"fab-buttons__item\">
      									<a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W('#field_buscar_#{name}').focus()\">
      										<i class=\"material-icons\">search</i>
      									</a>
      								</li>
      							</ul>
      						</div>"
      
      			if toolbar == true && htmlAside == ""
      
      				fab = "<div class=\"fab\">
      							<span class=\"fab-action-button\">
      								<i class=\"material-icons\">more_vert</i>
      							</span>
      							<ul class=\"fab-buttons\">
      								<li class=\"fab-buttons__item\">
      									<a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.buscar('#{name}')\">
      										<i class=\"material-icons\">refresh</i>
      									</a>
      								</li>
      								<li class=\"fab-buttons__item\">
      									<a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W('#field_buscar_#{name}').focus()\">
      										<i class=\"material-icons\">search</i>
      									</a>
      								</li>
      							</ul>
      						</div>"
      
      			if toolbar == false && htmlAside != ""
      
      				fab = "<div class=\"fab\">
      							<span class=\"fab-action-button\">
      								<i class=\"material-icons\">more_vert</i>
      							</span>
      							<ul class=\"fab-buttons\">
      								<li class=\"fab-buttons__item\">
      									<a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.buscar('#{name}')\">
      										<i class=\"material-icons\">refresh</i>
      									</a>
      								</li>
      								<li class=\"fab-buttons__item\">
      									<a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.eventAside('#{name}'); $W.Grilla.eventAsideRecalculateHeightMovil('#{name}')\">
      										<i class=\"material-icons\">filter_list</i>
      									</a>
      								</li>
      							</ul>
      						</div>"
      
      
      			if toolbar == false && htmlAside == ""
      
      				fab = "<div class=\"fab\" onclick=\"$W.Grilla.buscar('#{name}')\">
      								<span class=\"fab-action-button\">
      									<i class=\"material-icons\">refresh</i>
      								</span>
      							</div>"
      
      		else
       */
      var fab;
      fab = "";
      return fab;
    };
    _DVcreateToolbar = function(name, advancedToolbar) {
      return "<div id=\"grilla_toolbar_" + name + "\" class=\"grilla_toolbar\"> <div> <div class=\"grilla_toolbar_input\"> <input type=\"text\" id=\"field_buscar_" + name + "\" onKeyUp=\"$W.Grilla.inputBuscar(event,\'" + name + "\')\" placeholder=\"Buscar...\"/> </div> <div data-search=\"" + advancedToolbar + "\" title=\"Busquedas avanzada\" id=\"grilla_type_search_" + name + "\" class=\"grilla_type_search\" onclick=\"$W.Grilla.typeSearch(this)\"> <i class=\"material-icons\" style=\"top:0px\">&#xE8FA;</i> </div> <div id=\"grilla_toolbar_reload_" + name + "\" class=\"grilla_toolbar_reload\"> <i class=\"material-icons\" style=\"top:0px\">&#xE863;</i> </div> </div> </div>";
    };
    _DVcreateToolbarMovil = function(name, advancedToolbar) {

      /* "<div id=\"grilla_toolbar_#{name}\" class=\"grilla_toolbar_movil\">
      			<div data-search=\"#{advancedToolbar}\" title=\"Busquedas avanzada\" id=\"grilla_type_search_#{name}\" class=\"grilla_type_search_movil\" onclick=\"$W.Grilla.typeSearch(this)\"></div>
      			<input type=\"text\" id=\"field_buscar_#{name}\" onKeyUp=\"$W.Grilla.inputBuscar(event,\'#{name}\')\" placeholder=\"Buscar...\"/>
      		</div>"
       */
      return "<div data-search=\"" + advancedToolbar + "\" title=\"Busquedas avanzada\" id=\"grilla_type_search_" + name + "\" class=\"grilla_type_search_movil\" onclick=\"$W.Grilla.typeSearch(this)\"></div> <input type=\"text\" class=\"InputSearchGrilla\" id=\"field_buscar_" + name + "\" onKeyUp=\"$W.Grilla.inputBuscar(event,\'" + name + "\')\" placeholder=\"Buscar...\"/>";
    };
    $W.Grilla.ini = function(obj, varPost) {
      var Vheight, VmaxHeight, VmaxWidth, VminHeight, VminWidth, Vwidth, advancedToolbar, arrayAside, columNumber, ctxMenu, eventInsert, eventUpdate, fNameWindow, fPermisoInsert, fTitle, fab, grillaHeight, htmlAside, htmlContent, htmlGrilla, htmlToolbar, idApply, maxPage, name, opcionClass, os, pagina, parentHtml, rows, style, tbar, tbarHeight, textBtnNuevo, titleItems, toolbar, url, valueToolbar, widthGrilla;
      if (obj === null) {
        return;
      }
      name = obj.name || '';
      style = '';
      url = obj.url || '';
      idApply = obj.idApply || '';
      opcionClass = obj.opcionClass || '';
      rows = obj.rows || {};
      titleItems = obj.titleItems || {};
      widthGrilla = '100%';
      parentHtml = idApply;
      tbar = obj.tbar || '';
      tbarHeight = obj.tbarHeight || '';
      toolbar = obj.toolbar || false;
      valueToolbar = obj.valueToolbar || '';
      advancedToolbar = obj.advancedToolbar || 'disable';
      ctxMenu = obj.ctxMenu || [];
      arrayAside = obj.filterAside || '';
      pagina = obj.pagina || '';
      maxPage = obj.maxPage || '';
      varPost = varPost || {};
      textBtnNuevo = obj.textBtnNuevo || 'Nuevo';
      fPermisoInsert = obj.fPermisoInsert || false;
      fTitle = obj.fTitle || '';
      Vwidth = obj.Vwidth || 'auto';
      VminWidth = obj.VminWidth || '';
      VmaxWidth = obj.VmaxWidth || '';
      Vheight = obj.Vheight || 'auto';
      VminHeight = obj.VminHeight || '';
      VmaxHeight = obj.VmaxHeight || '';
      fNameWindow = obj.fNameWindow || '';
      eventInsert = obj.eventInsert || '';
      eventUpdate = obj.eventUpdate || '';
      columNumber = obj.columNumber;
      grillaHeight = "";
      GRILLA[name] = {
        url: url,
        varPost: varPost
      };
      os = $W.Device().os.toLowerCase();
      if (tbar === true && opcionClass === '') {
        _createTbar(name, idApply, fNameWindow, Vwidth, Vheight, VminWidth, VminHeight, VmaxWidth, VmaxHeight, obj.scrollX, obj.scrollY, fTitle, textBtnNuevo, fPermisoInsert, eventInsert);
        tbarHeight = document.getElementById("grilla_tbar_" + name).offsetHeight;
        grillaHeight = "height:calc(100% - " + tbarHeight + "px);";
      } else {
        grillaHeight = 'height:100%;';
      }
      if (toolbar === true) {
        if (os === 'android' || os === 'ios') {
          htmlToolbar = _createToolbarMovil(name, advancedToolbar);
        } else {
          style = 'style="height:calc(100% - 28px);"';
          htmlToolbar = _createToolbar(name, advancedToolbar);
        }
      } else {
        htmlToolbar = '';
      }
      htmlAside = _createAside(name, arrayAside);
      htmlContent = _createContent(name, opcionClass, pagina, maxPage, style, titleItems, rows, eventUpdate, fNameWindow, fTitle, Vwidth, Vheight, VminWidth, VminHeight, VmaxWidth, VmaxHeight, obj.scrollX, obj.scrollY, columNumber);
      fab = _createFab(name, toolbar, htmlAside, os);
      if (os === 'android' || os === 'ios') {
        widthGrilla = '100%';
      } else {
        if (htmlAside !== "") {
          widthGrilla = "calc(100% - 200px);";
        }
      }
      if (opcionClass === '') {
        htmlGrilla = "<div id=\"grilla_ventana_" + name + "\" class=\"grilla_ventana noSelect\" style=\"" + grillaHeight + "\" data-role=\"win-body\"> " + htmlAside + " <div id=\"grilla_" + name + "\" class=\"grilla_load\" style=\"width:" + widthGrilla + "\"> " + htmlToolbar + " " + htmlContent + " </div> " + fab + " </div>";
      } else {
        parentHtml = "grilla_" + name;
        htmlGrilla = "" + htmlToolbar + htmlContent;
      }
      $W("#" + parentHtml).append(htmlGrilla);
      $W("\#grilla_toolbar_reload_" + name).on("click", function() {
        return $W.Grilla.buscar(name);
      });
      $W("\#grilla_content_page_" + name + " .grilla_page").on("click", function() {
        return $W.Grilla.pagination(this, name, valueToolbar, pagina, maxPage);
      });
      if (opcionClass === "filterField") {
        if (document.getElementById("field_buscar_" + name)) {
          if (valueToolbar !== "") {
            document.getElementById("field_buscar_" + name).value = valueToolbar;
            return document.getElementById("field_buscar_" + name).focus();
          }
        }
      }
    };
    $W.Grilla.eventAsideRecalculateHeightMovil = function(name) {
      var ven;
      ven = $W("#grilla_body_" + name);
      return $W("#grilla_aside_" + name).style('height', ven[0]['clientHeight'] + 'px');
    };
    $W.Grilla.fOpen = function(name, id, fNameWindow, title, width, height, minWidth, minHeight, maxWidth, maxHeight, scrollY, scrollX) {
      var opcionClass, params, state, url;
      url = GRILLA[name]["url"];
      params = GRILLA[name]["varPost"];
      opcionClass = 'vInsert';
      if (id !== '') {
        opcionClass = 'vUpdate';
        state = document.getElementById("grilla_fila_" + name + "_" + id).getAttribute('data-state');
        if (state === 'fDelete') {
          return;
        }
      }
      params.indexClass = id;
      params.opcionClass = opcionClass;
      return eval("window." + fNameWindow + " = new $W.Window({ id        : \"" + fNameWindow + "\", width     : width, height    : height, minWidth  : minWidth, minHeight : minHeight, maxWidth  : maxWidth, maxHeight : maxHeight, scrollX   : scrollX, scrollY   : scrollY, title     : title, modal     : true, closable  : true, drag      : true, resize    : true, autoLoad  : { url    : url, params : params } })");
    };
    $W.Grilla.inputBuscar = function(e, name) {
      var tecla;
      tecla = document.all ? e.keyCode : e.which;
      if (tecla === 13) {
        $W.Grilla.buscar(name);
      }
      return true;
    };
    _jsonParams = function(name) {
      var arrayOrder, divOrder, field, params, state;
      params = GRILLA[name]["varPost"];
      params.activeOrder = "";
      params.valueToolbar = "";
      params.advancedToolbar = "disable";
      if (document.getElementById("field_buscar_" + name)) {
        params.valueToolbar = document.getElementById("field_buscar_" + name).value;
        params.advancedToolbar = document.getElementById("grilla_type_search_" + name).getAttribute("data-search");
      }
      arrayOrder = document.querySelectorAll("#grilla_title_" + name + " [data-order=upOn], #grilla_title_" + name + " [data-order=downOn]");
      if (arrayOrder[0]) {
        divOrder = arrayOrder[0];
        field = divOrder.getAttribute("data-field");
        state = divOrder.getAttribute("data-order");
        params.activeOrder = JSON.stringify({
          field: field,
          state: state
        });
      }
      return params;
    };
    $W.Grilla.eventAside = function(name) {
      var aside, asideContent, asideContent2, grilla, grillaHead, os, state;
      os = $W.Device().os.toLowerCase();
      grilla = document.getElementById("grilla_" + name);
      aside = document.getElementById("grilla_aside_" + name);
      grillaHead = document.getElementById("grilla_aside_head_" + name);
      asideContent = document.getElementById("grilla_aside_content_group_" + name);
      asideContent2 = document.getElementById("grilla_aside_content_group2_" + name);
      state = aside.getAttribute('data-state');
      if (state === 'open') {
        if (os === 'android' || os === 'ios') {
          aside.style.width = '0';
          grilla.style.width = '100%';
        } else {
          grilla.style.width = 'calc(100% - 21px)';
          aside.style.width = '21px';
        }
        grillaHead.style.fontSize = '0px';
        asideContent.style.display = 'none';
        asideContent2.style.display = 'inline';
        return aside.setAttribute('data-state', 'close');
      } else {
        aside.style.width = '200px';
        if (os === 'android' || os === 'ios') {
          grilla.style.width = '100%';
        } else {
          grilla.style.width = 'calc(100% - 200px)';
        }
        grillaHead.style.fontSize = '14px';
        asideContent.style.opacity = 1;
        asideContent.style.width = '100%';
        asideContent.style.display = 'inline';
        asideContent2.style.display = 'none';
        return aside.setAttribute('data-state', 'open');
      }
    };
    $W.Grilla.aplyFilter = function(thisDiv, name, arrayAside) {
      var Campo, Divs, FilterData, Group, GroupName, JsonString, Valor, i, params, url;
      Group = thisDiv.getAttribute('group');
      GroupName = thisDiv.getAttribute('groupname');
      Divs = document.getElementsByClassName(thisDiv.className);
      FilterData = new Array();
      i = 0;
      while (i < Divs.length) {
        if (Divs[i].getAttribute("group") === Group && Divs[i].getAttribute("groupname") === GroupName) {
          if (Divs[i].id === thisDiv.id) {
            if (Divs[i].getAttribute("activo") === 'true') {
              Divs[i].setAttribute("activo", "false");
            } else {
              Divs[i].setAttribute("activo", "true");
            }
          } else {
            Divs[i].setAttribute("activo", "false");
          }
        }
        if (Divs[i].getAttribute("activo") === 'true' && Divs[i].getAttribute("groupname") === GroupName) {
          Campo = Divs[i].getAttribute("filtroCampo");
          Valor = Divs[i].getAttribute("filtroValor");
          FilterData[FilterData.length] = {
            "campo": Campo,
            "valor": Valor
          };
        }
        i++;
      }
      url = GRILLA[name]["url"];
      params = GRILLA[name]["varPost"];
      params.opcionClass = "aplyFilter";
      JsonString = JSON.stringify(FilterData);
      params.FilterData = JSON.stringify(FilterData).replace(/\"/g, "'");
      return $W.Load({
        idApply: "grilla_" + name,
        url: url,
        params: params
      });
    };
    $W.Grilla.buscar = function(name) {
      var params, url;
      url = GRILLA[name]["url"];
      params = _jsonParams(name);
      params.opcionClass = "filterField";
      return $W.Load({
        idApply: "grilla_" + name,
        url: url,
        params: params
      });
    };
    $W.Grilla.pagination = function(elementDom, name, valueToolbar, pag_actual, page_max) {
      var action, pagina, params, parentDom, url;
      url = GRILLA[name]["url"];
      pagina = 0;
      page_max = page_max * 1;
      pag_actual = pag_actual * 1;
      action = elementDom.getAttribute("data-type");
      parentDom = document.getElementById("grilla_content_" + name).parentNode;
      if (action === 'next' && pag_actual === page_max) {
        return;
      } else if (action === 'prev' && pag_actual === 1) {
        return;
      } else if (action === 'last' && pag_actual === page_max) {
        return;
      } else if (action === 'first' && pag_actual === 1) {
        return;
      } else if (action === 'next') {
        pagina = pag_actual + 1;
      } else if (action === 'prev') {
        pagina = pag_actual - 1;
      } else if (action === 'last') {
        pagina = page_max;
      } else if (action === 'first') {
        pagina = 1;
      }
      params = GRILLA[name]["varPost"];
      params.pagina = pagina;
      params.opcionClass = 'paginacion';
      params.valueToolbar = valueToolbar;
      return $W.Load({
        idApply: parentDom.id,
        url: url,
        params: params
      });
    };
    $W.Grilla.updateRow = function(name, id) {
      var cont, opcionClass, params, url;
      url = GRILLA[name]["url"];
      opcionClass = 'updateRow';
      params = GRILLA[name]["varPost"];
      params.indexClass = id;
      params.opcionClass = opcionClass;
      if (!document.getElementById("grilla_fila_cont_" + name + "_" + id)) {
        return;
      }
      cont = document.getElementById("grilla_fila_cont_" + name + "_" + id).innerHTML;
      return $W.Ajax({
        url: url,
        params: params,
        success: function(result, xhr) {
          var json;
          if (!$W.Script.isJSON(result.responseText)) {
            return;
          }
          json = JSON.parse(result.responseText);
          document.getElementById("grilla_content_fila_" + name + "_" + id).innerHTML = _createRows(name, opcionClass, json.rows, json.eventUpdate, json.fNameWindow, json.fTitle, json.width, json.height, json.minWidth, json.minHeight, json.maxWidth, json.maxHeight, json.scrollX, json.scrollY, json.columNumber);
          document.getElementById("grilla_fila_cont_" + name + "_" + id).innerHTML = cont;
          return document.getElementById("grilla_fila_image_" + name + "_" + id).setAttribute('data-icon', 'fUpdate');
        },
        failure: function(xhr) {
          return console.log("fail");
        }
      });
    };
    $W.Grilla.insertRow = function(name, id) {
      var opcionClass, params, url;
      url = GRILLA[name]["url"];
      opcionClass = 'insertRow';
      params = GRILLA[name]["varPost"];
      params.indexClass = id;
      params.opcionClass = opcionClass;
      return $W.Ajax({
        url: url,
        params: params,
        success: function(xhrResponse, xhr) {
          return _insertUpdateRow(name, url, xhrResponse, opcionClass);
        },
        failure: function(xhr) {
          return console.log("fail");
        }
      });
    };
    $W.Grilla.deleteRow = function(name, id) {
      return $W("#grilla_content_fila_" + name + "_" + id).hide();

      /*document.getElementById("grilla_fila_#{name}_#{id}").setAttribute('data-state','fDelete')
      		document.getElementById("grilla_fila_image_#{name}_#{id}").setAttribute('data-icon','fDelete')
      		arrayDivHtml = document.querySelectorAll("#grilla_fila_#{name}_#{id} [data-type=html]")
      		[].forEach.call(arrayDivHtml,(input) ->
      			input.innerHTML = ''
      		)
       */
    };
    $W.Form.fSave = function(name, url, indexClass, varPost, lastfunction) {

      /*console.log(name);
      		console.log(url);
      		console.log(indexClass);
      		console.log(varPost);
       */
      var arrayInput, contRequired, i, jsonForm, l, len1, msjRequired, objForm, opcionClass, params;
      objForm = {};
      arrayInput = [];
      msjRequired = '';
      contRequired = 0;
      opcionClass = indexClass !== '' ? 'fUpdate' : 'fInsert';
      arrayInput[0] = document.querySelectorAll("#form_" + name + " input");
      arrayInput[1] = document.querySelectorAll("#form_" + name + " select");
      arrayInput[2] = document.querySelectorAll("#form_" + name + " textarea");
      for (l = 0, len1 = arrayInput.length; l < len1; l++) {
        i = arrayInput[l];
        [].forEach.call(i, function(objDom) {
          var data, field, id, label, required, value;
          id = objDom.id;
          value = objDom.value;
          label = objDom.getAttribute('data-label');
          required = objDom.getAttribute('data-required');
          if (value === '' && required === 'true') {
            contRequired++;
            msjRequired += '<br />* ' + label;
          }
          field = id.replace("form_" + name + "_", "");
          objForm[field] = value;
          if (objDom.tagName === "select" || objDom.tagName === "SELECT") {
            data = objDom.getAttribute("data-textdb");
            if (data !== "") {
              return objForm[data] = objDom.options[objDom.selectedIndex].text;
            }
          }
        });
      }
      jsonForm = JSON.stringify(objForm);
      if (contRequired === 1) {
        $W.Alert('El siguiente campo es obligatorio<br />' + msjRequired);
        return;
      } else if (contRequired > 1) {
        $W.Alert('Los siguientes campos son obligatorios<br />' + msjRequired);
        return;
      }
      params = varPost;
      params.indexClass = indexClass;
      params.opcionClass = opcionClass;
      params.jsonFormValue = jsonForm;
      return $W.Ajax({
        url: url,
        params: params,
        success: function(xhrResponse, xhr) {
          var item, json, key;
          _insertUpdateRow(name, url, xhrResponse, opcionClass);
          json = JSON.parse(xhrResponse.responseText);
          if (json.estado === 'true') {
            if (lastfunction !== false) {
              for (key in varPost) {
                if (!hasProp1.call(varPost, key)) continue;
                item = varPost[key];
                lastfunction.replace("[" + key + "]", varPost[key]);
              }
              return eval(lastfunction);
            }
          }
        },
        failure: function(xhr) {
          return console.log("fail");
        }
      });
    };
    $W.Form.fDelete = function(name, url, indexClass, varPost) {
      var params;
      params = varPost;
      params.indexClass = indexClass;
      params.opcionClass = 'fDelete';
      return $W.Ajax({
        url: url,
        params: params,
        success: function(xhrResponse, xhr) {
          var json, txtJson;
          txtJson = _execScript(name, xhrResponse.responseText);
          if (!txtJson) {
            return;
          }
          json = JSON.parse(txtJson);
          if (json.estado === 'true') {
            if (json.type === 'grilla') {
              $W("#grilla_content_fila_" + name + "_" + indexClass).hide();

              /*document.getElementById("grilla_fila_#{name}_#{indexClass}").setAttribute('data-state','fDelete')
              						document.getElementById("grilla_fila_image_#{name}_#{indexClass}").setAttribute('data-icon','fDelete')
              						arrayDivHtml = document.querySelectorAll("#grilla_fila_#{name}_#{indexClass} [data-type=html]")
              						[].forEach.call(arrayDivHtml,(input) ->
              							input.innerHTML = ''
              						)
               */
            }
            return eval(json.fNameWindow + ".close();");
          } else {
            return console.log("false");
          }
        },
        failure: function(xhr) {
          return console.log("fail");
        }
      });
    };
    $W.Grilla.typeSearch = function(input) {
      var type;
      type = input.getAttribute("data-search");
      if (type === "disable") {
        if (!confirm("Desea habilitar la busqueda avanzada?")) {
          return;
        }
        return input.setAttribute("data-search", "enable");
      } else {
        return input.setAttribute("data-search", "disable");
      }
    };
    _createFab = function(name, toolbar, htmlAside, os) {
      var fab;
      if (os === 'android' || os === 'ios') {
        if (toolbar === true && htmlAside !== "") {
          fab = "<div class=\"fab\"> <span class=\"fab-action-button\"> <i class=\"material-icons\">more_vert</i> </span> <ul class=\"fab-buttons\"> <li class=\"fab-buttons__item\"> <a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.buscar('" + name + "')\"> <i class=\"material-icons\">refresh</i> </a> </li> <li class=\"fab-buttons__item\"> <a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.eventAside('" + name + "'); $W.Grilla.eventAsideRecalculateHeightMovil('" + name + "')\"> <i class=\"material-icons\">filter_list</i> </a> </li> <li class=\"fab-buttons__item\"> <a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W('#field_buscar_" + name + "').focus()\"> <i class=\"material-icons\">search</i> </a> </li> </ul> </div>";
        }
        if (toolbar === true && htmlAside === "") {
          fab = "<div class=\"fab\"> <span class=\"fab-action-button\"> <i class=\"material-icons\">more_vert</i> </span> <ul class=\"fab-buttons\"> <li class=\"fab-buttons__item\"> <a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.buscar('" + name + "')\"> <i class=\"material-icons\">refresh</i> </a> </li> <li class=\"fab-buttons__item\"> <a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W('#field_buscar_" + name + "').focus()\"> <i class=\"material-icons\">search</i> </a> </li> </ul> </div>";
        }
        if (toolbar === false && htmlAside !== "") {
          fab = "<div class=\"fab\"> <span class=\"fab-action-button\"> <i class=\"material-icons\">more_vert</i> </span> <ul class=\"fab-buttons\"> <li class=\"fab-buttons__item\"> <a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.buscar('" + name + "')\"> <i class=\"material-icons\">refresh</i> </a> </li> <li class=\"fab-buttons__item\"> <a href=\"#\" class=\"fab-buttons__link\" onclick=\"$W.Grilla.eventAside('" + name + "'); $W.Grilla.eventAsideRecalculateHeightMovil('" + name + "')\"> <i class=\"material-icons\">filter_list</i> </a> </li> </ul> </div>";
        }
        if (toolbar === false && htmlAside === "") {
          fab = "<div class=\"fab\" onclick=\"$W.Grilla.buscar('" + name + "')\"> <span class=\"fab-action-button\"> <i class=\"material-icons\">refresh</i> </span> </div>";
        }
      } else {
        fab = "";
      }
      return fab;
    };
    _createAside = function(name, arrayAside) {
      var count, group, html, key, os, ref1, value, value2;
      os = $W.Device().os.toLowerCase();
      html = "";
      group = "";
      count = 0;
      for (key in arrayAside) {
        if (!hasProp1.call(arrayAside, key)) continue;
        value = arrayAside[key];
        group += "<div class=\"grilla-aside-title\">" + value.title + "</div>";
        ref1 = value.labels;
        for (key in ref1) {
          if (!hasProp1.call(ref1, key)) continue;
          value2 = ref1[key];
          group += "<div id=\"grilla-aside-label-" + name + "-" + count + "\" activo=\"false\" class=\"grilla-aside-label\" groupname=\"" + name + " \" group=\"" + value.idCampo + "\" filtroCampo=\"" + value.idCampo + "\" filtroValor=\"" + value2.valor + "\" onclick=\"$W.Grilla.aplyFilter(this,'" + name + "','" + arrayAside + "')\"> <i class=\"material-icons\">&#xE5CA;</i> <div class=\"grilla-aside-label-text\">" + value2.label + "</div> <div class=\"grilla-aside-label-count\">(" + value2.cantidad + ")</div> </div>";
          count++;
        }
      }
      if (group !== "") {
        if (os === 'android' || os === 'ios') {
          html = "<aside id=\"grilla_aside_" + name + "\" os=\"" + os + "\" data-state=\"close\" style=\"width:0;\"> <div id=\"grilla_aside_head_" + name + "\"class=\"grilla-aside-head\" onclick=\"$W.Grilla.eventAside('" + name + "')\"><i class=\"material-icons\" style=\"top:0\">arrow_back</i>&nbsp;Filtros de busqueda</div> <div id=\"grilla_aside_content_group_" + name + "\" class=\"grilla_aside_content_group\">" + group + "</div> <div id=\"grilla_aside_content_group2_" + name + "\" class=\"grilla_aside_content_group2\" onclick=\"$W.Grilla.eventAside('" + name + "')\">Filtros de busqueda <i class=\"material-icons\">&#xE5CB;</i></div> </aside>";
        } else {
          html = "<aside id=\"grilla_aside_" + name + "\" os=\"" + os + "\" data-state=\"open\" style=\"width:200px;\"> <div id=\"grilla_aside_head_" + name + "\"class=\"grilla-aside-head\" onclick=\"$W.Grilla.eventAside('" + name + "')\"><i class=\"material-icons\" style=\"top:0\">filter_list</i>&nbsp;Filtros de busqueda</div> <div id=\"grilla_aside_content_group_" + name + "\" class=\"grilla_aside_content_group\">" + group + "</div> <div id=\"grilla_aside_content_group2_" + name + "\" class=\"grilla_aside_content_group2\" onclick=\"$W.Grilla.eventAside('" + name + "')\">Filtros de busqueda <i class=\"material-icons\">&#xE5CB;</i></div> </aside>";
        }
      }
      return html;
    };
    _createToolbar = function(name, advancedToolbar) {
      return "<div id=\"grilla_toolbar_" + name + "\" class=\"grilla_toolbar\"> <div> <div class=\"grilla_toolbar_input\"> <input type=\"text\" id=\"field_buscar_" + name + "\" onKeyUp=\"$W.Grilla.inputBuscar(event,\'" + name + "\')\" placeholder=\"Buscar...\"/> </div> <div data-search=\"" + advancedToolbar + "\" title=\"Busquedas avanzada\" id=\"grilla_type_search_" + name + "\" class=\"grilla_type_search\" onclick=\"$W.Grilla.typeSearch(this)\"> <i class=\"material-icons\" style=\"top:0px\">&#xE8FA;</i> </div> <div id=\"grilla_toolbar_reload_" + name + "\" class=\"grilla_toolbar_reload\"> <i class=\"material-icons\" style=\"top:0px\">&#xE863;</i> </div> </div> </div>";
    };
    _createToolbarMovil = function(name, advancedToolbar) {

      /* "<div id=\"grilla_toolbar_#{name}\" class=\"grilla_toolbar_movil\">
      			<div data-search=\"#{advancedToolbar}\" title=\"Busquedas avanzada\" id=\"grilla_type_search_#{name}\" class=\"grilla_type_search_movil\" onclick=\"$W.Grilla.typeSearch(this)\"></div>
      			<input type=\"text\" id=\"field_buscar_#{name}\" onKeyUp=\"$W.Grilla.inputBuscar(event,\'#{name}\')\" placeholder=\"Buscar...\"/>
      		</div>"
       */
      return "<div data-search=\"" + advancedToolbar + "\" title=\"Busquedas avanzada\" id=\"grilla_type_search_" + name + "\" class=\"grilla_type_search_movil\" onclick=\"$W.Grilla.typeSearch(this)\"></div> <input type=\"text\" class=\"InputSearchGrilla\" id=\"field_buscar_" + name + "\" onKeyUp=\"$W.Grilla.inputBuscar(event,\'" + name + "\')\" placeholder=\"Buscar...\"/>";
    };
    _createContent = function(name, opcionClass, pagina, maxPage, style, titleItems, rows, eventUpdate, fNameWindow, fTitle, width, height, minWidth, minHeight, maxWidth, maxHeight, scrollX, scrollY, columNumber) {
      var FunctionOnScroll, GrillaTitles, htmlItems, htmlPage, objTitle, os;
      os = $W.Device().os.toLowerCase();
      objTitle = _createTitle(name, titleItems, columNumber);
      htmlItems = _createRows(name, opcionClass, rows, eventUpdate, fNameWindow, fTitle, width, height, minWidth, minHeight, maxWidth, maxHeight, scrollX, scrollY, columNumber);
      htmlPage = _createPagination(name, pagina, maxPage);
      if (os === 'android' || os === 'ios') {
        GrillaTitles = "";
        FunctionOnScroll = "";
      } else {
        GrillaTitles = "<div id=\"grilla_title_" + name + "\" class=\"grilla_title\" style=\"width:100%;overflow:hidden;\"> <div style=\"width:" + objTitle.width + "px;\">" + objTitle.html + "</div> </div>";
        FunctionOnScroll = "onscroll=\"$W.ConfScroll(this,'" + name + "')\"";
      }
      return "<div id=\"grilla_content_" + name + "\" class=\"grilla_content\" os=\"" + os + "\" " + style + "> " + GrillaTitles + " <div id=\"grilla_body_" + name + "\" class=\"grilla_body\" os=\"" + os + "\" style=\"\" " + FunctionOnScroll + ">" + htmlItems + "</div> <div class=\"grilla_footer\" style=\"min-width:" + objTitle.width + "px;\">" + htmlPage + "</div> </div>";
    };
    _createTitle = function(name, titleItems, columNumber) {
      var dataDown, dataUp, html, htmlOrder, item, key, width;
      width = 75;
      if (columNumber === 'true' || columNumber === true) {
        html = "<div class=\"grilla_title_label\" style=\"width:35px;\">No.</div>";
      } else {
        html = "<div class=\"grilla_title_label\" style=\"width:17px;\"></div>";
      }
      for (key in titleItems) {
        if (!hasProp1.call(titleItems, key)) continue;
        item = titleItems[key];
        htmlOrder = "";
        if (item.order === "true") {
          dataUp = "upOff";
          dataDown = "downOff";
          if (item.state === "upOn") {
            dataUp = "upOn";
          } else if (item.state === "downOn") {
            dataDown = "downOn";
          }
          htmlOrder = "<div class=\"grilla_title_order\"> <div data-order=\"" + dataUp + "\" data-field=\"" + item.field + "\" onclick=\"$W.Grilla.orderUser('" + name + "',this)\"></div> <div data-order=\"" + dataDown + "\" data-field=\"" + item.field + "\" onclick=\"$W.Grilla.orderUser('" + name + "',this)\"></div> </div>";
        }
        width += item.width;
        html += "<div class=\"grilla_title_label\" style=\"width:" + item.width + "px;\"> <div style=\"float:left; width:100%; height:100%;\">" + item.title + "</div> " + htmlOrder + " </div>";
      }
      html += "<div class=\"grilla_title_label\" style=\"width:36px;\"> <div style=\"float:left; width:100%; height:100%;\"></div> </div>";
      return {
        html: html,
        width: width
      };
    };
    $W.Grilla.orderUser = function(name, divOrder) {
      var order;
      order = divOrder.getAttribute("data-order");
      $W(".grilla_title_order [data-order=upOn]").attr("data-order", "upOff");
      $W(".grilla_title_order [data-order=downOn]").attr("data-order", "downOff");
      switch (order) {
        case 'upOff':
          divOrder.setAttribute("data-order", "upOn");
          break;
        case 'downOff':
          divOrder.setAttribute("data-order", "downOn");
          break;
        case 'upOn':
          divOrder.setAttribute("data-order", "upOff");
          break;
        case 'downOn':
          divOrder.setAttribute("data-order", "downOff");
      }
      return $W.Grilla.buscar(name);
    };
    $W.ConfScroll = function(cual, name) {
      return document.getElementById('grilla_title_' + name).scrollLeft = cual.scrollLeft;
    };
    _execScript = function(name, response) {
      var arrayData, divScript, i, l, len1, script, tagScript, tagsScript, txtJson;
      arrayData = response.split('<script>');
      txtJson = arrayData[0];
      if (arrayData.length > 1) {
        arrayData[0] = '';
        script = arrayData.join('<script>');
        divScript = document.getElementById("div_script_form_" + name);
        divScript.innerHTML = script;
        tagsScript = divScript.getElementsByTagName('script');
        for (l = 0, len1 = tagsScript.length; l < len1; l++) {
          i = tagsScript[l];
          tagScript = document.createElement('script');
          tagScript.innerHTML = i.innerHTML;
          i.parentNode.replaceChild(tagScript, i);
        }
      }
      if (!$W.Script.isJSON(txtJson)) {
        console.log(txtJson);
        return false;
      }
      return txtJson;
    };
    _insertUpdateRow = function(name, url, xhrResponse, opcionClass) {
      var body, columNumber, contDiv, eventUpdate, fCloseWindow, fNameWindow, fTitle, height, json, maxHeight, maxWidth, minHeight, minWidth, rows, scrollX, scrollY, txtJson, type, width;
      txtJson = _execScript(name, xhrResponse.responseText);
      if (!txtJson) {
        return;
      }
      json = JSON.parse(txtJson);
      if (json.estado === 'true') {
        type = json.type || '';
        fCloseWindow = json.fCloseWindow || '';
        if (type === 'form') {
          if (fCloseWindow !== '' && fCloseWindow !== false && fCloseWindow !== 'false') {
            eval(json.name + ".close();");
          }
          return;
        }
        rows = json.rows || {};
        fTitle = json.fTitle || '';
        width = json.width || '';
        height = json.height || '';
        minWidth = json.minWidth || '';
        minHeight = json.minHeight || '';
        maxWidth = json.maxWidth || '';
        maxHeight = json.maxHeight || '';
        scrollX = json.scrollX || '';
        scrollY = json.scrollY || '';
        fNameWindow = json.fNameWindow || '';
        eventUpdate = json.eventUpdate || '';
        columNumber = json.columNumber;
        if (opcionClass === 'fInsert' || opcionClass === 'insertRow') {
          body = document.getElementById("grilla_body_" + name);
          if (body.lastChild) {
            contDiv = body.lastChild.getAttribute("data-cont");
            contDiv++;
          }
          body.innerHTML += _createRows(name, opcionClass, rows, eventUpdate, fNameWindow, fTitle, width, height, minWidth, minHeight, maxWidth, maxHeight, scrollX, scrollY, columNumber);
          if (contDiv > 0) {
            document.getElementById(("grilla_fila_cont_" + name + "_") + json.idRow).innerHTML = contDiv;
            document.getElementById(("grilla_content_fila_" + name + "_") + json.idRow).setAttribute("data-cont", contDiv);
          }
        } else if (opcionClass === "fUpdate") {
          contDiv = document.getElementById(("grilla_fila_cont_" + name + "_") + json.idRow).innerHTML;
          document.getElementById(("grilla_content_fila_" + name + "_") + json.idRow).innerHTML = _createRows(name, opcionClass, rows, eventUpdate, fNameWindow, fTitle, width, height, minWidth, minHeight, maxWidth, maxHeight, scrollX, scrollY, columNumber);
          document.getElementById(("grilla_fila_cont_" + name + "_") + json.idRow).innerHTML = contDiv;
        }
        if (fCloseWindow && (opcionClass === 'fInsert' || opcionClass === 'fUpdate')) {
          return eval(fNameWindow + ".close();");
        }
      } else if (json.estado === 'false' && json.msj) {
        return $W.Alert(json.msj);
      } else {
        return console.log(json.msj);
      }
    };
    _createRows = function(name, opcionClass, rows, eventUpdate, fNameWindow, fTitle, width, height, minWidth, minHeight, maxWidth, maxHeight, scrollX, scrollY, columNumber) {
      var Width, columNumberAttr, contRow, eventCtxMenu, eventDbclick, html, htmlCol, htmlCols, index, numeracion, os, row, rowHtml, url;
      url = GRILLA[name]["url"];

      /*pullToRefresh    = " <div id=\"MarkupPullToRefresh\" class=\"xpull\">
      					            <div class=\"xpull__start-msg\">
      					                <div class=\"xpull__start-msg-text\">Suelte para refrescar</div>
      					                <div class=\"xpull__arrow\"><i class=\"material-icons\">arrow_downward</i></div>
      					            </div>
      					            <div class=\"xpull__spinner\">
      					                <div class=\"xpull__spinner-circle\"></div>
      					            </div>
      					        </div>"
       */
      html = "";
      contRow = 0;
      os = $W.Device().os.toLowerCase();
      if (os === 'android' || os === 'ios') {
        for (index in rows) {
          if (!hasProp1.call(rows, index)) continue;
          row = rows[index];
          contRow++;
          htmlCols = _createColMovil(name, row.idRow, row.cols);
          htmlCol = htmlCols[0];
          eventDbclick = "";
          if (eventUpdate === true) {
            eventDbclick = "$W.Grilla.fOpen('" + name + "', '" + row.idRow + "', '" + fNameWindow + "', '" + fTitle + "', '" + width + "', '" + height + "', '" + minWidth + "', '" + minHeight + "', '" + maxWidth + "', '" + maxHeight + "', '" + scrollX + "', '" + scrollY + "')";
          } else if (eventUpdate === '') {
            eventDbclick = '';
          } else {
            eventDbclick = eventUpdate + "('" + row.idRow + "', this, this.id)";
          }
          rowHtml = "<div id=\"grilla_fila_" + name + "_" + row.idRow + "\" os=\"" + os + "\" class=\"grilla_fila\" onclick=\"" + eventDbclick + "\" " + eventCtxMenu + " data-state=\"" + opcionClass + "\" data-index=\"" + row.idRow + "\"> <div id=\"MuestraToltip_" + name + "_" + row.idRow + "\" class=\"grilla_col_first\" style=\"width:13px\"> <div id=\"grilla_fila_image_" + name + "_" + row.idRow + "\" class=\"grilla_fila_image\" data-icon=\"" + opcionClass + "\"></div> </div> <div style=\"width:calc(100% - 20px); height:auto\"> " + htmlCol + " </div> </div>";
          if (opcionClass !== 'fUpdate' && opcionClass !== 'updateRow') {
            html += "<div id=\"grilla_content_fila_" + name + "_" + row.idRow + "\" os=\"" + os + "\" class=\"grilla_content_fila\" data-index=\"" + row.idRow + "\" data-cont=\"" + contRow + "\" style=\"float:left; width:100%; \">" + rowHtml + "</div>";
          } else {
            html += rowHtml;
          }
        }
      } else {
        for (index in rows) {
          if (!hasProp1.call(rows, index)) continue;
          row = rows[index];
          contRow++;
          htmlCols = _createCol(name, row.idRow, row.cols);
          htmlCol = htmlCols[0];
          Width = htmlCols[1] + 36;
          eventDbclick = "";
          if (eventUpdate === true) {
            eventDbclick = "$W.Grilla.fOpen('" + name + "', '" + row.idRow + "', '" + fNameWindow + "', '" + fTitle + "', '" + width + "', '" + height + "', '" + minWidth + "', '" + minHeight + "', '" + maxWidth + "', '" + maxHeight + "', '" + scrollX + "', '" + scrollY + "')";
          } else if (eventUpdate === '') {
            eventDbclick = '';
          } else {
            eventDbclick = eventUpdate + "('" + row.idRow + "', this, this.id)";
          }
          if (columNumber === 'true' || columNumber === true) {
            numeracion = "<div id=\"grilla_fila_cont_" + name + "_" + row.idRow + "\" class=\"grilla_fila_cont\">" + contRow + "</div>";
            columNumberAttr = '35';
          } else {
            numeracion = "<div id=\"grilla_fila_cont_" + name + "_" + row.idRow + "\" class=\"grilla_fila_cont\" style=\"width:0px;color:#FFF;\">" + contRow + "</div>";
            columNumberAttr = '17';
          }
          eventCtxMenu = row.ctxmenu !== '[]' ? "oncontextmenu='$W.CtxMenuDom({objApply:this, items:" + row.ctxmenu + "},event); return false;'" : "";
          rowHtml = "<div id=\"grilla_fila_" + name + "_" + row.idRow + "\" os=\"" + os + "\" class=\"grilla_fila\" ondblclick=\"" + eventDbclick + "\" " + eventCtxMenu + " data-state=\"" + opcionClass + "\" data-index=\"" + row.idRow + "\"> <div id=\"MuestraToltip_" + name + "_" + row.idRow + "\" class=\"grilla_col_first\" style=\"width:" + columNumberAttr + "px\"> <div id=\"grilla_fila_image_" + name + "_" + row.idRow + "\" class=\"grilla_fila_image\" data-icon=\"" + opcionClass + "\"></div> " + numeracion + " </div> " + htmlCol + " </div>";
          if (opcionClass !== 'fUpdate' && opcionClass !== 'updateRow') {
            html += "<div id=\"grilla_content_fila_" + name + "_" + row.idRow + "\" os=\"" + os + "\" class=\"grilla_content_fila\" data-index=\"" + row.idRow + "\" data-cont=\"" + contRow + "\" style=\"float:left; width:100%; min-width:" + Width + "px;\">" + rowHtml + "</div>";
          } else {
            html += rowHtml;
          }
        }
      }
      return html;
    };
    _createCol = function(name, idRow, cols) {
      var html, idCol, obj, width;
      html = "";
      width = 0;
      for (idCol in cols) {
        if (!hasProp1.call(cols, idCol)) continue;
        obj = cols[idCol];
        if (obj.movil === false || obj.movil === "false") {
          html += "<div id=\"div_" + name + "_" + idCol + "_" + idRow + "\" class=\"grilla_celdas\" style=\"width:" + obj.width + "px; " + obj.style + "\" data-type=\"" + obj.type + "\">" + obj.html + "</div>";
          width = width + obj.width;
        }
      }
      return [html, width];
    };
    _createColMovil = function(name, idRow, cols) {
      var html, idCol, obj, width;
      html = "";
      for (idCol in cols) {
        if (!hasProp1.call(cols, idCol)) continue;
        obj = cols[idCol];
        width = obj.width;
        if (!isNaN(width)) {
          width = width + 'px';
        }
        if (obj.movil === true || obj.movil === "true") {
          html += "<div id=\"div_" + name + "_" + idCol + "_" + idRow + "\" class=\"grilla_celdas\" style=\"width:" + width + "; float:left; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; " + obj.style + "\" data-type=\"" + obj.type + "\">" + obj.html + "</div>";
        }
      }
      return [html, 0];
    };
    _createTbar = function(name, idApply, fNameWindow, width, height, minWidth, minHeight, maxWidth, maxHeight, scrollX, scrollY, fTitle, textBtnNuevo, fPermisoInsert, eventInsert) {
      var url;
      url = GRILLA[name]["url"];
      document.getElementById(idApply).innerHTML += "<div id=\"grilla_tbar_" + name + "\"></div>";
      if (fPermisoInsert === true || fPermisoInsert === "true") {
        return $W.Tbar({
          idApply: "grilla_tbar_" + name,
          items: [
            {
              xtype: "button",
              id: "btn_" + name + "_new",
              cls: "&#xE145;",
              text: textBtnNuevo,
              handler: function() {
                if (eventInsert === true) {
                  return $W.Grilla.fOpen(name, "", fNameWindow, fTitle, width, height, minWidth, minHeight, maxWidth, maxHeight, scrollX, scrollY);
                } else if (eventInsert !== "") {
                  return eval(eventInsert + "()");
                }
              }
            }
          ]
        });
      }
    };
    return _createPagination = function(name, page, maxPage) {
      var html;
      html = "";
      if (maxPage > 1) {
        html = "<div id=\"grilla_content_page_" + name + "\" class=\"grilla_content_page\"> <div>Pagina " + page + " de " + maxPage + "</div> <div data-type=\"first\" class=\"grilla_page\"></div> <div data-type=\"prev\" class=\"grilla_page\"></div> <div data-type=\"next\" class=\"grilla_page\"></div> <div data-type=\"last\" class=\"grilla_page\"></div> </div>";
      }
      return html;
    };
  })(Win);

  'use strict';

  (function($W) {

    /**
     * feature detection and helper functions
     */
    var addClass, addEvent, adjustCalendar, compareDates, defaults, document, extend, fireEvent, getDaysInMonth, hasClass, hasEventListeners, isArray, isDate, isLeapYear, isWeekend, removeClass, removeEvent, renderBody, renderDay, renderDayName, renderHead, renderRow, renderTable, renderTitle, renderWeek, setToStartOfDay, sto, trim;
    hasEventListeners = !!window.addEventListener;
    document = window.document;
    sto = window.setTimeout;
    addEvent = function(el, e, callback, capture) {
      if (hasEventListeners) {
        el.addEventListener(e, callback, !!capture);
      } else {
        el.attachEvent('on' + e, callback);
      }
    };
    removeEvent = function(el, e, callback, capture) {
      if (hasEventListeners) {
        el.removeEventListener(e, callback, !!capture);
      } else {
        el.detachEvent('on' + e, callback);
      }
    };
    fireEvent = function(el, eventName, data) {
      var ev;
      ev = void 0;
      if (document.createEvent) {
        ev = document.createEvent('HTMLEvents');
        ev.initEvent(eventName, true, false);
        ev = extend(ev, data);
        el.dispatchEvent(ev);
      } else if (document.createEventObject) {
        ev = document.createEventObject();
        ev = extend(ev, data);
        el.fireEvent('on' + eventName, ev);
      }
    };
    trim = function(str) {
      if (str.trim) {
        return str.trim();
      } else {
        return str.replace(/^\s+|\s+$/g, '');
      }
    };
    hasClass = function(el, cn) {
      return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
    };
    addClass = function(el, cn) {
      if (!hasClass(el, cn)) {
        el.className = el.className === '' ? cn : el.className + ' ' + cn;
      }
    };
    removeClass = function(el, cn) {
      el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
    };
    isArray = function(obj) {
      return /Array/.test(Object.prototype.toString.call(obj));
    };
    isDate = function(obj) {
      return /Date/.test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
    };
    isWeekend = function(date) {
      var day;
      day = date.getDay();
      return day === 0 || day === 6;
    };
    isLeapYear = function(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    };
    getDaysInMonth = function(year, month) {
      return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    };
    setToStartOfDay = function(date) {
      if (isDate(date)) {
        date.setHours(0, 0, 0, 0);
      }
    };
    compareDates = function(a, b) {
      return a.getTime() === b.getTime();
    };
    extend = function(to, from, overwrite) {
      var hasProp, prop;
      prop = void 0;
      hasProp = void 0;
      for (prop in from) {
        prop = prop;
        hasProp = to[prop] !== void 0;
        if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === void 0) {
          if (isDate(from[prop])) {
            if (overwrite) {
              to[prop] = new Date(from[prop].getTime());
            }
          } else if (isArray(from[prop])) {
            if (overwrite) {
              to[prop] = from[prop].slice(0);
            }
          } else {
            to[prop] = extend({}, from[prop], overwrite);
          }
        } else if (overwrite || !hasProp) {
          to[prop] = from[prop];
        }
      }
      return to;
    };
    adjustCalendar = function(calendar) {
      if (calendar.month < 0) {
        calendar.year -= Math.ceil(Math.abs(calendar.month) / 12);
        calendar.month += 12;
      }
      if (calendar.month > 11) {
        calendar.year += Math.floor(Math.abs(calendar.month) / 12);
        calendar.month -= 12;
      }
      return calendar;
    };
    defaults = {
      idApply: null,
      field: null,
      bound: void 0,
      position: 'bottom left',
      reposition: true,
      format: 'YYYY-MM-DD',
      defaultDate: null,
      setDefaultDate: false,
      firstDay: 1,
      formatStrict: false,
      minDate: null,
      maxDate: null,
      yearRange: 30,
      showWeekNumber: false,
      minYear: 0,
      maxYear: 9999,
      minMonth: void 0,
      maxMonth: void 0,
      startRange: null,
      endRange: null,
      isRTL: false,
      yearSuffix: '',
      showMonthAfterYear: false,
      showDaysInNextAndPreviousMonths: false,
      numberOfMonths: 1,
      mainCalendar: 'left',
      container: void 0,
      i18n: {
        previousMonth: 'Previous Month',
        nextMonth: 'Next Month',
        months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
        weekdays: ['Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado'],
        weekdaysShort: ['Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab']
      },
      theme: null,
      onSelect: null,
      onOpen: null,
      onClose: null,
      onDraw: null
    };
    renderDayName = function(opts, day, abbr) {
      day += opts.firstDay;
      while (day >= 7) {
        day -= 7;
      }
      if (abbr) {
        return opts.i18n.weekdaysShort[day];
      } else {
        return opts.i18n.weekdays[day];
      }
    };
    renderDay = function(opts) {
      var ariaSelected, arr;
      arr = [];
      ariaSelected = 'false';
      if (opts.isEmpty) {
        if (opts.showDaysInNextAndPreviousMonths) {
          arr.push('is-outside-current-month');
        } else {
          return '<td class="is-empty"></td>';
        }
      }
      if (opts.isDisabled) {
        arr.push('is-disabled');
      }
      if (opts.isToday) {
        arr.push('is-today');
      }
      if (opts.isSelected) {
        arr.push('is-selected');
        ariaSelected = 'true';
      }
      if (opts.isInRange) {
        arr.push('is-inrange');
      }
      if (opts.isStartRange) {
        arr.push('is-startrange');
      }
      if (opts.isEndRange) {
        arr.push('is-endrange');
      }
      return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' + '<button class="pika-button pika-day" type="button" ' + 'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' + opts.day + '</button>' + '</td>';
    };
    renderWeek = function(d, m, y) {
      var onejan, weekNum;
      onejan = new Date(y, 0, 1);
      weekNum = Math.ceil(((new Date(y, m, d) - onejan) / 86400000 + onejan.getDay() + 1) / 7);
      return '<td class="pika-week">' + weekNum + '</td>';
    };
    renderRow = function(days, isRTL) {
      return '<tr>' + (isRTL ? days.reverse() : days).join('') + '</tr>';
    };
    renderBody = function(rows) {
      return '<tbody>' + rows.join('') + '</tbody>';
    };
    renderHead = function(opts) {
      var arr, i;
      i = void 0;
      arr = [];
      if (opts.showWeekNumber) {
        arr.push('<th></th>');
      }
      i = 0;
      while (i < 7) {
        arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
        i++;
      }
      return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
    };
    renderTitle = function(instance, c, year, month, refYear, randId) {
      var arr, html, i, isMaxYear, isMinYear, j, monthHtml, next, opts, prev, yearHtml;
      i = void 0;
      j = void 0;
      arr = void 0;
      opts = instance._o;
      isMinYear = year === opts.minYear;
      isMaxYear = year === opts.maxYear;
      html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">';
      monthHtml = void 0;
      yearHtml = void 0;
      prev = true;
      next = true;
      arr = [];
      i = 0;
      while (i < 12) {
        arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' + (i === month ? ' selected="selected"' : '') + (isMinYear && i < opts.minMonth || isMaxYear && i > opts.maxMonth ? 'disabled="disabled"' : '') + '>' + opts.i18n.months[i] + '</option>');
        i++;
      }
      monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';
      if (isArray(opts.yearRange)) {
        i = opts.yearRange[0];
        j = opts.yearRange[1] + 1;
      } else {
        i = year - opts.yearRange;
        j = 1 + year + opts.yearRange;
      }
      arr = [];
      while (i < j && i <= opts.maxYear) {
        if (i >= opts.minYear) {
          arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"' : '') + '>' + i + '</option>');
        }
        i++;
      }
      yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';
      if (opts.showMonthAfterYear) {
        html += yearHtml + monthHtml;
      } else {
        html += monthHtml + yearHtml;
      }
      if (isMinYear && (month === 0 || opts.minMonth >= month)) {
        prev = false;
      }
      if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
        next = false;
      }
      if (c === 0) {
        html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
      }
      if (c === instance._o.numberOfMonths - 1) {
        html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
      }
      return html += '</div>';
    };
    renderTable = function(opts, data, randId) {
      return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
    };
    $W.DatePicker = function(options) {
      var defDate, opts, self;
      self = this;
      opts = self.config(options);
      opts.field = document.getElementById(opts.idApply);
      self._onMouseDown = function(e) {
        var target;
        if (!self._v) {
          return;
        }
        e = e || window.event;
        target = e.target || e.srcElement;
        if (!target) {
          return;
        }
        if (!hasClass(target, 'is-disabled')) {
          if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
            self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
            if (opts.bound) {
              sto((function() {
                self.hide();
                if (opts.field) {
                  opts.field.blur();
                }
              }), 100);
            }
          } else if (hasClass(target, 'pika-prev')) {
            self.prevMonth();
          } else if (hasClass(target, 'pika-next')) {
            self.nextMonth();
          }
        }
        if (!hasClass(target, 'pika-select')) {
          if (e.preventDefault) {
            e.preventDefault();
          } else {
            e.returnValue = false;
            return false;
          }
        } else {
          self._c = true;
        }
      };
      self._onChange = function(e) {
        var target;
        e = e || window.event;
        target = e.target || e.srcElement;
        if (!target) {
          return;
        }
        if (hasClass(target, 'pika-select-month')) {
          self.gotoMonth(target.value);
        } else if (hasClass(target, 'pika-select-year')) {
          self.gotoYear(target.value);
        }
      };
      self._onKeyChange = function(e) {
        e = e || window.event;
        if (self.isVisible()) {
          switch (e.keyCode) {
            case 13:
            case 27:
              opts.field.blur();
              break;
            case 37:
              e.preventDefault();
              self.adjustDate('subtract', 1);
              break;
            case 38:
              self.adjustDate('subtract', 7);
              break;
            case 39:
              self.adjustDate('add', 1);
              break;
            case 40:
              self.adjustDate('add', 7);
          }
        }
      };
      self._onInputChange = function(e) {
        var date;
        date = void 0;
        if (e.firedBy === self) {
          return;
        }
        date = new Date(Date.parse(opts.field.value));
        if (isDate(date)) {
          self.setDate(date);
        }
        if (!self._v) {
          self.show();
          $W(opts.field).attr("readonly", "readonly");
        }
      };
      self._onInputFocus = function() {
        self.show();
        $W(opts.field).attr("readonly", "readonly");
      };
      self._onInputClick = function() {
        self.show();
        $W(opts.field).attr("readonly", "readonly");
      };
      self._onInputBlur = function() {
        var pEl;
        pEl = document.activeElement;
        while (true) {
          if (hasClass(pEl, 'pika-single')) {
            return;
          }
          if (!(pEl = pEl.parentNode)) {
            break;
          }
        }
        if (!self._c) {
          self._b = sto((function() {
            self.hide();
          }), 50);
        }
        self._c = false;
      };
      self._onClick = function(e) {
        var pEl, target;
        e = e || window.event;
        target = e.target || e.srcElement;
        pEl = target;
        if (!target) {
          return;
        }
        if (!hasEventListeners && hasClass(target, 'pika-select')) {
          if (!target.onchange) {
            target.setAttribute('onchange', 'return;');
            addEvent(target, 'change', self._onChange);
          }
        }
        while (true) {
          if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
            return;
          }
          if (!(pEl = pEl.parentNode)) {
            break;
          }
        }
        if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
          self.hide();
        }
      };
      self.el = document.createElement('div');
      self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');
      addEvent(self.el, 'mousedown', self._onMouseDown, true);
      addEvent(self.el, 'touchend', self._onMouseDown, true);
      addEvent(self.el, 'change', self._onChange);
      addEvent(document, 'keydown', self._onKeyChange);
      if (opts.field) {
        if (opts.container) {
          opts.container.appendChild(self.el);
        } else if (opts.bound) {
          document.body.appendChild(self.el);
        } else {
          opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
        }
        addEvent(opts.field, 'change', self._onInputChange);
        if (!opts.defaultDate) {
          opts.defaultDate = new Date(Date.parse(opts.field.value) + 86400000);
          opts.setDefaultDate = true;
        }
      }
      defDate = opts.defaultDate;
      if (isDate(defDate)) {
        if (opts.setDefaultDate) {
          self.setDate(defDate, true);
        } else {
          self.gotoDate(defDate);
        }
      } else {
        self.gotoDate(new Date);
      }
      if (opts.bound) {
        this.hide();
        self.el.className += ' is-bound';
        addEvent(opts.trigger, 'click', self._onInputClick);
        addEvent(opts.trigger, 'focus', self._onInputFocus);
        addEvent(opts.trigger, 'blur', self._onInputBlur);
      } else {
        this.show();
      }
    };

    /**
     * public Pikaday API
     */
    return $W.DatePicker.prototype = {
      config: function(options) {
        var fallback, nom, opts;
        if (!this._o) {
          this._o = extend({}, defaults, true);
        }
        opts = extend(this._o, options, true);
        opts.field = document.getElementById(opts.idApply);
        opts.isRTL = !!opts.isRTL;
        opts.field = opts.field && opts.field.nodeName ? opts.field : null;
        opts.theme = typeof opts.theme === 'string' && opts.theme ? opts.theme : null;
        opts.bound = !!(opts.bound !== void 0 ? opts.field && opts.bound : opts.field);
        opts.trigger = opts.trigger && opts.trigger.nodeName ? opts.trigger : opts.field;
        opts.disableWeekends = !!opts.disableWeekends;
        opts.disableDayFn = typeof opts.disableDayFn === 'function' ? opts.disableDayFn : null;
        nom = parseInt(opts.numberOfMonths, 10) || 1;
        opts.numberOfMonths = nom > 4 ? 4 : nom;
        if (!isDate(opts.minDate)) {
          opts.minDate = false;
        }
        if (!isDate(opts.maxDate)) {
          opts.maxDate = false;
        }
        if (opts.minDate && opts.maxDate && opts.maxDate < opts.minDate) {
          opts.maxDate = opts.minDate = false;
        }
        if (opts.minDate) {
          this.setMinDate(opts.minDate);
        }
        if (opts.maxDate) {
          this.setMaxDate(opts.maxDate);
        }
        if (isArray(opts.yearRange)) {
          fallback = (new Date).getFullYear() - 10;
          opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
          opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
        } else {
          opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
          if (opts.yearRange > 100) {
            opts.yearRange = 100;
          }
        }
        return opts;
      },
      toString: function(format) {
        var date, dia, mes;
        if (!isDate(this._d)) {
          return '';
        } else {
          date = new Date(this._d);
          mes = parseInt(date.getMonth()) + 1;
          dia = parseInt(date.getDate());
          if (mes < 10) {
            mes = String(mes);
            mes = 0 + mes;
          }
          if (dia < 10) {
            dia = String(dia);
            dia = 0 + dia;
          }
          return this._d = date.getFullYear() + '-' + mes + '-' + dia;
        }
      },
      getDate: function() {
        if (isDate(this._d)) {
          return new Date(this._d.getTime());
        } else {
          return new Date;
        }
      },
      setDate: function(date, preventOnSelect) {
        var max, min;
        if (!date) {
          this._d = null;
          if (this._o.field) {
            this._o.field.value = '';
            fireEvent(this._o.field, 'change', {
              firedBy: this
            });
          }
          return this.draw();
        }
        if (typeof date === 'string') {
          date = new Date(Date.parse(date));
        }
        if (!isDate(date)) {
          return;
        }
        min = this._o.minDate;
        max = this._o.maxDate;
        if (isDate(min) && date < min) {
          date = min;
        } else if (isDate(max) && date > max) {
          date = max;
        }
        this._d = new Date(date.getTime());
        setToStartOfDay(this._d);
        this.gotoDate(this._d);
        if (this._o.field) {
          this._o.field.value = this.toString();
          fireEvent(this._o.field, 'change', {
            firedBy: this
          });
        }
        if (!preventOnSelect && typeof this._o.onSelect === 'function') {
          this._o.onSelect.call(this, this.getDate());
        }
      },
      gotoDate: function(date) {
        var firstVisibleDate, lastVisibleDate, newCalendar, visibleDate;
        newCalendar = true;
        if (!isDate(date)) {
          return;
        }
        if (this.calendars) {
          firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1);
          lastVisibleDate = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1);
          visibleDate = date.getTime();
          lastVisibleDate.setMonth(lastVisibleDate.getMonth() + 1);
          lastVisibleDate.setDate(lastVisibleDate.getDate() - 1);
          newCalendar = visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate;
        }
        if (newCalendar) {
          this.calendars = [
            {
              month: date.getMonth(),
              year: date.getFullYear()
            }
          ];
          if (this._o.mainCalendar === 'right') {
            this.calendars[0].month += 1 - this._o.numberOfMonths;
          }
        }
        this.adjustCalendars();
      },
      adjustDate: function(sign, days) {
        var day, difference, newDay;
        day = this.getDate();
        difference = parseInt(days) * 24 * 60 * 60 * 1000;
        newDay = void 0;
        if (sign === 'add') {
          newDay = new Date(day.valueOf() + difference);
        } else if (sign === 'subtract') {
          newDay = new Date(day.valueOf() - difference);
        }
        this.setDate(newDay);
      },
      adjustCalendars: function() {
        var c;
        this.calendars[0] = adjustCalendar(this.calendars[0]);
        c = 1;
        while (c < this._o.numberOfMonths) {
          this.calendars[c] = adjustCalendar({
            month: this.calendars[0].month + c,
            year: this.calendars[0].year
          });
          c++;
        }
        this.draw();
      },
      gotoToday: function() {
        this.gotoDate(new Date);
      },
      gotoMonth: function(month) {
        if (!isNaN(month)) {
          this.calendars[0].month = parseInt(month, 10);
          this.adjustCalendars();
        }
      },
      nextMonth: function() {
        this.calendars[0].month++;
        this.adjustCalendars();
      },
      prevMonth: function() {
        this.calendars[0].month--;
        this.adjustCalendars();
      },
      gotoYear: function(year) {
        if (!isNaN(year)) {
          this.calendars[0].year = parseInt(year, 10);
          this.adjustCalendars();
        }
      },
      setMinDate: function(value) {
        if (value instanceof Date) {
          setToStartOfDay(value);
          this._o.minDate = value;
          this._o.minYear = value.getFullYear();
          this._o.minMonth = value.getMonth();
        } else {
          this._o.minDate = defaults.minDate;
          this._o.minYear = defaults.minYear;
          this._o.minMonth = defaults.minMonth;
          this._o.startRange = defaults.startRange;
        }
        this.draw();
      },
      setMaxDate: function(value) {
        if (value instanceof Date) {
          setToStartOfDay(value);
          this._o.maxDate = value;
          this._o.maxYear = value.getFullYear();
          this._o.maxMonth = value.getMonth();
        } else {
          this._o.maxDate = defaults.maxDate;
          this._o.maxYear = defaults.maxYear;
          this._o.maxMonth = defaults.maxMonth;
          this._o.endRange = defaults.endRange;
        }
        this.draw();
      },
      setStartRange: function(value) {
        this._o.startRange = value;
      },
      setEndRange: function(value) {
        this._o.endRange = value;
      },
      draw: function(force) {
        var c, html, maxMonth, maxYear, minMonth, minYear, opts, randId;
        if (!this._v && !force) {
          return;
        }
        opts = this._o;
        minYear = opts.minYear;
        maxYear = opts.maxYear;
        minMonth = opts.minMonth;
        maxMonth = opts.maxMonth;
        html = '';
        randId = void 0;
        if (this._y <= minYear) {
          this._y = minYear;
          if (!isNaN(minMonth) && this._m < minMonth) {
            this._m = minMonth;
          }
        }
        if (this._y >= maxYear) {
          this._y = maxYear;
          if (!isNaN(maxMonth) && this._m > maxMonth) {
            this._m = maxMonth;
          }
        }
        randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);
        c = 0;
        while (c < opts.numberOfMonths) {
          html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
          c++;
        }
        this.el.innerHTML = html;
        if (opts.bound) {
          if (opts.field.type !== 'hidden') {
            sto((function() {
              opts.trigger.focus();
            }), 1);
          }
        }
        if (typeof this._o.onDraw === 'function') {
          this._o.onDraw(this);
        }
        this._o.field.setAttribute('aria-label', 'Use the arrow keys to pick a date');
      },
      adjustPosition: function() {
        var clientRect, field, height, left, pEl, scrollTop, top, viewportHeight, viewportWidth, width;
        field = void 0;
        pEl = void 0;
        width = void 0;
        height = void 0;
        viewportWidth = void 0;
        viewportHeight = void 0;
        scrollTop = void 0;
        left = void 0;
        top = void 0;
        clientRect = void 0;
        if (this._o.container) {
          return;
        }
        this.el.style.position = 'absolute';
        field = this._o.trigger;
        pEl = field;
        width = this.el.offsetWidth;
        height = this.el.offsetHeight;
        viewportWidth = window.innerWidth || document.documentElement.clientWidth;
        viewportHeight = window.innerHeight || document.documentElement.clientHeight;
        scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
        if (typeof field.getBoundingClientRect === 'function') {
          clientRect = field.getBoundingClientRect();
          left = clientRect.left + window.pageXOffset;
          top = clientRect.bottom + window.pageYOffset;
        } else {
          left = pEl.offsetLeft;
          top = pEl.offsetTop + pEl.offsetHeight;
          while (pEl = pEl.offsetParent) {
            left += pEl.offsetLeft;
            top += pEl.offsetTop;
          }
        }
        if (this._o.reposition && left + width > viewportWidth || this._o.position.indexOf('right') > -1 && left - width + field.offsetWidth > 0) {
          left = left - width + field.offsetWidth;
        }
        if (this._o.reposition && top + height > viewportHeight + scrollTop || this._o.position.indexOf('top') > -1 && top - height - field.offsetHeight > 0) {
          top = top - height - field.offsetHeight;
        }
        this.el.style.left = left + 'px';
        this.el.style.top = top + 'px';
      },
      render: function(year, month, randId) {
        var after, before, cells, data, day, dayConfig, dayNumber, days, daysInPreviousMonth, i, isDisabled, isEmpty, isEndRange, isInRange, isSelected, isStartRange, isToday, monthNumber, nextMonth, now, opts, previousMonth, r, row, yearNumber, yearOfNextMonth, yearOfPreviousMonth;
        opts = this._o;
        now = new Date;
        days = getDaysInMonth(year, month);
        before = new Date(year, month, 1).getDay();
        data = [];
        row = [];
        setToStartOfDay(now);
        if (opts.firstDay > 0) {
          before -= opts.firstDay;
          if (before < 0) {
            before += 7;
          }
        }
        previousMonth = month === 0 ? 11 : month - 1;
        nextMonth = month === 11 ? 0 : month + 1;
        yearOfPreviousMonth = month === 0 ? year - 1 : year;
        yearOfNextMonth = month === 11 ? year + 1 : year;
        daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
        cells = days + before;
        after = cells;
        while (after > 7) {
          after -= 7;
        }
        cells += 7 - after;
        i = 0;
        r = 0;
        while (i < cells) {
          day = new Date(year, month, 1 + i - before);
          isSelected = isDate(this._d) ? compareDates(day, this._d) : false;
          isToday = compareDates(day, now);
          isEmpty = i < before || i >= days + before;
          dayNumber = 1 + i - before;
          monthNumber = month;
          yearNumber = year;
          isStartRange = opts.startRange && compareDates(opts.startRange, day);
          isEndRange = opts.endRange && compareDates(opts.endRange, day);
          isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange;
          isDisabled = opts.minDate && day < opts.minDate || opts.maxDate && day > opts.maxDate || opts.disableWeekends && isWeekend(day) || opts.disableDayFn && opts.disableDayFn(day);
          if (isEmpty) {
            if (i < before) {
              dayNumber = daysInPreviousMonth + dayNumber;
              monthNumber = previousMonth;
              yearNumber = yearOfPreviousMonth;
            } else {
              dayNumber = dayNumber - days;
              monthNumber = nextMonth;
              yearNumber = yearOfNextMonth;
            }
          }
          dayConfig = {
            day: dayNumber,
            month: monthNumber,
            year: yearNumber,
            isSelected: isSelected,
            isToday: isToday,
            isDisabled: isDisabled,
            isEmpty: isEmpty,
            isStartRange: isStartRange,
            isEndRange: isEndRange,
            isInRange: isInRange,
            showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths
          };
          row.push(renderDay(dayConfig));
          if (++r === 7) {
            if (opts.showWeekNumber) {
              row.unshift(renderWeek(i - before, month, year));
            }
            data.push(renderRow(row, opts.isRTL));
            row = [];
            r = 0;
          }
          i++;
        }
        return renderTable(opts, data, randId);
      },
      isVisible: function() {
        return this._v;
      },
      show: function() {
        if (!this.isVisible()) {
          removeClass(this.el, 'is-hidden');
          this._v = true;
          this.draw();
          if (this._o.bound) {
            addEvent(document, 'click', this._onClick);
            this.adjustPosition();
          }
          if (typeof this._o.onOpen === 'function') {
            this._o.onOpen.call(this);
          }
        }
      },
      hide: function() {
        var v;
        v = this._v;
        if (v !== false) {
          if (this._o.bound) {
            removeEvent(document, 'click', this._onClick);
          }
          this.el.style.position = 'static';
          this.el.style.left = 'auto';
          this.el.style.top = 'auto';
          addClass(this.el, 'is-hidden');
          this._v = false;
          if (v !== void 0 && typeof this._o.onClose === 'function') {
            this._o.onClose.call(this);
          }
        }
      },
      destroy: function() {
        this.hide();
        removeEvent(this.el, 'mousedown', this._onMouseDown, true);
        removeEvent(this.el, 'touchend', this._onMouseDown, true);
        removeEvent(this.el, 'change', this._onChange);
        if (this._o.field) {
          removeEvent(this._o.field, 'change', this._onInputChange);
          if (this._o.bound) {
            removeEvent(this._o.trigger, 'click', this._onInputClick);
            removeEvent(this._o.trigger, 'focus', this._onInputFocus);
            removeEvent(this._o.trigger, 'blur', this._onInputBlur);
          }
        }
        if (this.el.parentNode) {
          this.el.parentNode.removeChild(this.el);
        }
      }
    };
  })(Win);

  (function() {
    var $, $body, $doc, $win, ClockPicker, createSvgElement, dialRadius, diameter, duration, idCounter, innerRadius, leadingZero, mousedownEvent, mousemoveEvent, mouseupEvent, outerRadius, raiseCallback, svgNS, svgSupported, tickRadius, touchSupported, tpl, transitionSupported, uniqueId, vibrate;
    $ = window.jQuery;
    $win = $(window);
    $doc = $(document);
    $body = void 0;
    svgNS = 'http://www.w3.org/2000/svg';
    svgSupported = 'SVGAngle' in window && (function() {
      var el, supported;
      supported = void 0;
      el = document.createElement('div');
      el.innerHTML = '<svg/>';
      supported = (el.firstChild && el.firstChild.namespaceURI) == svgNS;
      el.innerHTML = '';
      return supported;
    })();
    transitionSupported = (function() {
      var style;
      style = document.createElement('div').style;
      return 'transition' in style || 'WebkitTransition' in style || 'MozTransition' in style || 'msTransition' in style || 'OTransition' in style;
    })();
    touchSupported = 'ontouchstart' in window;
    mousedownEvent = 'mousedown' + (touchSupported ? ' touchstart' : '');
    mousemoveEvent = 'mousemove.clockpicker' + (touchSupported ? ' touchmove.clockpicker' : '');
    mouseupEvent = 'mouseup.clockpicker' + (touchSupported ? ' touchend.clockpicker' : '');
    vibrate = navigator.vibrate ? 'vibrate' : navigator.webkitVibrate ? 'webkitVibrate' : null;
    idCounter = 0;
    dialRadius = 100;
    outerRadius = 80;
    innerRadius = 54;
    tickRadius = 13;
    diameter = dialRadius * 2;
    duration = transitionSupported ? 350 : 1;
    tpl = ['<div class="popover clockpicker-popover">', '<div class="arrow"></div>', '<div class="popover-title">', '<span class="clockpicker-span-hours text-primary"></span>', ' : ', '<span class="clockpicker-span-minutes"></span>', '<span class="clockpicker-span-am-pm"></span>', '</div>', '<div class="popover-content">', '<div class="clockpicker-plate">', '<div class="clockpicker-canvas"></div>', '<div class="clockpicker-dial clockpicker-hours"></div>', '<div class="clockpicker-dial clockpicker-minutes clockpicker-dial-out"></div>', '</div>', '<span class="clockpicker-am-pm-block">', '</span>', '</div>', '</div>'].join('');
    createSvgElement = function(name) {
      return document.createElementNS(svgNS, name);
    };
    leadingZero = function(num) {
      return (num < 10 ? '0' : '') + num;
    };
    uniqueId = function(prefix) {
      var id;
      id = ++idCounter + '';
      if (prefix) {
        return prefix + id;
      } else {
        return id;
      }
    };
    ClockPicker = function(element, options) {
      var addon, amPmBlock, amPmButtons, amPmButtonsTemplate, bearing, bg, canvas, fg, g, hand, hoursView, i, inner, input, isInput, minutesView, mousedown, plate, popover, radian, radius, self, svg, tick, tickTpl, timer;
      popover = $(tpl);
      plate = popover.find('.clockpicker-plate');
      hoursView = popover.find('.clockpicker-hours');
      minutesView = popover.find('.clockpicker-minutes');
      amPmBlock = popover.find('.clockpicker-am-pm-block');
      isInput = element.prop('tagName') == 'INPUT';
      input = isInput ? element : element.find('input');
      addon = element.find('.input-group-addon');
      self = this;
      timer = void 0;
      mousedown = function(e, space) {
        var dx, dy, isTouch, moved, movingTimer, offset, x0, y0, z;
        offset = plate.offset();
        isTouch = /^touch/.test(e.type);
        x0 = offset.left + dialRadius;
        y0 = offset.top + dialRadius;
        dx = (isTouch ? e.originalEvent.touches[0] : e).pageX - x0;
        dy = (isTouch ? e.originalEvent.touches[0] : e).pageY - y0;
        z = Math.sqrt(dx * dx + dy * dy);
        moved = false;
        if (space && (z < outerRadius - tickRadius || z > outerRadius + tickRadius)) {
          return;
        }
        e.preventDefault();
        movingTimer = setTimeout((function() {
          $body.addClass('clockpicker-moving');
        }), 200);
        if (svgSupported) {
          plate.append(self.canvas);
        }
        self.setHand(dx, dy, !space, true);
        $doc.off(mousemoveEvent).on(mousemoveEvent, function(e) {
          var isTouch;
          var x, y;
          e.preventDefault();
          isTouch = /^touch/.test(e.type);
          x = (isTouch ? e.originalEvent.touches[0] : e).pageX - x0;
          y = (isTouch ? e.originalEvent.touches[0] : e).pageY - y0;
          if (!moved && x == dx && y == dy) {
            return;
          }
          moved = true;
          self.setHand(x, y, false, true);
        });
        $doc.off(mouseupEvent).on(mouseupEvent, function(e) {
          var isTouch;
          var x, y;
          $doc.off(mouseupEvent);
          e.preventDefault();
          isTouch = /^touch/.test(e.type);
          x = (isTouch ? e.originalEvent.changedTouches[0] : e).pageX - x0;
          y = (isTouch ? e.originalEvent.changedTouches[0] : e).pageY - y0;
          if ((space || moved) && x == dx && y == dy) {
            self.setHand(x, y);
          }
          if (self.currentView == 'hours') {
            self.toggleView('minutes', duration / 2);
          } else {
            if (options.autoclose) {
              self.minutesView.addClass('clockpicker-dial-out');
              setTimeout((function() {
                self.done();
              }), duration / 2);
            }
          }
          plate.prepend(canvas);
          clearTimeout(movingTimer);
          $body.removeClass('clockpicker-moving');
          $doc.off(mousemoveEvent);
        });
      };
      this.id = uniqueId('cp');
      this.element = element;
      this.options = options;
      this.isAppended = false;
      this.isShown = false;
      this.currentView = 'hours';
      this.isInput = isInput;
      this.input = input;
      this.addon = addon;
      this.popover = popover;
      this.plate = plate;
      this.hoursView = hoursView;
      this.minutesView = minutesView;
      this.amPmBlock = amPmBlock;
      this.spanHours = popover.find('.clockpicker-span-hours');
      this.spanMinutes = popover.find('.clockpicker-span-minutes');
      this.spanAmPm = popover.find('.clockpicker-span-am-pm');
      this.amOrPm = 'PM';
      if (options.twelvehour) {
        amPmButtonsTemplate = ['<div class="clockpicker-am-pm-block">', '<button type="button" class="btn btn-sm btn-default clockpicker-button clockpicker-am-button">', 'AM</button>', '<button type="button" class="btn btn-sm btn-default clockpicker-button clockpicker-pm-button">', 'PM</button>', '</div>'].join('');
        amPmButtons = $(amPmButtonsTemplate);
        $('<button type="button" class="btn btn-sm btn-default clockpicker-button am-button">' + 'AM' + '</button>').on('click', function() {
          self.amOrPm = 'AM';
          $('.clockpicker-span-am-pm').empty().append('AM');
        }).appendTo(this.amPmBlock);
        $('<button type="button" class="btn btn-sm btn-default clockpicker-button pm-button">' + 'PM' + '</button>').on('click', function() {
          self.amOrPm = 'PM';
          $('.clockpicker-span-am-pm').empty().append('PM');
        }).appendTo(this.amPmBlock);
      }
      if (!options.autoclose) {
        $('<button type="button" class="btn btn-sm btn-default btn-block clockpicker-button">' + options.donetext + '</button>').click($.proxy(this.done, this)).appendTo(popover);
      }
      if ((options.placement == 'top' || options.placement == 'bottom') && (options.align == 'top' || options.align == 'bottom')) {
        options.align = 'left';
      }
      if ((options.placement == 'left' || options.placement == 'right') && (options.align == 'left' || options.align == 'right')) {
        options.align = 'top';
      }
      popover.addClass(options.placement);
      popover.addClass('clockpicker-align-' + options.align);
      this.spanHours.click($.proxy(this.toggleView, this, 'hours'));
      this.spanMinutes.click($.proxy(this.toggleView, this, 'minutes'));
      input.on('focus.clockpicker click.clockpicker', $.proxy(this.show, this));
      addon.on('click.clockpicker', $.proxy(this.toggle, this));
      tickTpl = $('<div class="clockpicker-tick"></div>');
      i = void 0;
      tick = void 0;
      radian = void 0;
      radius = void 0;
      if (options.twelvehour) {
        i = 1;
        while (i < 13) {
          tick = tickTpl.clone();
          radian = i / 6 * Math.PI;
          radius = outerRadius;
          tick.css('font-size', '120%');
          tick.css({
            left: dialRadius + Math.sin(radian) * radius - tickRadius,
            top: dialRadius - (Math.cos(radian) * radius) - tickRadius
          });
          tick.html(i == 0 ? '00' : i);
          hoursView.append(tick);
          tick.on(mousedownEvent, mousedown);
          i += 1;
        }
      } else {
        i = 0;
        while (i < 24) {
          tick = tickTpl.clone();
          radian = i / 6 * Math.PI;
          inner = i > 0 && i < 13;
          radius = inner ? innerRadius : outerRadius;
          tick.css({
            left: dialRadius + Math.sin(radian) * radius - tickRadius,
            top: dialRadius - (Math.cos(radian) * radius) - tickRadius
          });
          if (inner) {
            tick.css('font-size', '120%');
          }
          tick.html(i == 0 ? '00' : i);
          hoursView.append(tick);
          tick.on(mousedownEvent, mousedown);
          i += 1;
        }
      }
      i = 0;
      while (i < 60) {
        tick = tickTpl.clone();
        radian = i / 30 * Math.PI;
        tick.css({
          left: dialRadius + Math.sin(radian) * outerRadius - tickRadius,
          top: dialRadius - (Math.cos(radian) * outerRadius) - tickRadius
        });
        tick.css('font-size', '120%');
        tick.html(leadingZero(i));
        minutesView.append(tick);
        tick.on(mousedownEvent, mousedown);
        i += 5;
      }
      plate.on(mousedownEvent, function(e) {
        if ($(e.target).closest('.clockpicker-tick').length == 0) {
          mousedown(e, true);
        }
      });
      if (svgSupported) {
        canvas = popover.find('.clockpicker-canvas');
        svg = createSvgElement('svg');
        svg.setAttribute('class', 'clockpicker-svg');
        svg.setAttribute('width', diameter);
        svg.setAttribute('height', diameter);
        g = createSvgElement('g');
        g.setAttribute('transform', 'translate(' + dialRadius + ',' + dialRadius + ')');
        bearing = createSvgElement('circle');
        bearing.setAttribute('class', 'clockpicker-canvas-bearing');
        bearing.setAttribute('cx', 0);
        bearing.setAttribute('cy', 0);
        bearing.setAttribute('r', 2);
        hand = createSvgElement('line');
        hand.setAttribute('x1', 0);
        hand.setAttribute('y1', 0);
        bg = createSvgElement('circle');
        bg.setAttribute('class', 'clockpicker-canvas-bg');
        bg.setAttribute('r', tickRadius);
        fg = createSvgElement('circle');
        fg.setAttribute('class', 'clockpicker-canvas-fg');
        fg.setAttribute('r', 3.5);
        g.appendChild(hand);
        g.appendChild(bg);
        g.appendChild(fg);
        g.appendChild(bearing);
        svg.appendChild(g);
        canvas.append(svg);
        this.hand = hand;
        this.bg = bg;
        this.fg = fg;
        this.bearing = bearing;
        this.g = g;
        this.canvas = canvas;
      }
      raiseCallback(this.options.init);
    };
    raiseCallback = function(callbackFunction) {
      if (callbackFunction && typeof callbackFunction == 'function') {
        callbackFunction();
      }
    };
    ClockPicker.DEFAULTS = {
      'default': '',
      fromnow: 0,
      placement: 'bottom',
      align: 'left',
      donetext: '完成',
      autoclose: false,
      twelvehour: false,
      vibrate: true
    };
    ClockPicker.prototype.toggle = function() {
      this[this.isShown ? 'hide' : 'show']();
    };
    ClockPicker.prototype.locate = function() {
      var align, element, height, offset, placement, popover, self, styles, width;
      element = this.element;
      popover = this.popover;
      offset = element.offset();
      width = element.outerWidth();
      height = element.outerHeight();
      placement = this.options.placement;
      align = this.options.align;
      styles = {};
      self = this;
      popover.show();
      switch (placement) {
        case 'bottom':
          styles.top = offset.top + height;
          break;
        case 'right':
          styles.left = offset.left + width;
          break;
        case 'top':
          styles.top = offset.top - popover.outerHeight();
          break;
        case 'left':
          styles.left = offset.left - popover.outerWidth();
      }
      switch (align) {
        case 'left':
          styles.left = offset.left;
          break;
        case 'right':
          styles.left = offset.left + width - popover.outerWidth();
          break;
        case 'top':
          styles.top = offset.top;
          break;
        case 'bottom':
          styles.top = offset.top + height - popover.outerHeight();
      }
      popover.css(styles);
    };
    ClockPicker.prototype.show = function(e) {
      var now, self, value;
      if (this.isShown) {
        return;
      }
      raiseCallback(this.options.beforeShow);
      self = this;
      if (!this.isAppended) {
        $body = $(document.body).append(this.popover);
        $win.on('resize.clockpicker' + this.id, function() {
          if (self.isShown) {
            self.locate();
          }
        });
        this.isAppended = true;
      }
      value = ((this.input.prop('value') || this.options['default'] || '') + '').split(':');
      if (value[0] == 'now') {
        now = new Date(+(new Date) + this.options.fromnow);
        value = [now.getHours(), now.getMinutes()];
      }
      this.hours = +value[0] || 0;
      this.minutes = +value[1] || 0;
      this.spanHours.html(leadingZero(this.hours));
      this.spanMinutes.html(leadingZero(this.minutes));
      this.toggleView('hours');
      this.locate();
      this.isShown = true;
      $doc.on('click.clockpicker.' + this.id + ' focusin.clockpicker.' + this.id, function(e) {
        var target;
        target = $(e.target);
        if (target.closest(self.popover).length == 0 && target.closest(self.addon).length == 0 && target.closest(self.input).length == 0) {
          self.hide();
        }
      });
      $doc.on('keyup.clockpicker.' + this.id, function(e) {
        if (e.keyCode == 27) {
          self.hide();
        }
      });
      raiseCallback(this.options.afterShow);
    };
    ClockPicker.prototype.hide = function() {
      raiseCallback(this.options.beforeHide);
      this.isShown = false;
      $doc.off('click.clockpicker.' + this.id + ' focusin.clockpicker.' + this.id);
      $doc.off('keyup.clockpicker.' + this.id);
      this.popover.hide();
      raiseCallback(this.options.afterHide);
    };
    ClockPicker.prototype.toggleView = function(view, delay) {
      var hideView, isHours, nextView, raiseAfterHourSelect;
      raiseAfterHourSelect = false;
      if (view == 'minutes' && $(this.hoursView).css('visibility') == 'visible') {
        raiseCallback(this.options.beforeHourSelect);
        raiseAfterHourSelect = true;
      }
      isHours = view == 'hours';
      nextView = isHours ? this.hoursView : this.minutesView;
      hideView = isHours ? this.minutesView : this.hoursView;
      this.currentView = view;
      this.spanHours.toggleClass('text-primary', isHours);
      this.spanMinutes.toggleClass('text-primary', !isHours);
      hideView.addClass('clockpicker-dial-out');
      nextView.css('visibility', 'visible').removeClass('clockpicker-dial-out');
      this.resetClock(delay);
      clearTimeout(this.toggleViewTimer);
      this.toggleViewTimer = setTimeout((function() {
        hideView.css('visibility', 'hidden');
      }), duration);
      if (raiseAfterHourSelect) {
        raiseCallback(this.options.afterHourSelect);
      }
    };
    ClockPicker.prototype.resetClock = function(delay) {
      var isHours, radian, radius, self, unit, value, view, x, y;
      view = this.currentView;
      value = this[view];
      isHours = view == 'hours';
      unit = Math.PI / (isHours ? 6 : 30);
      radian = value * unit;
      radius = isHours && value > 0 && value < 13 ? innerRadius : outerRadius;
      x = Math.sin(radian) * radius;
      y = -Math.cos(radian) * radius;
      self = this;
      if (svgSupported && delay) {
        self.canvas.addClass('clockpicker-canvas-out');
        setTimeout((function() {
          self.canvas.removeClass('clockpicker-canvas-out');
          self.setHand(x, y);
        }), delay);
      } else {
        this.setHand(x, y);
      }
    };
    ClockPicker.prototype.setHand = function(x, y, roundBy5, dragging) {
      var cx, cy, inner, isHours, options, radian, radius, unit, value, z;
      radian = Math.atan2(x, -y);
      isHours = this.currentView == 'hours';
      unit = Math.PI / (isHours || roundBy5 ? 6 : 30);
      z = Math.sqrt(x * x + y * y);
      options = this.options;
      inner = isHours && z < (outerRadius + innerRadius) / 2;
      radius = inner ? innerRadius : outerRadius;
      value = void 0;
      if (options.twelvehour) {
        radius = outerRadius;
      }
      if (radian < 0) {
        radian = Math.PI * 2 + radian;
      }
      value = Math.round(radian / unit);
      radian = value * unit;
      if (options.twelvehour) {
        if (isHours) {
          if (value == 0) {
            value = 12;
          }
        } else {
          if (roundBy5) {
            value *= 5;
          }
          if (value == 60) {
            value = 0;
          }
        }
      } else {
        if (isHours) {
          if (value == 12) {
            value = 0;
          }
          value = inner ? (value == 0 ? 12 : value) : value == 0 ? 0 : value + 12;
        } else {
          if (roundBy5) {
            value *= 5;
          }
          if (value == 60) {
            value = 0;
          }
        }
      }
      if (this[this.currentView] != value) {
        if (vibrate && this.options.vibrate) {
          if (!this.vibrateTimer) {
            navigator[vibrate](10);
            this.vibrateTimer = setTimeout($.proxy((function() {
              this.vibrateTimer = null;
            }), this), 100);
          }
        }
      }
      this[this.currentView] = value;
      this[isHours ? 'spanHours' : 'spanMinutes'].html(leadingZero(value));
      if (!svgSupported) {
        this[isHours ? 'hoursView' : 'minutesView'].find('.clockpicker-tick').each(function() {
          var tick;
          tick = $(this);
          tick.toggleClass('active', value == +tick.html());
        });
        return;
      }
      if (dragging || !isHours && value % 5) {
        this.g.insertBefore(this.hand, this.bearing);
        this.g.insertBefore(this.bg, this.fg);
        this.bg.setAttribute('class', 'clockpicker-canvas-bg clockpicker-canvas-bg-trans');
      } else {
        this.g.insertBefore(this.hand, this.bg);
        this.g.insertBefore(this.fg, this.bg);
        this.bg.setAttribute('class', 'clockpicker-canvas-bg');
      }
      cx = Math.sin(radian) * radius;
      cy = -Math.cos(radian) * radius;
      this.hand.setAttribute('x2', cx);
      this.hand.setAttribute('y2', cy);
      this.bg.setAttribute('cx', cx);
      this.bg.setAttribute('cy', cy);
      this.fg.setAttribute('cx', cx);
      this.fg.setAttribute('cy', cy);
    };
    ClockPicker.prototype.done = function() {
      var last, value;
      raiseCallback(this.options.beforeDone);
      this.hide();
      last = this.input.prop('value');
      value = leadingZero(this.hours) + ':' + leadingZero(this.minutes);
      if (this.options.twelvehour) {
        value = value + this.amOrPm;
      }
      this.input.prop('value', value);
      if (value != last) {
        this.input.triggerHandler('change');
        if (!this.isInput) {
          this.element.trigger('change');
        }
      }
      if (this.options.autoclose) {
        this.input.trigger('blur');
      }
      raiseCallback(this.options.afterDone);
    };
    ClockPicker.prototype.remove = function() {
      this.element.removeData('clockpicker');
      this.input.off('focus.clockpicker click.clockpicker');
      this.addon.off('click.clockpicker');
      if (this.isShown) {
        this.hide();
      }
      if (this.isAppended) {
        $win.off('resize.clockpicker' + this.id);
        this.popover.remove();
      }
    };
    $.fn.clockpicker = function(option) {
      var args;
      args = Array.prototype.slice.call(arguments, 1);
      return this.each(function() {
        var $this, data, options;
        $this = $(this);
        data = $this.data('clockpicker');
        if (!data) {
          options = $.extend({}, ClockPicker.DEFAULTS, $this.data(), typeof option == 'object' && option);
          $this.data('clockpicker', new ClockPicker($this, options));
        } else {
          if (typeof data[option] == 'function') {
            data[option].apply(data, args);
          }
        }
      });
    };
  })();

  (function($W) {
    $W.Alert = function(obj) {
      var icon, success, text, title;
      if (typeof obj === 'object') {
        title = obj.title || '';
        text = obj.text || '';
        icon = obj.icon || 'info';
        success = obj.success || '';
        alertify.alert().destroy();
        return alertify.alert(("<i class=\"material-icons\">" + icon + "</i>") + title, text, success);
      } else {
        alertify.alert().destroy();
        return alertify.alert("<i class=\"material-icons\">info</i>", obj);
      }
    };
    $W.Confirm = function(obj) {
      var cancel, icon, success, text, title;
      title = obj.title || '';
      text = obj.text || '';
      icon = obj.icon || 'help';
      success = obj.success || '';
      cancel = obj.cancel || '';
      alertify.confirm().destroy();
      return alertify.confirm(("<i class=\"material-icons\">" + icon + "</i> ") + title, text, success, cancel);
    };
    $W.Error = function(obj) {
      var callback, icon, text, wait;
      if (typeof obj === 'object') {
        text = obj.text || '';
        icon = obj.icon || 'error_outline';
        wait = obj.wait || '';
        callback = obj.callback || '';
        return alertify.error(("<i class=\"material-icons\">" + icon + "</i> ") + text, wait, callback);
      } else {
        return alertify.error("<i class=\"material-icons\">error_outline</i> " + obj);
      }
    };
    $W.Warning = function(obj) {
      var callback, icon, text, wait;
      if (typeof obj === 'object') {
        text = obj.text || '';
        icon = obj.icon || 'warning';
        wait = obj.wait || '';
        callback = obj.callback || '';
        return alertify.warning(("<i class=\"material-icons\">" + icon + "</i> ") + text, wait, callback);
      } else {
        return alertify.warning("<i class=\"material-icons\">warning</i> " + obj);
      }
    };
    $W.Success = function(obj) {
      var callback, icon, text, wait;
      if (typeof obj === 'object') {
        text = obj.text || '';
        icon = obj.icon || 'check';
        wait = obj.wait || '';
        callback = obj.callback || '';
        return alertify.success(("<i class=\"material-icons\">" + icon + "</i> ") + text, wait, callback);
      } else {
        return alertify.success("<i class=\"material-icons\">check</i> " + obj);
      }
    };
    $W.Message = function(obj) {
      var callback, icon, text, wait;
      if (typeof obj === 'object') {
        text = obj.text || '';
        icon = obj.icon || 'message';
        wait = obj.wait || '';
        callback = obj.callback || '';
        return alertify.message(("<i class=\"material-icons\">" + icon + "</i> ") + text, wait, callback);
      } else {
        return alertify.message("<i class=\"material-icons\">message</i> " + obj);
      }
    };
    return $W.Prompt = function(obj) {
      var cancel, icon, success, text, title;
      title = obj.title || '';
      text = obj.text || '';
      icon = obj.icon || 'help';
      success = obj.success || '';
      cancel = obj.cancel || '';
      alertify.prompt().destroy();
      return alertify.prompt(title, text, '', success, cancel);
    };
  })(Win);


  /**
   * alertifyjs 1.8.0 http://alertifyjs.com
   * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.
   * Copyright 2016 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com)
   * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>
   */

  (function(window) {

    /**
     * [Helper]  Adds the specified class(es) to the element.
     *
     * @element {node}      The element
     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.
     *
     * @return {undefined}
     */
    var Alertify, Off, On, addClass, alertify, clearContents, copy, createCloseEvent, defaults, delegate, destruct, dialog, dispatchEvent, getScrollLeft, getScrollTop, isRightToLeft, keys, notifier, openDialogs, removeClass, transition;
    addClass = function(element, classNames) {
      element.className += ' ' + classNames;
    };

    /**
     * [Helper]  Removes the specified class(es) from the element.
     *
     * @element {node}      The element
     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.
     *
     * @return {undefined}
     */
    removeClass = function(element, classNames) {
      var index, original, toBeRemoved, x;
      original = element.className.split(' ');
      toBeRemoved = classNames.split(' ');
      x = 0;
      while (x < toBeRemoved.length) {
        index = original.indexOf(toBeRemoved[x]);
        if (index > -1) {
          original.splice(index, 1);
        }
        x += 1;
      }
      element.className = original.join(' ');
    };

    /**
     * [Helper]  Checks if the document is RTL
     *
     * @return {Boolean} True if the document is RTL, false otherwise.
     */
    isRightToLeft = function() {
      return window.getComputedStyle(document.body).direction == 'rtl';
    };

    /**
     * [Helper]  Get the document current scrollTop
     *
     * @return {Number} current document scrollTop value
     */
    getScrollTop = function() {
      return document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;
    };

    /**
     * [Helper]  Get the document current scrollLeft
     *
     * @return {Number} current document scrollLeft value
     */
    getScrollLeft = function() {
      return document.documentElement && document.documentElement.scrollLeft || document.body.scrollLeft;
    };

    /**
    * Helper: clear contents
    *
     */
    clearContents = function(element) {
      while (element.lastChild) {
        element.removeChild(element.lastChild);
      }
    };

    /**
     * Extends a given prototype by merging properties from base into sub.
     *
     * @sub {Object} sub The prototype being overwritten.
     * @base {Object} base The prototype being written.
     *
     * @return {Object} The extended prototype.
     */
    copy = function(src) {
      var cpy, prop, x;
      if (null == src) {
        return src;
      }
      cpy = void 0;
      if (Array.isArray(src)) {
        cpy = [];
        x = 0;
        while (x < src.length) {
          cpy.push(copy(src[x]));
          x += 1;
        }
        return cpy;
      }
      if (src instanceof Date) {
        return new Date(src.getTime());
      }
      if (src instanceof RegExp) {
        cpy = new RegExp(src.source);
        cpy.global = src.global;
        cpy.ignoreCase = src.ignoreCase;
        cpy.multiline = src.multiline;
        cpy.lastIndex = src.lastIndex;
        return cpy;
      }
      if (typeof src == 'object') {
        cpy = {};
        for (prop in src) {
          if (src.hasOwnProperty(prop)) {
            cpy[prop] = copy(src[prop]);
          }
        }
        return cpy;
      }
      return src;
    };

    /**
      * Helper: destruct the dialog
      *
     */
    destruct = function(instance, initialize) {
      var root;
      root = instance.elements.root;
      root.parentNode.removeChild(root);
      delete instance.elements;
      instance.settings = copy(instance.__settings);
      instance.__init = initialize;
      delete instance.__internal;
    };

    /**
    * Creates event handler delegate that sends the instance as last argument.
    *
    * @return {Function}    a function wrapper which sends the instance as last argument.
     */
    delegate = function(context, method) {
      return function() {
        var args, x;
        if (arguments.length > 0) {
          args = [];
          x = 0;
          while (x < arguments.length) {
            args.push(arguments[x]);
            x += 1;
          }
          args.push(context);
          return method.apply(context, args);
        }
        return method.apply(context, [null, context]);
      };
    };

    /**
    * Helper for creating a dialog close event.
    *
    * @return {object}
     */
    createCloseEvent = function(index, button) {
      return {
        index: index,
        button: button,
        cancel: false
      };
    };

    /**
    * Helper for dispatching events.
    *
    * @param  {string} evenType The type of the event to disptach.
    * @param  {object} instance The dialog instance disptaching the event.
    *
    * @return {object}
     */
    dispatchEvent = function(eventType, instance) {
      if (typeof instance.get(eventType) == 'function') {
        instance.get(eventType).call(instance);
      }
    };

    /**
     * Alertify public API
     * This contains everything that is exposed through the alertify object.
     *
     * @return {Object}
     */
    Alertify = function() {
      var dialogs, extend, get_dialog, register;
      dialogs = {};

      /**
       * Extends a given prototype by merging properties from base into sub.
       *
       * @sub {Object} sub The prototype being overwritten.
       * @base {Object} base The prototype being written.
       *
       * @return {Object} The extended prototype.
       */
      extend = function(sub, base) {
        var prop;
        for (prop in base) {
          if (base.hasOwnProperty(prop)) {
            sub[prop] = base[prop];
          }
        }
        return sub;
      };

      /**
      * Helper: returns a dialog instance from saved dialogs.
      * and initializes the dialog if its not already initialized.
      *
      * @name {String} name The dialog name.
      *
      * @return {Object} The dialog instance.
       */
      get_dialog = function(name) {
        var dialog;
        dialog = dialogs[name].dialog;
        if (dialog && typeof dialog.__init == 'function') {
          dialog.__init(dialog);
        }
        return dialog;
      };

      /**
       * Helper:  registers a new dialog definition.
       *
       * @name {String} name The dialog name.
       * @Factory {Function} Factory a function resposible for creating dialog prototype.
       * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.
       * @base {String} base the name of another dialog to inherit from.
       *
       * @return {Object} The dialog definition.
       */
      register = function(name, Factory, transient, base) {
        var definition;
        definition = {
          dialog: null,
          factory: Factory
        };
        if (base != undefined) {
          definition.factory = function() {
            return extend(new dialogs[base].factory, new Factory);
          };
        }
        if (!transient) {
          definition.dialog = extend(new definition.factory, dialog);
        }
        return dialogs[name] = definition;
      };
      return {
        defaults: defaults,
        dialog: function(name, Factory, transient, base) {
          var definition;
          if (typeof Factory != 'function') {
            return get_dialog(name);
          }
          if (this.hasOwnProperty(name)) {
            throw new Error('alertify.dialog: name already exists');
          }
          definition = register(name, Factory, transient, base);
          if (transient) {
            this[name] = function() {
              var instance;
              if (arguments.length == 0) {
                return definition.dialog;
              } else {
                instance = extend(new definition.factory, dialog);
                if (instance && typeof instance.__init == 'function') {
                  instance.__init(instance);
                }
                instance['main'].apply(instance, arguments);
                return instance['show'].apply(instance);
              }
            };
          } else {
            this[name] = function() {
              var dialog;
              if (definition.dialog && typeof definition.dialog.__init == 'function') {
                definition.dialog.__init(definition.dialog);
              }
              if (arguments.length == 0) {
                return definition.dialog;
              } else {
                dialog = definition.dialog;
                dialog['main'].apply(definition.dialog, arguments);
                return dialog['show'].apply(definition.dialog);
              }
            };
          }
        },
        closeAll: function(except) {
          var clone, instance, x;
          clone = openDialogs.slice(0);
          x = 0;
          while (x < clone.length) {
            instance = clone[x];
            if (except == undefined || except != instance) {
              instance.close();
            }
            x += 1;
          }
        },
        setting: function(name, key, value) {
          var dialog;
          if (name == 'notifier') {
            return notifier.setting(key, value);
          }
          dialog = get_dialog(name);
          if (dialog) {
            return dialog.setting(key, value);
          }
        },
        set: function(name, key, value) {
          return this.setting(name, key, value);
        },
        get: function(name, key) {
          return this.setting(name, key);
        },
        notify: function(message, type, wait, callback) {
          return notifier.create(type, callback).push(message, wait);
        },
        message: function(message, wait, callback) {
          return notifier.create(null, callback).push(message, wait);
        },
        success: function(message, wait, callback) {
          return notifier.create('success', callback).push(message, wait);
        },
        error: function(message, wait, callback) {
          return notifier.create('error', callback).push(message, wait);
        },
        warning: function(message, wait, callback) {
          return notifier.create('warning', callback).push(message, wait);
        },
        dismissAll: function() {
          notifier.dismissAll();
        }
      };
    };
    'use strict';

    /**
     * Keys enum
     * @type {Object}
     */
    keys = {
      ENTER: 13,
      ESC: 27,
      F1: 112,
      F12: 123,
      LEFT: 37,
      RIGHT: 39
    };

    /**
     * Default options
     * @type {Object}
     */
    defaults = {
      autoReset: true,
      basic: false,
      closable: true,
      closableByDimmer: true,
      frameless: false,
      maintainFocus: true,
      maximizable: true,
      modal: true,
      movable: true,
      moveBounded: false,
      overflow: true,
      padding: true,
      pinnable: true,
      pinned: true,
      preventBodyShift: false,
      resizable: true,
      startMaximized: false,
      transition: 'zoom',
      notifier: {
        delay: 15,
        position: 'bottom-left'
      },
      glossary: {
        title: 'LogicalSoft',
        ok: 'OK',
        cancel: 'Cancel',
        acccpt: 'Accept',
        deny: 'Deny',
        confirm: 'Confirm',
        decline: 'Decline',
        close: 'Close',
        maximize: 'Maximize',
        restore: 'Restore'
      },
      theme: {
        input: 'ajs-input',
        ok: 'ajs-ok',
        cancel: 'ajs-cancel'
      }
    };
    openDialogs = [];

    /**
     * Use a closure to return proper event listener method. Try to use
     * `addEventListener` by default but fallback to `attachEvent` for
     * unsupported browser. The closure simply ensures that the test doesn't
     * happen every time the method is called.
     *
     * @param    {Node}     el    Node element
     * @param    {String}   event Event type
     * @param    {Function} fn    Callback of event
     * @return   {Function}
     */
    On = (function() {
      if (document.addEventListener) {
        return function(el, event, fn, useCapture) {
          el.addEventListener(event, fn, useCapture == true);
        };
      } else if (document.attachEvent) {
        return function(el, event, fn) {
          el.attachEvent('on' + event, fn);
        };
      }
    })();

    /**
     * Use a closure to return proper event listener method. Try to use
     * `removeEventListener` by default but fallback to `detachEvent` for
     * unsupported browser. The closure simply ensures that the test doesn't
     * happen every time the method is called.
     *
     * @param    {Node}     el    Node element
     * @param    {String}   event Event type
     * @param    {Function} fn    Callback of event
     * @return   {Function}
     */
    Off = (function() {
      if (document.removeEventListener) {
        return function(el, event, fn, useCapture) {
          el.removeEventListener(event, fn, useCapture == true);
        };
      } else if (document.detachEvent) {
        return function(el, event, fn) {
          el.detachEvent('on' + event, fn);
        };
      }
    })();

    /**
     * Prevent default event from firing
     *
     * @param  {Event} event Event object
     * @return {undefined}
    
    function prevent ( event ) {
        if ( event ) {
            if ( event.preventDefault ) {
                event.preventDefault();
            } else {
                event.returnValue = false;
            }
        }
    }
     */
    transition = (function() {
      var supported, t, transitions, type;
      t = void 0;
      type = void 0;
      supported = false;
      transitions = {
        'animation': 'animationend',
        'OAnimation': 'oAnimationEnd oanimationend',
        'msAnimation': 'MSAnimationEnd',
        'MozAnimation': 'animationend',
        'WebkitAnimation': 'webkitAnimationEnd'
      };
      for (t in transitions) {
        t = t;
        if (document.documentElement.style[t] != undefined) {
          type = transitions[t];
          supported = true;
          break;
        }
      }
      return {
        type: type,
        supported: supported
      };
    })();

    /**
     * Super class for all dialogs
     *
     * @return {Object}		base dialog prototype
     */
    dialog = (function() {
      var addAbsPositionFix, beginMove, beginResize, bindClosableEvents, bindEvents, bindModelessEvents, bindMovableEvents, bindResizableEvents, bounds, bringToFront, buttonsClickHandler, cancelClick, cancelKeyup, classes, commandsClickHandler, endMove, endResize, ensureNoOverflow, handleOffset, handleTransitionInEvent, handleTransitionOutEvent, initialize, isSafari, keydownHandler, keyupHandler, maximize, minWidth, modalClickHandler, movable, move, moveDelegate, moveElement, moveElementBounded, offsetX, offsetY, onReset, optionUpdated, pin, preventBodyShift, reflow, refreshTop, removeAbsPositionFix, resetMove, resetResize, resizable, resize, resizeElement, restore, restoreScrollPosition, saveScrollPosition, scrollX, scrollY, setFocus, startingLeft, startingWidth, templates, top, topScroll, triggerCallback, triggerClose, unbindClosableEvents, unbindEvents, unbindModelessEvents, unbindMovableEvents, unbindResizableEvents, unpin, update, updateAbsPositionFix, updateBasicMode, updateClosable, updateDisplayMode, updateFramelessMode, updateMaximizable, updateMovable, updatePinnable, updatePinned, updateResizable, updateTransition, usedKeys, windowResize, xProp, yProp;
      usedKeys = [];
      reflow = null;
      isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0;
      templates = {
        dimmer: '<div class="ajs-dimmer"></div>',
        modal: '<div class="ajs-modal" tabindex="0"></div>',
        dialog: '<div class="ajs-dialog" tabindex="0"></div>',
        reset: '<button class="ajs-reset"></button>',
        commands: '<div class="ajs-commands"><button class="ajs-pin"></button><button class="ajs-maximize"></button><button class="ajs-close"></button></div>',
        header: '<div class="ajs-header"></div>',
        body: '<div class="ajs-body"></div>',
        content: '<div class="ajs-content"></div>',
        footer: '<div class="ajs-footer"></div>',
        buttons: {
          primary: '<div class="ajs-primary ajs-buttons"></div>',
          auxiliary: '<div class="ajs-auxiliary ajs-buttons"></div>'
        },
        button: '<button class="ajs-button"></button>',
        resizeHandle: '<div class="ajs-handle"></div>'
      };
      classes = {
        animationIn: 'ajs-in',
        animationOut: 'ajs-out',
        base: 'alertify',
        basic: 'ajs-basic',
        capture: 'ajs-capture',
        closable: 'ajs-closable',
        fixed: 'ajs-fixed',
        frameless: 'ajs-frameless',
        hidden: 'ajs-hidden',
        maximize: 'ajs-maximize',
        maximized: 'ajs-maximized',
        maximizable: 'ajs-maximizable',
        modeless: 'ajs-modeless',
        movable: 'ajs-movable',
        noSelection: 'ajs-no-selection',
        noOverflow: 'ajs-no-overflow',
        noPadding: 'ajs-no-padding',
        pin: 'ajs-pin',
        pinnable: 'ajs-pinnable',
        prefix: 'ajs-',
        resizable: 'ajs-resizable',
        restore: 'ajs-restore',
        shake: 'ajs-shake',
        unpinned: 'ajs-unpinned'
      };

      /**
       * Helper: maintains scroll position
       *
       */
      scrollX = void 0;
      scrollY = void 0;
      top = '';
      topScroll = 0;
      cancelClick = false;
      cancelKeyup = false;

      /* Controls moving a dialog around */
      movable = null;
      offsetX = 0;
      offsetY = 0;
      xProp = 'pageX';
      yProp = 'pageY';
      bounds = null;
      refreshTop = false;
      moveDelegate = null;

      /* Controls moving a dialog around */
      resizable = null;
      startingLeft = Number.Nan;
      startingWidth = 0;
      minWidth = 0;
      handleOffset = 0;

      /**
       * Helper: initializes the dialog instance
       *
       * @return	{Number}	The total count of currently open modals.
       */
      initialize = function(instance) {
        var b, button, buttonsDefinition, cpy, elements, i, internal, key, opKey, ref, setup, x;
        if (!instance.__internal) {
          delete instance.__init;
          if (!instance.__settings) {
            instance.__settings = copy(instance.settings);
          }
          if (null == reflow) {
            document.body.setAttribute('tabindex', '0');
          }
          setup = void 0;
          if (typeof instance.setup == 'function') {
            setup = instance.setup();
            setup.options = setup.options || {};
            setup.focus = setup.focus || {};
          } else {
            setup = {
              buttons: [],
              focus: {
                element: null,
                select: false
              },
              options: {}
            };
          }
          if (typeof instance.hooks != 'object') {
            instance.hooks = {};
          }
          buttonsDefinition = [];
          if (Array.isArray(setup.buttons)) {
            b = 0;
            while (b < setup.buttons.length) {
              ref = setup.buttons[b];
              cpy = {};
              for (i in ref) {
                if (ref.hasOwnProperty(i)) {
                  cpy[i] = ref[i];
                }
              }
              buttonsDefinition.push(cpy);
              b += 1;
            }
          }
          internal = instance.__internal = {
            isOpen: false,
            activeElement: document.body,
            timerIn: undefined,
            timerOut: undefined,
            buttons: buttonsDefinition,
            focus: setup.focus,
            options: {
              title: undefined,
              modal: undefined,
              basic: undefined,
              frameless: undefined,
              pinned: undefined,
              movable: undefined,
              moveBounded: undefined,
              resizable: undefined,
              autoReset: undefined,
              closable: undefined,
              closableByDimmer: undefined,
              maximizable: undefined,
              startMaximized: undefined,
              pinnable: undefined,
              transition: undefined,
              padding: undefined,
              overflow: undefined,
              onshow: undefined,
              onclose: undefined,
              onfocus: undefined,
              onmove: undefined,
              onmoved: undefined,
              onresize: undefined,
              onresized: undefined,
              onmaximize: undefined,
              onmaximized: undefined,
              onrestore: undefined,
              onrestored: undefined
            },
            resetHandler: undefined,
            beginMoveHandler: undefined,
            beginResizeHandler: undefined,
            bringToFrontHandler: undefined,
            modalClickHandler: undefined,
            buttonsClickHandler: undefined,
            commandsClickHandler: undefined,
            transitionInHandler: undefined,
            transitionOutHandler: undefined,
            destroy: undefined
          };
          elements = {};
          elements.root = document.createElement('div');
          elements.root.className = classes.base + ' ' + classes.hidden + ' ';
          elements.root.innerHTML = templates.dimmer + templates.modal;
          elements.dimmer = elements.root.firstChild;
          elements.modal = elements.root.lastChild;
          elements.modal.innerHTML = templates.dialog;
          elements.dialog = elements.modal.firstChild;
          elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;
          elements.reset = [];
          elements.reset.push(elements.dialog.firstChild);
          elements.reset.push(elements.dialog.lastChild);
          elements.commands = {};
          elements.commands.container = elements.reset[0].nextSibling;
          elements.commands.pin = elements.commands.container.firstChild;
          elements.commands.maximize = elements.commands.pin.nextSibling;
          elements.commands.close = elements.commands.maximize.nextSibling;
          elements.header = elements.commands.container.nextSibling;
          elements.body = elements.header.nextSibling;
          elements.body.innerHTML = templates.content;
          elements.content = elements.body.firstChild;
          elements.footer = elements.body.nextSibling;
          elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;
          elements.resizeHandle = elements.footer.nextSibling;
          elements.buttons = {};
          elements.buttons.auxiliary = elements.footer.firstChild;
          elements.buttons.primary = elements.buttons.auxiliary.nextSibling;
          elements.buttons.primary.innerHTML = templates.button;
          elements.buttonTemplate = elements.buttons.primary.firstChild;
          elements.buttons.primary.removeChild(elements.buttonTemplate);
          x = 0;
          while (x < instance.__internal.buttons.length) {
            button = instance.__internal.buttons[x];
            if (usedKeys.indexOf(button.key) < 0) {
              usedKeys.push(button.key);
            }
            button.element = elements.buttonTemplate.cloneNode();
            button.element.innerHTML = button.text;
            if (typeof button.className == 'string' && button.className != '') {
              addClass(button.element, button.className);
            }
            for (key in button.attrs) {
              if (key != 'className' && button.attrs.hasOwnProperty(key)) {
                button.element.setAttribute(key, button.attrs[key]);
              }
            }
            if (button.scope == 'auxiliary') {
              elements.buttons.auxiliary.appendChild(button.element);
            } else {
              elements.buttons.primary.appendChild(button.element);
            }
            x += 1;
          }
          instance.elements = elements;
          internal.resetHandler = delegate(instance, onReset);
          internal.beginMoveHandler = delegate(instance, beginMove);
          internal.beginResizeHandler = delegate(instance, beginResize);
          internal.bringToFrontHandler = delegate(instance, bringToFront);
          internal.modalClickHandler = delegate(instance, modalClickHandler);
          internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);
          internal.commandsClickHandler = delegate(instance, commandsClickHandler);
          internal.transitionInHandler = delegate(instance, handleTransitionInEvent);
          internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);
          for (opKey in internal.options) {
            if (setup.options[opKey] != undefined) {
              instance.set(opKey, setup.options[opKey]);
            } else if (alertify.defaults.hasOwnProperty(opKey)) {
              instance.set(opKey, alertify.defaults[opKey]);
            } else if (opKey == 'title') {
              instance.set(opKey, alertify.defaults.glossary[opKey]);
            }
          }
          if (typeof instance.build == 'function') {
            instance.build();
          }
        }
        document.body.appendChild(instance.elements.root);
      };
      saveScrollPosition = function() {
        scrollX = getScrollLeft();
        scrollY = getScrollTop();
      };
      restoreScrollPosition = function() {
        window.scrollTo(scrollX, scrollY);
      };

      /**
       * Helper: adds/removes no-overflow class from body
       *
       */
      ensureNoOverflow = function() {
        var instance, requiresNoOverflow, x;
        requiresNoOverflow = 0;
        x = 0;
        while (x < openDialogs.length) {
          instance = openDialogs[x];
          if (instance.isModal() || instance.isMaximized()) {
            requiresNoOverflow += 1;
          }
          x += 1;
        }
        if (requiresNoOverflow == 0 && document.body.className.indexOf(classes.noOverflow) >= 0) {
          removeClass(document.body, classes.noOverflow);
          preventBodyShift(false);
        } else if (requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0) {
          preventBodyShift(true);
          addClass(document.body, classes.noOverflow);
        }
      };

      /**
       * Helper: prevents body shift.
       *
       */
      preventBodyShift = function(add) {
        if (alertify.defaults.preventBodyShift && document.documentElement.scrollHeight > document.documentElement.clientHeight) {
          if (add) {
            topScroll = scrollY;
            top = window.getComputedStyle(document.body).top;
            addClass(document.body, classes.fixed);
            document.body.style.top = -scrollY + 'px';
          } else {
            scrollY = topScroll;
            document.body.style.top = top;
            removeClass(document.body, classes.fixed);
            restoreScrollPosition();
          }
        }
      };

      /**
       * Sets the name of the transition used to show/hide the dialog
       *
       * @param {Object} instance The dilog instance.
       *
       */
      updateTransition = function(instance, value, oldValue) {
        if (typeof oldValue == 'string') {
          removeClass(instance.elements.root, classes.prefix + oldValue);
        }
        addClass(instance.elements.root, classes.prefix + value);
        reflow = instance.elements.root.offsetWidth;
      };

      /**
       * Toggles the dialog display mode
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      updateDisplayMode = function(instance) {
        if (instance.get('modal')) {
          removeClass(instance.elements.root, classes.modeless);
          if (instance.isOpen()) {
            unbindModelessEvents(instance);
            updateAbsPositionFix(instance);
            ensureNoOverflow();
          }
        } else {
          addClass(instance.elements.root, classes.modeless);
          if (instance.isOpen()) {
            bindModelessEvents(instance);
            updateAbsPositionFix(instance);
            ensureNoOverflow();
          }
        }
      };

      /**
       * Toggles the dialog basic view mode
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      updateBasicMode = function(instance) {
        if (instance.get('basic')) {
          addClass(instance.elements.root, classes.basic);
        } else {
          removeClass(instance.elements.root, classes.basic);
        }
      };

      /**
       * Toggles the dialog frameless view mode
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      updateFramelessMode = function(instance) {
        if (instance.get('frameless')) {
          addClass(instance.elements.root, classes.frameless);
        } else {
          removeClass(instance.elements.root, classes.frameless);
        }
      };

      /**
       * Helper: Brings the modeless dialog to front, attached to modeless dialogs.
       *
       * @param {Event} event Focus event
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      bringToFront = function(event, instance) {
        var index, x;
        index = openDialogs.indexOf(instance);
        x = index + 1;
        while (x < openDialogs.length) {
          if (openDialogs[x].isModal()) {
            return;
          }
          x += 1;
        }
        if (document.body.lastChild != instance.elements.root) {
          document.body.appendChild(instance.elements.root);
          openDialogs.splice(openDialogs.indexOf(instance), 1);
          openDialogs.push(instance);
          setFocus(instance);
        }
        return false;
      };

      /**
       * Helper: reflects dialogs options updates
       *
       * @param {Object} instance The dilog instance.
       * @param {String} option The updated option name.
       *
       * @return	{undefined}
       */
      optionUpdated = function(instance, option, oldValue, newValue) {
        switch (option) {
          case 'title':
            instance.setHeader(newValue);
            break;
          case 'modal':
            updateDisplayMode(instance);
            break;
          case 'basic':
            updateBasicMode(instance);
            break;
          case 'frameless':
            updateFramelessMode(instance);
            break;
          case 'pinned':
            updatePinned(instance);
            break;
          case 'closable':
            updateClosable(instance);
            break;
          case 'maximizable':
            updateMaximizable(instance);
            break;
          case 'pinnable':
            updatePinnable(instance);
            break;
          case 'movable':
            updateMovable(instance);
            break;
          case 'resizable':
            updateResizable(instance);
            break;
          case 'transition':
            updateTransition(instance, newValue, oldValue);
            break;
          case 'padding':
            if (newValue) {
              removeClass(instance.elements.root, classes.noPadding);
            } else if (instance.elements.root.className.indexOf(classes.noPadding) < 0) {
              addClass(instance.elements.root, classes.noPadding);
            }
            break;
          case 'overflow':
            if (newValue) {
              removeClass(instance.elements.root, classes.noOverflow);
            } else if (instance.elements.root.className.indexOf(classes.noOverflow) < 0) {
              addClass(instance.elements.root, classes.noOverflow);
            }
            break;
          case 'transition':
            updateTransition(instance, newValue, oldValue);
        }
        if (typeof instance.hooks.onupdate == 'function') {
          instance.hooks.onupdate.call(instance, option, oldValue, newValue);
        }
      };

      /**
       * Helper: reflects dialogs options updates
       *
       * @param {Object} instance The dilog instance.
       * @param {Object} obj The object to set/get a value on/from.
       * @param {Function} callback The callback function to call if the key was found.
       * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.
       * @param {Object} value Optional, the value associated with the key (in case it was a string).
       * @param {String} option The updated option name.
       *
       * @return	{Object} result object
       *	The result objects has an 'op' property, indicating of this is a SET or GET operation.
       *		GET:
       *		- found: a flag indicating if the key was found or not.
       *		- value: the property value.
       *		SET:
       *		- items: a list of key value pairs of the properties being set.
       *				each contains:
       *					- found: a flag indicating if the key was found or not.
       *					- key: the property key.
       *					- value: the property value.
       */
      update = function(instance, obj, callback, key, value) {
        var args, old, prop, result;
        result = {
          op: undefined,
          items: []
        };
        if (typeof value == 'undefined' && typeof key == 'string') {
          result.op = 'get';
          if (obj.hasOwnProperty(key)) {
            result.found = true;
            result.value = obj[key];
          } else {
            result.found = false;
            result.value = undefined;
          }
        } else {
          old = void 0;
          result.op = 'set';
          if (typeof key == 'object') {
            args = key;
            for (prop in args) {
              if (obj.hasOwnProperty(prop)) {
                if (obj[prop] != args[prop]) {
                  old = obj[prop];
                  obj[prop] = args[prop];
                  callback.call(instance, prop, old, args[prop]);
                }
                result.items.push({
                  'key': prop,
                  'value': args[prop],
                  'found': true
                });
              } else {
                result.items.push({
                  'key': prop,
                  'value': args[prop],
                  'found': false
                });
              }
            }
          } else if (typeof key == 'string') {
            if (obj.hasOwnProperty(key)) {
              if (obj[key] != value) {
                old = obj[key];
                obj[key] = value;
                callback.call(instance, key, old, value);
              }
              result.items.push({
                'key': key,
                'value': value,
                'found': true
              });
            } else {
              result.items.push({
                'key': key,
                'value': value,
                'found': false
              });
            }
          } else {
            throw new Error('args must be a string or object');
          }
        }
        return result;
      };

      /**
       * Triggers a close event.
       *
       * @param {Object} instance	The dilog instance.
       *
       * @return {undefined}
       */
      triggerClose = function(instance) {
        var found;
        found = void 0;
        triggerCallback(instance, function(button) {
          return found = button.invokeOnClose == true;
        });
        if (!found && instance.isOpen()) {
          instance.close();
        }
      };

      /**
       * Dialogs commands event handler, attached to the dialog commands element.
       *
       * @param {Event} event	DOM event object.
       * @param {Object} instance	The dilog instance.
       *
       * @return {undefined}
       */
      commandsClickHandler = function(event, instance) {
        var target;
        target = event.srcElement || event.target;
        switch (target) {
          case instance.elements.commands.pin:
            if (!instance.isPinned()) {
              pin(instance);
            } else {
              unpin(instance);
            }
            break;
          case instance.elements.commands.maximize:
            if (!instance.isMaximized()) {
              maximize(instance);
            } else {
              restore(instance);
            }
            break;
          case instance.elements.commands.close:
            triggerClose(instance);
        }
        return false;
      };

      /**
       * Helper: pins the modeless dialog.
       *
       * @param {Object} instance	The dialog instance.
       *
       * @return {undefined}
       */
      pin = function(instance) {
        instance.set('pinned', true);
      };

      /**
       * Helper: unpins the modeless dialog.
       *
       * @param {Object} instance	The dilog instance.
       *
       * @return {undefined}
       */
      unpin = function(instance) {
        instance.set('pinned', false);
      };

      /**
       * Helper: enlarges the dialog to fill the entire screen.
       *
       * @param {Object} instance	The dilog instance.
       *
       * @return {undefined}
       */
      maximize = function(instance) {
        dispatchEvent('onmaximize', instance);
        addClass(instance.elements.root, classes.maximized);
        if (instance.isOpen()) {
          ensureNoOverflow();
        }
        dispatchEvent('onmaximized', instance);
      };

      /**
       * Helper: returns the dialog to its former size.
       *
       * @param {Object} instance	The dilog instance.
       *
       * @return {undefined}
       */
      restore = function(instance) {
        dispatchEvent('onrestore', instance);
        removeClass(instance.elements.root, classes.maximized);
        if (instance.isOpen()) {
          ensureNoOverflow();
        }
        dispatchEvent('onrestored', instance);
      };

      /**
       * Show or hide the maximize box.
       *
       * @param {Object} instance The dilog instance.
       * @param {Boolean} on True to add the behavior, removes it otherwise.
       *
       * @return {undefined}
       */
      updatePinnable = function(instance) {
        if (instance.get('pinnable')) {
          addClass(instance.elements.root, classes.pinnable);
        } else {
          removeClass(instance.elements.root, classes.pinnable);
        }
      };

      /**
       * Helper: Fixes the absolutly positioned modal div position.
       *
       * @param {Object} instance The dialog instance.
       *
       * @return {undefined}
       */
      addAbsPositionFix = function(instance) {
        var scrollLeft;
        scrollLeft = getScrollLeft();
        instance.elements.modal.style.marginTop = getScrollTop() + 'px';
        instance.elements.modal.style.marginLeft = scrollLeft + 'px';
        instance.elements.modal.style.marginRight = -scrollLeft + 'px';
      };

      /**
       * Helper: Removes the absolutly positioned modal div position fix.
       *
       * @param {Object} instance The dialog instance.
       *
       * @return {undefined}
       */
      removeAbsPositionFix = function(instance) {
        var top;
        var left, marginLeft, marginTop;
        marginTop = parseInt(instance.elements.modal.style.marginTop, 10);
        marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);
        instance.elements.modal.style.marginTop = '';
        instance.elements.modal.style.marginLeft = '';
        instance.elements.modal.style.marginRight = '';
        if (instance.isOpen()) {
          top = 0;
          left = 0;
          if (instance.elements.dialog.style.top != '') {
            top = parseInt(instance.elements.dialog.style.top, 10);
          }
          instance.elements.dialog.style.top = top + marginTop - getScrollTop() + 'px';
          if (instance.elements.dialog.style.left != '') {
            left = parseInt(instance.elements.dialog.style.left, 10);
          }
          instance.elements.dialog.style.left = left + marginLeft - getScrollLeft() + 'px';
        }
      };

      /**
       * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.
       *
       * @param {Object} instance The dialog instance.
       *
       * @return {undefined}
       */
      updateAbsPositionFix = function(instance) {
        if (!instance.get('modal') && !instance.get('pinned')) {
          addAbsPositionFix(instance);
        } else {
          removeAbsPositionFix(instance);
        }
      };

      /**
       * Toggles the dialog position lock | modeless only.
       *
       * @param {Object} instance The dilog instance.
       * @param {Boolean} on True to make it modal, false otherwise.
       *
       * @return {undefined}
       */
      updatePinned = function(instance) {
        if (instance.get('pinned')) {
          removeClass(instance.elements.root, classes.unpinned);
          if (instance.isOpen()) {
            removeAbsPositionFix(instance);
          }
        } else {
          addClass(instance.elements.root, classes.unpinned);
          if (instance.isOpen() && !instance.isModal()) {
            addAbsPositionFix(instance);
          }
        }
      };

      /**
       * Show or hide the maximize box.
       *
       * @param {Object} instance The dilog instance.
       * @param {Boolean} on True to add the behavior, removes it otherwise.
       *
       * @return {undefined}
       */
      updateMaximizable = function(instance) {
        if (instance.get('maximizable')) {
          addClass(instance.elements.root, classes.maximizable);
        } else {
          removeClass(instance.elements.root, classes.maximizable);
        }
      };

      /**
       * Show or hide the close box.
       *
       * @param {Object} instance The dilog instance.
       * @param {Boolean} on True to add the behavior, removes it otherwise.
       *
       * @return {undefined}
       */
      updateClosable = function(instance) {
        if (instance.get('closable')) {
          addClass(instance.elements.root, classes.closable);
          bindClosableEvents(instance);
        } else {
          removeClass(instance.elements.root, classes.closable);
          unbindClosableEvents(instance);
        }
      };

      /**
       * Helper: closes the modal dialog when clicking the modal
       *
       * @param {Event} event	DOM event object.
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      modalClickHandler = function(event, instance) {
        var target;
        target = event.srcElement || event.target;
        if (!cancelClick && target == instance.elements.modal && instance.get('closableByDimmer') == true) {
          triggerClose(instance);
        }
        cancelClick = false;
        return false;
      };

      /**
       * Helper: triggers a button callback
       *
       * @param {Object}		The dilog instance.
       * @param {Function}	Callback to check which button triggered the event.
       *
       * @return {undefined}
       */
      triggerCallback = function(instance, check) {
        var button, closeEvent, idx;
        idx = 0;
        while (idx < instance.__internal.buttons.length) {
          button = instance.__internal.buttons[idx];
          if (!button.element.disabled && check(button)) {
            closeEvent = createCloseEvent(idx, button);
            if (typeof instance.callback == 'function') {
              instance.callback.apply(instance, [closeEvent]);
            }
            if (closeEvent.cancel == false) {
              instance.close();
            }
            break;
          }
          idx += 1;
        }
      };

      /**
       * Clicks event handler, attached to the dialog footer.
       *
       * @param {Event}		DOM event object.
       * @param {Object}		The dilog instance.
       *
       * @return {undefined}
       */
      buttonsClickHandler = function(event, instance) {
        var target;
        target = event.srcElement || event.target;
        triggerCallback(instance, function(button) {
          return button.element == target && (cancelKeyup = true);
        });
      };

      /**
       * Keyup event handler, attached to the document.body
       *
       * @param {Event}		DOM event object.
       * @param {Object}		The dilog instance.
       *
       * @return {undefined}
       */
      keyupHandler = function(event) {
        var instance, keyCode;
        if (cancelKeyup) {
          cancelKeyup = false;
          return;
        }
        instance = openDialogs[openDialogs.length - 1];
        keyCode = event.keyCode;
        if (instance.__internal.buttons.length == 0 && keyCode == keys.ESC && instance.get('closable') == true) {
          triggerClose(instance);
          return false;
        } else if (usedKeys.indexOf(keyCode) > -1) {
          triggerCallback(instance, function(button) {
            return button.key == keyCode;
          });
          return false;
        }
      };

      /**
      * Keydown event handler, attached to the document.body
      *
      * @param {Event}		DOM event object.
      * @param {Object}		The dilog instance.
      *
      * @return {undefined}
       */
      keydownHandler = function(event) {
        var buttons, instance, keyCode, x;
        instance = openDialogs[openDialogs.length - 1];
        keyCode = event.keyCode;
        if (keyCode == keys.LEFT || keyCode == keys.RIGHT) {
          buttons = instance.__internal.buttons;
          x = 0;
          while (x < buttons.length) {
            if (document.activeElement == buttons[x].element) {
              switch (keyCode) {
                case keys.LEFT:
                  buttons[(x || buttons.length) - 1].element.focus();
                  return;
                case keys.RIGHT:
                  buttons[(x + 1) % buttons.length].element.focus();
                  return;
              }
            }
            x += 1;
          }
        } else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {
          event.preventDefault();
          event.stopPropagation();
          triggerCallback(instance, function(button) {
            return button.key == keyCode;
          });
          return false;
        }
      };

      /**
       * Sets focus to proper dialog element
       *
       * @param {Object} instance The dilog instance.
       * @param {Node} [resetTarget=undefined] DOM element to reset focus to.
       *
       * @return {undefined}
       */
      setFocus = function(instance, resetTarget) {
        var element, focus;
        if (resetTarget) {
          resetTarget.focus();
        } else {
          focus = instance.__internal.focus;
          element = focus.element;
          switch (typeof focus.element) {
            case 'number':
              if (instance.__internal.buttons.length > focus.element) {
                if (instance.get('basic') == true) {
                  element = instance.elements.reset[0];
                } else {
                  element = instance.__internal.buttons[focus.element].element;
                }
              }
              break;
            case 'string':
              element = instance.elements.body.querySelector(focus.element);
              break;
            case 'function':
              element = focus.element.call(instance);
          }
          if ((typeof element == 'undefined' || element == null) && instance.__internal.buttons.length == 0) {
            element = instance.elements.reset[0];
          }
          if (element && element.focus) {
            element.focus();
            if (focus.select && element.select) {
              element.select();
            }
          }
        }
      };

      /**
       * Focus event handler, attached to document.body and dialogs own reset links.
       * handles the focus for modal dialogs only.
       *
       * @param {Event} event DOM focus event object.
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      onReset = function(event, instance) {
        var lastResetElement, resetTarget, target, x;
        if (!instance) {
          x = openDialogs.length - 1;
          while (x > -1) {
            if (openDialogs[x].isModal()) {
              instance = openDialogs[x];
              break;
            }
            x -= 1;
          }
        }
        if (instance && instance.isModal()) {
          resetTarget = void 0;
          target = event.srcElement || event.target;
          lastResetElement = target == instance.elements.reset[1] || instance.__internal.buttons.length == 0 && target == document.body;
          if (lastResetElement) {
            if (instance.get('maximizable')) {
              resetTarget = instance.elements.commands.maximize;
            } else if (instance.get('closable')) {
              resetTarget = instance.elements.commands.close;
            }
          }
          if (resetTarget == undefined) {
            if (typeof instance.__internal.focus.element == 'number') {
              if (target == instance.elements.reset[0]) {
                resetTarget = instance.elements.buttons.auxiliary.firstChild || instance.elements.buttons.primary.firstChild;
              } else if (lastResetElement) {
                resetTarget = instance.elements.reset[0];
              }
            } else {
              if (target == instance.elements.reset[0]) {
                resetTarget = instance.elements.buttons.primary.lastChild || instance.elements.buttons.auxiliary.lastChild;
              }
            }
          }
          setFocus(instance, resetTarget);
        }
      };

      /**
       * Transition in transitionend event handler.
       *
       * @param {Event}		TransitionEnd event object.
       * @param {Object}		The dilog instance.
       *
       * @return {undefined}
       */
      handleTransitionInEvent = function(event, instance) {
        clearTimeout(instance.__internal.timerIn);
        setFocus(instance);
        restoreScrollPosition();
        cancelKeyup = false;
        dispatchEvent('onfocus', instance);
        Off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);
        removeClass(instance.elements.root, classes.animationIn);
      };

      /**
       * Transition out transitionend event handler.
       *
       * @param {Event}		TransitionEnd event object.
       * @param {Object}		The dilog instance.
       *
       * @return {undefined}
       */
      handleTransitionOutEvent = function(event, instance) {
        clearTimeout(instance.__internal.timerOut);
        Off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);
        resetMove(instance);
        resetResize(instance);
        if (instance.isMaximized() && !instance.get('startMaximized')) {
          restore(instance);
        }
        if (alertify.defaults.maintainFocus && instance.__internal.activeElement) {
          instance.__internal.activeElement.focus();
          instance.__internal.activeElement = null;
        }
        if (typeof instance.__internal.destroy == 'function') {
          instance.__internal.destroy.apply(instance);
        }
      };

      /**
       * Helper: sets the element top/left coordinates
       *
       * @param {Event} event	DOM event object.
       * @param {Node} element The element being moved.
       *
       * @return {undefined}
       */
      moveElement = function(event, element) {
        var top;
        var left;
        left = event[xProp] - offsetX;
        top = event[yProp] - offsetY;
        if (refreshTop) {
          top -= document.body.scrollTop;
        }
        element.style.left = left + 'px';
        element.style.top = top + 'px';
      };

      /**
       * Helper: sets the element top/left coordinates within screen bounds
       *
       * @param {Event} event	DOM event object.
       * @param {Node} element The element being moved.
       *
       * @return {undefined}
       */
      moveElementBounded = function(event, element) {
        var top;
        var left;
        left = event[xProp] - offsetX;
        top = event[yProp] - offsetY;
        if (refreshTop) {
          top -= document.body.scrollTop;
        }
        element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';
        if (refreshTop) {
          element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';
        } else {
          element.style.top = Math.max(bounds.minTop, top) + 'px';
        }
      };

      /**
       * Triggers the start of a move event, attached to the header element mouse down event.
       * Adds no-selection class to the body, disabling selection while moving.
       *
       * @param {Event} event	DOM event object.
       * @param {Object} instance The dilog instance.
       *
       * @return {Boolean} false
       */
      beginMove = function(event, instance) {
        var top;
        var current, element, eventSrc, left, offsetLeft, offsetTop;
        if (resizable == null && !instance.isMaximized() && instance.get('movable')) {
          eventSrc = void 0;
          left = 0;
          top = 0;
          if (event.type == 'touchstart') {
            event.preventDefault();
            eventSrc = event.targetTouches[0];
            xProp = 'clientX';
            yProp = 'clientY';
          } else if (event.button == 0) {
            eventSrc = event;
          }
          if (eventSrc) {
            element = instance.elements.dialog;
            addClass(element, classes.capture);
            if (element.style.left) {
              left = parseInt(element.style.left, 10);
            }
            if (element.style.top) {
              top = parseInt(element.style.top, 10);
            }
            offsetX = eventSrc[xProp] - left;
            offsetY = eventSrc[yProp] - top;
            if (instance.isModal()) {
              offsetY += instance.elements.modal.scrollTop;
            } else if (instance.isPinned()) {
              offsetY -= document.body.scrollTop;
            }
            if (instance.get('moveBounded')) {
              current = element;
              offsetLeft = -left;
              offsetTop = -top;
              while (true) {
                offsetLeft += current.offsetLeft;
                offsetTop += current.offsetTop;
                if (!(current = current.offsetParent)) {
                  break;
                }
              }
              bounds = {
                maxLeft: offsetLeft,
                minLeft: -offsetLeft,
                maxTop: document.documentElement.clientHeight - element.clientHeight - offsetTop,
                minTop: -offsetTop
              };
              moveDelegate = moveElementBounded;
            } else {
              bounds = null;
              moveDelegate = moveElement;
            }
            dispatchEvent('onmove', instance);
            refreshTop = !instance.isModal() && instance.isPinned();
            movable = instance;
            moveDelegate(eventSrc, element);
            addClass(document.body, classes.noSelection);
            return false;
          }
        }
      };

      /**
       * The actual move handler,  attached to document.body mousemove event.
       *
       * @param {Event} event	DOM event object.
       *
       * @return {undefined}
       */
      move = function(event) {
        var eventSrc;
        if (movable) {
          eventSrc = void 0;
          if (event.type == 'touchmove') {
            event.preventDefault();
            eventSrc = event.targetTouches[0];
          } else if (event.button == 0) {
            eventSrc = event;
          }
          if (eventSrc) {
            moveDelegate(eventSrc, movable.elements.dialog);
          }
        }
      };

      /**
       * Triggers the end of a move event,  attached to document.body mouseup event.
       * Removes no-selection class from document.body, allowing selection.
       *
       * @return {undefined}
       */
      endMove = function() {
        var instance;
        if (movable) {
          instance = movable;
          movable = bounds = null;
          removeClass(document.body, classes.noSelection);
          removeClass(instance.elements.dialog, classes.capture);
          dispatchEvent('onmoved', instance);
        }
      };

      /**
       * Resets any changes made by moving the element to its original state,
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      resetMove = function(instance) {
        var element;
        movable = null;
        element = instance.elements.dialog;
        element.style.left = element.style.top = '';
      };

      /**
       * Updates the dialog move behavior.
       *
       * @param {Object} instance The dilog instance.
       * @param {Boolean} on True to add the behavior, removes it otherwise.
       *
       * @return {undefined}
       */
      updateMovable = function(instance) {
        if (instance.get('movable')) {
          addClass(instance.elements.root, classes.movable);
          if (instance.isOpen()) {
            bindMovableEvents(instance);
          }
        } else {
          resetMove(instance);
          removeClass(instance.elements.root, classes.movable);
          if (instance.isOpen()) {
            unbindMovableEvents(instance);
          }
        }
      };

      /**
       * Helper: sets the element width/height and updates left coordinate if neccessary.
       *
       * @param {Event} event	DOM mousemove event object.
       * @param {Node} element The element being moved.
       * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.
       *
       * @return {undefined}
       */
      resizeElement = function(event, element, pageRelative) {
        var X, Y, current, diff, isRTL, offsetLeft, offsetTop;
        current = element;
        offsetLeft = 0;
        offsetTop = 0;
        while (true) {
          offsetLeft += current.offsetLeft;
          offsetTop += current.offsetTop;
          if (!(current = current.offsetParent)) {
            break;
          }
        }
        X = void 0;
        Y = void 0;
        if (pageRelative == true) {
          X = event.pageX;
          Y = event.pageY;
        } else {
          X = event.clientX;
          Y = event.clientY;
        }
        isRTL = isRightToLeft();
        if (isRTL) {
          X = document.body.offsetWidth - X;
          if (!isNaN(startingLeft)) {
            offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;
          }
        }
        element.style.height = Y - offsetTop + handleOffset + 'px';
        element.style.width = X - offsetLeft + handleOffset + 'px';
        if (!isNaN(startingLeft)) {
          diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;
          if (isRTL) {
            diff *= -1;
          }
          if (element.offsetWidth > startingWidth) {
            element.style.left = startingLeft + diff + 'px';
          } else if (element.offsetWidth >= minWidth) {
            element.style.left = startingLeft - diff + 'px';
          }
        }
      };

      /**
       * Triggers the start of a resize event, attached to the resize handle element mouse down event.
       * Adds no-selection class to the body, disabling selection while moving.
       *
       * @param {Event} event	DOM event object.
       * @param {Object} instance The dilog instance.
       *
       * @return {Boolean} false
       */
      beginResize = function(event, instance) {
        var element, eventSrc;
        if (!instance.isMaximized()) {
          eventSrc = void 0;
          if (event.type == 'touchstart') {
            event.preventDefault();
            eventSrc = event.targetTouches[0];
          } else if (event.button == 0) {
            eventSrc = event;
          }
          if (eventSrc) {
            dispatchEvent('onresize', instance);
            resizable = instance;
            handleOffset = instance.elements.resizeHandle.offsetHeight / 2;
            element = instance.elements.dialog;
            addClass(element, classes.capture);
            startingLeft = parseInt(element.style.left, 10);
            element.style.height = element.offsetHeight + 'px';
            element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';
            element.style.width = (startingWidth = element.offsetWidth) + 'px';
            if (element.style.maxWidth != 'none') {
              element.style.minWidth = (minWidth = element.offsetWidth) + 'px';
            }
            element.style.maxWidth = 'none';
            addClass(document.body, classes.noSelection);
            return false;
          }
        }
      };

      /**
       * The actual resize handler,  attached to document.body mousemove event.
       *
       * @param {Event} event	DOM event object.
       *
       * @return {undefined}
       */
      resize = function(event) {
        var eventSrc;
        if (resizable) {
          eventSrc = void 0;
          if (event.type == 'touchmove') {
            event.preventDefault();
            eventSrc = event.targetTouches[0];
          } else if (event.button == 0) {
            eventSrc = event;
          }
          if (eventSrc) {
            resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));
          }
        }
      };

      /**
       * Triggers the end of a resize event,  attached to document.body mouseup event.
       * Removes no-selection class from document.body, allowing selection.
       *
       * @return {undefined}
       */
      endResize = function() {
        var instance;
        if (resizable) {
          instance = resizable;
          resizable = null;
          removeClass(document.body, classes.noSelection);
          removeClass(instance.elements.dialog, classes.capture);
          cancelClick = true;
          dispatchEvent('onresized', instance);
        }
      };

      /**
       * Resets any changes made by resizing the element to its original state.
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      resetResize = function(instance) {
        var element;
        resizable = null;
        element = instance.elements.dialog;
        if (element.style.maxWidth == 'none') {
          element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';
          startingLeft = Number.Nan;
          startingWidth = minWidth = handleOffset = 0;
        }
      };

      /**
       * Updates the dialog move behavior.
       *
       * @param {Object} instance The dilog instance.
       * @param {Boolean} on True to add the behavior, removes it otherwise.
       *
       * @return {undefined}
       */
      updateResizable = function(instance) {
        if (instance.get('resizable')) {
          addClass(instance.elements.root, classes.resizable);
          if (instance.isOpen()) {
            bindResizableEvents(instance);
          }
        } else {
          resetResize(instance);
          removeClass(instance.elements.root, classes.resizable);
          if (instance.isOpen()) {
            unbindResizableEvents(instance);
          }
        }
      };

      /**
       * Reset move/resize on window resize.
       *
       * @param {Event} event	window resize event object.
       *
       * @return {undefined}
       */
      windowResize = function() {
        var instance, x;
        x = 0;
        while (x < openDialogs.length) {
          instance = openDialogs[x];
          if (instance.get('autoReset')) {
            resetMove(instance);
            resetResize(instance);
          }
          x += 1;
        }
      };

      /**
       * Bind dialogs events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      bindEvents = function(instance) {
        if (openDialogs.length == 1) {
          On(window, 'resize', windowResize);
          On(document.body, 'keyup', keyupHandler);
          On(document.body, 'keydown', keydownHandler);
          On(document.body, 'focus', onReset);
          On(document.documentElement, 'mousemove', move);
          On(document.documentElement, 'touchmove', move);
          On(document.documentElement, 'mouseup', endMove);
          On(document.documentElement, 'touchend', endMove);
          On(document.documentElement, 'mousemove', resize);
          On(document.documentElement, 'touchmove', resize);
          On(document.documentElement, 'mouseup', endResize);
          On(document.documentElement, 'touchend', endResize);
        }
        On(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);
        On(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);
        On(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);
        On(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);
        cancelKeyup = true;
        On(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);
        if (!instance.get('modal')) {
          bindModelessEvents(instance);
        }
        if (instance.get('resizable')) {
          bindResizableEvents(instance);
        }
        if (instance.get('movable')) {
          bindMovableEvents(instance);
        }
      };

      /**
       * Unbind dialogs events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      unbindEvents = function(instance) {
        if (openDialogs.length == 1) {
          Off(window, 'resize', windowResize);
          Off(document.body, 'keyup', keyupHandler);
          Off(document.body, 'keydown', keydownHandler);
          Off(document.body, 'focus', onReset);
          Off(document.documentElement, 'mousemove', move);
          Off(document.documentElement, 'mouseup', endMove);
          Off(document.documentElement, 'mousemove', resize);
          Off(document.documentElement, 'mouseup', endResize);
        }
        Off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);
        Off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);
        Off(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);
        Off(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);
        On(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);
        if (!instance.get('modal')) {
          unbindModelessEvents(instance);
        }
        if (instance.get('movable')) {
          unbindMovableEvents(instance);
        }
        if (instance.get('resizable')) {
          unbindResizableEvents(instance);
        }
      };

      /**
       * Bind modeless specific events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      bindModelessEvents = function(instance) {
        On(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);
      };

      /**
       * Unbind modeless specific events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      unbindModelessEvents = function(instance) {
        Off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);
      };

      /**
       * Bind movable specific events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      bindMovableEvents = function(instance) {
        On(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);
        On(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);
      };

      /**
       * Unbind movable specific events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      unbindMovableEvents = function(instance) {
        Off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);
        Off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);
      };

      /**
       * Bind resizable specific events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      bindResizableEvents = function(instance) {
        On(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);
        On(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);
      };

      /**
       * Unbind resizable specific events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      unbindResizableEvents = function(instance) {
        Off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);
        Off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);
      };

      /**
       * Bind closable events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      bindClosableEvents = function(instance) {
        On(instance.elements.modal, 'click', instance.__internal.modalClickHandler);
      };

      /**
       * Unbind closable specific events
       *
       * @param {Object} instance The dilog instance.
       *
       * @return {undefined}
       */
      unbindClosableEvents = function(instance) {
        Off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);
      };
      return {
        __init: initialize,
        isOpen: function() {
          return this.__internal.isOpen;
        },
        isModal: function() {
          return this.elements.root.className.indexOf(classes.modeless) < 0;
        },
        isMaximized: function() {
          return this.elements.root.className.indexOf(classes.maximized) > -1;
        },
        isPinned: function() {
          return this.elements.root.className.indexOf(classes.unpinned) < 0;
        },
        maximize: function() {
          if (!this.isMaximized()) {
            maximize(this);
          }
          return this;
        },
        restore: function() {
          if (this.isMaximized()) {
            restore(this);
          }
          return this;
        },
        pin: function() {
          if (!this.isPinned()) {
            pin(this);
          }
          return this;
        },
        unpin: function() {
          if (this.isPinned()) {
            unpin(this);
          }
          return this;
        },
        bringToFront: function() {
          bringToFront(null, this);
          return this;
        },
        moveTo: function(x, y) {
          var top;
          var current, element, left, offsetLeft, offsetTop;
          if (!isNaN(x) && !isNaN(y)) {
            dispatchEvent('onmove', this);
            element = this.elements.dialog;
            current = element;
            offsetLeft = 0;
            offsetTop = 0;
            if (element.style.left) {
              offsetLeft -= parseInt(element.style.left, 10);
            }
            if (element.style.top) {
              offsetTop -= parseInt(element.style.top, 10);
            }
            while (true) {
              offsetLeft += current.offsetLeft;
              offsetTop += current.offsetTop;
              if (!(current = current.offsetParent)) {
                break;
              }
            }
            left = x - offsetLeft;
            top = y - offsetTop;
            if (isRightToLeft()) {
              left *= -1;
            }
            element.style.left = left + 'px';
            element.style.top = top + 'px';
            dispatchEvent('onmoved', this);
          }
          return this;
        },
        resizeTo: function(width, height) {
          var element, h, regex, w;
          w = parseFloat(width);
          h = parseFloat(height);
          regex = /(\d*\.\d+|\d+)%/;
          if (!isNaN(w) && !isNaN(h) && this.get('resizable') == true) {
            dispatchEvent('onresize', this);
            if (('' + width).match(regex)) {
              w = w / 100 * document.documentElement.clientWidth;
            }
            if (('' + height).match(regex)) {
              h = h / 100 * document.documentElement.clientHeight;
            }
            element = this.elements.dialog;
            if (element.style.maxWidth != 'none') {
              element.style.minWidth = (minWidth = element.offsetWidth) + 'px';
            }
            element.style.maxWidth = 'none';
            element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';
            element.style.width = w + 'px';
            element.style.height = h + 'px';
            dispatchEvent('onresized', this);
          }
          return this;
        },
        setting: function(key, value) {
          var callback, item, result, self, x;
          self = this;
          result = update(this, this.__internal.options, (function(k, o, n) {
            optionUpdated(self, k, o, n);
          }), key, value);
          if (result.op == 'get') {
            if (result.found) {
              return result.value;
            } else if (typeof this.settings != 'undefined') {
              return update(this, this.settings, this.settingUpdated || null, key, value).value;
            } else {
              return undefined;
            }
          } else if (result.op == 'set') {
            if (result.items.length > 0) {
              callback = this.settingUpdated || function() {};
              x = 0;
              while (x < result.items.length) {
                item = result.items[x];
                if (!item.found && typeof this.settings != 'undefined') {
                  update(this, this.settings, callback, item.key, item.value);
                }
                x += 1;
              }
            }
            return this;
          }
        },
        set: function(key, value) {
          this.setting(key, value);
          return this;
        },
        get: function(key) {
          return this.setting(key);
        },
        setHeader: function(content) {
          if (typeof content == 'string') {
            clearContents(this.elements.header);
            this.elements.header.innerHTML = content;
          } else if (content instanceof window.HTMLElement && this.elements.header.firstChild != content) {
            clearContents(this.elements.header);
            this.elements.header.appendChild(content);
          }
          return this;
        },
        setContent: function(content) {
          if (typeof content == 'string') {
            clearContents(this.elements.content);
            this.elements.content.innerHTML = content;
          } else if (content instanceof window.HTMLElement && this.elements.content.firstChild != content) {
            clearContents(this.elements.content);
            this.elements.content.appendChild(content);
          }
          return this;
        },
        showModal: function(className) {
          return this.show(true, className);
        },
        show: function(modal, className) {
          var root, self;
          initialize(this);
          if (!this.__internal.isOpen) {
            this.__internal.isOpen = true;
            openDialogs.push(this);
            if (alertify.defaults.maintainFocus) {
              this.__internal.activeElement = document.activeElement;
            }
            if (typeof this.prepare == 'function') {
              this.prepare();
            }
            bindEvents(this);
            if (modal != undefined) {
              this.set('modal', modal);
            }
            saveScrollPosition();
            ensureNoOverflow();
            if (typeof className == 'string' && className != '') {
              this.__internal.className = className;
              addClass(this.elements.root, className);
            }
            if (this.get('startMaximized')) {
              this.maximize();
            } else if (this.isMaximized()) {
              restore(this);
            }
            updateAbsPositionFix(this);
            removeClass(this.elements.root, classes.animationOut);
            addClass(this.elements.root, classes.animationIn);
            clearTimeout(this.__internal.timerIn);
            this.__internal.timerIn = setTimeout(this.__internal.transitionInHandler, transition.supported ? 1000 : 100);
            if (isSafari) {
              root = this.elements.root;
              root.style.display = 'none';
              setTimeout((function() {
                root.style.display = 'block';
              }), 0);
            }
            reflow = this.elements.root.offsetWidth;
            removeClass(this.elements.root, classes.hidden);
            if (typeof this.hooks.onshow == 'function') {
              this.hooks.onshow.call(this);
            }
            dispatchEvent('onshow', this);
          } else {
            resetMove(this);
            resetResize(this);
            addClass(this.elements.dialog, classes.shake);
            self = this;
            setTimeout((function() {
              removeClass(self.elements.dialog, classes.shake);
            }), 200);
          }
          return this;
        },
        close: function() {
          if (this.__internal.isOpen) {
            unbindEvents(this);
            removeClass(this.elements.root, classes.animationIn);
            addClass(this.elements.root, classes.animationOut);
            clearTimeout(this.__internal.timerOut);
            this.__internal.timerOut = setTimeout(this.__internal.transitionOutHandler, transition.supported ? 1000 : 100);
            addClass(this.elements.root, classes.hidden);
            reflow = this.elements.modal.offsetWidth;
            if (typeof this.__internal.className != 'undefined' && this.__internal.className != '') {
              removeClass(this.elements.root, this.__internal.className);
            }
            if (typeof this.hooks.onclose == 'function') {
              this.hooks.onclose.call(this);
            }
            dispatchEvent('onclose', this);
            openDialogs.splice(openDialogs.indexOf(this), 1);
            this.__internal.isOpen = false;
            ensureNoOverflow();
          }
          return this;
        },
        closeOthers: function() {
          alertify.closeAll(this);
          return this;
        },
        destroy: function() {
          if (this.__internal.isOpen) {
            this.__internal.destroy = function() {
              destruct(this, initialize);
            };
            this.close();
          } else {
            destruct(this, initialize);
          }
          return this;
        }
      };
    })();
    notifier = (function() {
      var classes, create, element, initialize, openInstances, popInstance, pushInstance, reflow, updatePosition;
      reflow = void 0;
      element = void 0;
      openInstances = [];
      classes = {
        base: 'alertify-notifier',
        message: 'ajs-message',
        top: 'ajs-top',
        right: 'ajs-right',
        bottom: 'ajs-bottom',
        left: 'ajs-left',
        visible: 'ajs-visible',
        hidden: 'ajs-hidden'
      };

      /**
       * Helper: initializes the notifier instance
       *
       */
      initialize = function(instance) {
        if (!instance.__internal) {
          instance.__internal = {
            position: alertify.defaults.notifier.position,
            delay: alertify.defaults.notifier.delay
          };
          element = document.createElement('DIV');
          updatePosition(instance);
        }
        if (element.parentNode != document.body) {
          document.body.appendChild(element);
        }
      };
      pushInstance = function(instance) {
        instance.__internal.pushed = true;
        openInstances.push(instance);
      };
      popInstance = function(instance) {
        openInstances.splice(openInstances.indexOf(instance), 1);
        instance.__internal.pushed = false;
      };

      /**
       * Helper: update the notifier instance position
       *
       */
      updatePosition = function(instance) {
        element.className = classes.base;
        switch (instance.__internal.position) {
          case 'top-right':
            addClass(element, classes.top + ' ' + classes.right);
            break;
          case 'top-left':
            addClass(element, classes.top + ' ' + classes.left);
            break;
          case 'bottom-left':
            addClass(element, classes.bottom + ' ' + classes.left);
            break;
          case 'bottom-right':
            addClass(element, classes.bottom + ' ' + classes.right);
        }
      };

      /**
      * creates a new notification message
      *
      * @param  {DOMElement} message	The notifier message element
      * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.
      * @param  {Function} callback A callback function to be invoked when the message is dismissed.
      *
      * @return {undefined}
       */
      create = function(div, callback) {
        var initialize;
        var clearTimers, clickDelegate, transitionDone;
        clickDelegate = function(event, instance) {
          instance.dismiss(true);
        };
        transitionDone = function(event, instance) {
          Off(instance.element, transition.type, transitionDone);
          element.removeChild(instance.element);
        };
        initialize = function(instance) {
          if (!instance.__internal) {
            instance.__internal = {
              pushed: false,
              delay: undefined,
              timer: undefined,
              clickHandler: undefined,
              transitionEndHandler: undefined,
              transitionTimeout: undefined
            };
            instance.__internal.clickHandler = delegate(instance, clickDelegate);
            instance.__internal.transitionEndHandler = delegate(instance, transitionDone);
          }
          return instance;
        };
        clearTimers = function(instance) {
          clearTimeout(instance.__internal.timer);
          clearTimeout(instance.__internal.transitionTimeout);
        };
        return initialize({
          element: div,
          push: function(_content, _wait) {
            var content, wait;
            if (!this.__internal.pushed) {
              pushInstance(this);
              clearTimers(this);
              content = void 0;
              wait = void 0;
              switch (arguments.length) {
                case 0:
                  wait = this.__internal.delay;
                  break;
                case 1:
                  if (typeof _content == 'number') {
                    wait = _content;
                  } else {
                    content = _content;
                    wait = this.__internal.delay;
                  }
                  break;
                case 2:
                  content = _content;
                  wait = _wait;
              }
              if (typeof content != 'undefined') {
                this.setContent(content);
              }
              if (notifier.__internal.position.indexOf('top') < 0) {
                element.appendChild(this.element);
              } else {
                element.insertBefore(this.element, element.firstChild);
              }
              reflow = this.element.offsetWidth;
              addClass(this.element, classes.visible);
              On(this.element, 'click', this.__internal.clickHandler);
              return this.delay(wait);
            }
            return this;
          },
          ondismiss: function() {},
          callback: callback,
          dismiss: function(clicked) {
            if (this.__internal.pushed) {
              clearTimers(this);
              if (!(typeof this.ondismiss == 'function' && this.ondismiss.call(this) == false)) {
                Off(this.element, 'click', this.__internal.clickHandler);
                if (typeof this.element != 'undefined' && this.element.parentNode == element) {
                  this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);
                  removeClass(this.element, classes.visible);
                  if (typeof this.callback == 'function') {
                    this.callback.call(this, clicked);
                  }
                }
                popInstance(this);
              }
            }
            return this;
          },
          delay: function(wait) {
            var self;
            clearTimers(this);
            this.__internal.delay = typeof wait != 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;
            if (this.__internal.delay > 0) {
              self = this;
              this.__internal.timer = setTimeout((function() {
                self.dismiss();
              }), this.__internal.delay * 1000);
            }
            return this;
          },
          setContent: function(content) {
            if (typeof content == 'string') {
              clearContents(this.element);
              this.element.innerHTML = content;
            } else if (content instanceof window.HTMLElement && this.element.firstChild != content) {
              clearContents(this.element);
              this.element.appendChild(content);
            }
            return this;
          },
          dismissOthers: function() {
            notifier.dismissAll(this);
            return this;
          }
        });
      };
      return {
        setting: function(key, value) {
          initialize(this);
          if (typeof value == 'undefined') {
            return this.__internal[key];
          } else {
            switch (key) {
              case 'position':
                this.__internal.position = value;
                updatePosition(this);
                break;
              case 'delay':
                this.__internal.delay = value;
            }
          }
          return this;
        },
        set: function(key, value) {
          this.setting(key, value);
          return this;
        },
        get: function(key) {
          return this.setting(key);
        },
        create: function(type, callback) {
          var div;
          initialize(this);
          div = document.createElement('div');
          div.className = classes.message + (typeof type == 'string' && type != '' ? ' ajs-' + type : '');
          return create(div, callback);
        },
        dismissAll: function(except) {
          var clone, instance, x;
          clone = openInstances.slice(0);
          x = 0;
          while (x < clone.length) {
            instance = clone[x];
            if (except == undefined || except != instance) {
              instance.dismiss();
            }
            x += 1;
          }
        }
      };
    })();
    alertify = new Alertify;

    /**
    * Alert dialog definition
    *
    * invoked by:
    *	alertify.alert(message);
    *	alertify.alert(title, message);
    *	alertify.alert(message, onok);
    *	alertify.alert(title, message, onok);
     */
    alertify.dialog('alert', function() {
      return {
        main: function(_title, _message, _onok) {
          var message, onok, title;
          title = void 0;
          message = void 0;
          onok = void 0;
          switch (arguments.length) {
            case 1:
              message = _title;
              break;
            case 2:
              if (typeof _message == 'function') {
                message = _title;
                onok = _message;
              } else {
                title = _title;
                message = _message;
              }
              break;
            case 3:
              title = _title;
              message = _message;
              onok = _onok;
          }
          this.set('title', title);
          this.set('message', message);
          this.set('onok', onok);
          return this;
        },
        setup: function() {
          return {
            buttons: [
              {
                text: alertify.defaults.glossary.ok,
                key: keys.ESC,
                invokeOnClose: true,
                className: alertify.defaults.theme.ok
              }
            ],
            focus: {
              element: 0,
              select: false
            },
            options: {
              maximizable: false,
              resizable: false
            }
          };
        },
        build: function() {},
        prepare: function() {},
        setMessage: function(message) {
          this.setContent(message);
        },
        settings: {
          message: undefined,
          onok: undefined,
          label: undefined
        },
        settingUpdated: function(key, oldValue, newValue) {
          switch (key) {
            case 'message':
              this.setMessage(newValue);
              break;
            case 'label':
              if (this.__internal.buttons[0].element) {
                this.__internal.buttons[0].element.innerHTML = newValue;
              }
          }
        },
        callback: function(closeEvent) {
          var returnValue;
          if (typeof this.get('onok') == 'function') {
            returnValue = this.get('onok').call(this, closeEvent);
            if (typeof returnValue != 'undefined') {
              closeEvent.cancel = !returnValue;
            }
          }
        }
      };
    });

    /**
     * Confirm dialog object
     *
     *	alertify.confirm(message);
     *	alertify.confirm(message, onok);
     *	alertify.confirm(message, onok, oncancel);
     *	alertify.confirm(title, message, onok, oncancel);
     */
    alertify.dialog('confirm', function() {
      var autoConfirm, clearAutoConfirm, startAutoConfirm;
      autoConfirm = {
        timer: null,
        index: null,
        text: null,
        duration: null,
        task: function(event, self) {
          var button, closeEvent;
          if (self.isOpen()) {
            self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';
            autoConfirm.duration -= 1;
            if (autoConfirm.duration == -1) {
              clearAutoConfirm(self);
              button = self.__internal.buttons[autoConfirm.index];
              closeEvent = createCloseEvent(autoConfirm.index, button);
              if (typeof self.callback == 'function') {
                self.callback.apply(self, [closeEvent]);
              }
              if (closeEvent.close != false) {
                self.close();
              }
            }
          } else {
            clearAutoConfirm(self);
          }
        }
      };
      clearAutoConfirm = function(self) {
        if (autoConfirm.timer != null) {
          clearInterval(autoConfirm.timer);
          autoConfirm.timer = null;
          self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;
        }
      };
      startAutoConfirm = function(self, index, duration) {
        clearAutoConfirm(self);
        autoConfirm.duration = duration;
        autoConfirm.index = index;
        autoConfirm.text = self.__internal.buttons[index].element.innerHTML;
        autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);
        autoConfirm.task(null, self);
      };
      return {
        main: function(_title, _message, _onok, _oncancel) {
          var message, oncancel, onok, title;
          title = void 0;
          message = void 0;
          onok = void 0;
          oncancel = void 0;
          switch (arguments.length) {
            case 1:
              message = _title;
              break;
            case 2:
              message = _title;
              onok = _message;
              break;
            case 3:
              message = _title;
              onok = _message;
              oncancel = _onok;
              break;
            case 4:
              title = _title;
              message = _message;
              onok = _onok;
              oncancel = _oncancel;
          }
          this.set('title', title);
          this.set('message', message);
          this.set('onok', onok);
          this.set('oncancel', oncancel);
          return this;
        },
        setup: function() {
          return {
            buttons: [
              {
                text: alertify.defaults.glossary.ok,
                key: keys.ENTER,
                className: alertify.defaults.theme.ok
              }, {
                text: alertify.defaults.glossary.cancel,
                key: keys.ESC,
                invokeOnClose: true,
                className: alertify.defaults.theme.cancel
              }
            ],
            focus: {
              element: 0,
              select: false
            },
            options: {
              maximizable: false,
              resizable: false
            }
          };
        },
        build: function() {},
        prepare: function() {},
        setMessage: function(message) {
          this.setContent(message);
        },
        settings: {
          message: null,
          labels: null,
          onok: null,
          oncancel: null,
          defaultFocus: null,
          reverseButtons: null
        },
        settingUpdated: function(key, oldValue, newValue) {
          switch (key) {
            case 'message':
              this.setMessage(newValue);
              break;
            case 'labels':
              if ('ok' in newValue && this.__internal.buttons[0].element) {
                this.__internal.buttons[0].text = newValue.ok;
                this.__internal.buttons[0].element.innerHTML = newValue.ok;
              }
              if ('cancel' in newValue && this.__internal.buttons[1].element) {
                this.__internal.buttons[1].text = newValue.cancel;
                this.__internal.buttons[1].element.innerHTML = newValue.cancel;
              }
              break;
            case 'reverseButtons':
              if (newValue == true) {
                this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);
              } else {
                this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);
              }
              break;
            case 'defaultFocus':
              this.__internal.focus.element = newValue == 'ok' ? 0 : 1;
          }
        },
        callback: function(closeEvent) {
          var returnValue;
          clearAutoConfirm(this);
          returnValue = void 0;
          switch (closeEvent.index) {
            case 0:
              if (typeof this.get('onok') == 'function') {
                returnValue = this.get('onok').call(this, closeEvent);
                if (typeof returnValue != 'undefined') {
                  closeEvent.cancel = !returnValue;
                }
              }
              break;
            case 1:
              if (typeof this.get('oncancel') == 'function') {
                returnValue = this.get('oncancel').call(this, closeEvent);
                if (typeof returnValue != 'undefined') {
                  closeEvent.cancel = !returnValue;
                }
              }
          }
        },
        autoOk: function(duration) {
          startAutoConfirm(this, 0, duration);
          return this;
        },
        autoCancel: function(duration) {
          startAutoConfirm(this, 1, duration);
          return this;
        }
      };
    });

    /**
     * Prompt dialog object
     *
     * invoked by:
     *	alertify.prompt(message);
     *	alertify.prompt(message, value);
     *	alertify.prompt(message, value, onok);
     *	alertify.prompt(message, value, onok, oncancel);
     *	alertify.prompt(title, message, value, onok, oncancel);
     */
    alertify.dialog('prompt', function() {
      var input, p;
      input = document.createElement('INPUT');
      p = document.createElement('P');
      return {
        main: function(_title, _message, _value, _onok, _oncancel) {
          var message, oncancel, onok, title, value;
          title = void 0;
          message = void 0;
          value = void 0;
          onok = void 0;
          oncancel = void 0;
          switch (arguments.length) {
            case 1:
              message = _title;
              break;
            case 2:
              message = _title;
              value = _message;
              break;
            case 3:
              message = _title;
              value = _message;
              onok = _value;
              break;
            case 4:
              message = _title;
              value = _message;
              onok = _value;
              oncancel = _onok;
              break;
            case 5:
              title = _title;
              message = _message;
              value = _value;
              onok = _onok;
              oncancel = _oncancel;
          }
          this.set('title', title);
          this.set('message', message);
          this.set('value', value);
          this.set('onok', onok);
          this.set('oncancel', oncancel);
          return this;
        },
        setup: function() {
          return {
            buttons: [
              {
                text: alertify.defaults.glossary.ok,
                key: keys.ENTER,
                className: alertify.defaults.theme.ok
              }, {
                text: alertify.defaults.glossary.cancel,
                key: keys.ESC,
                invokeOnClose: true,
                className: alertify.defaults.theme.cancel
              }
            ],
            focus: {
              element: input,
              select: true
            },
            options: {
              maximizable: false,
              resizable: false
            }
          };
        },
        build: function() {
          input.className = alertify.defaults.theme.input;
          input.setAttribute('type', 'text');
          input.value = this.get('value');
          this.elements.content.appendChild(p);
          this.elements.content.appendChild(input);
        },
        prepare: function() {},
        setMessage: function(message) {
          if (typeof message == 'string') {
            clearContents(p);
            p.innerHTML = message;
          } else if (message instanceof window.HTMLElement && p.firstChild != message) {
            clearContents(p);
            p.appendChild(message);
          }
        },
        settings: {
          message: undefined,
          labels: undefined,
          onok: undefined,
          oncancel: undefined,
          value: '',
          type: 'text',
          reverseButtons: undefined
        },
        settingUpdated: function(key, oldValue, newValue) {
          switch (key) {
            case 'message':
              this.setMessage(newValue);
              break;
            case 'value':
              input.value = newValue;
              break;
            case 'type':
              switch (newValue) {
                case 'text':
                case 'color':
                case 'date':
                case 'datetime-local':
                case 'email':
                case 'month':
                case 'number':
                case 'password':
                case 'search':
                case 'tel':
                case 'time':
                case 'week':
                  input.type = newValue;
                  break;
                default:
                  input.type = 'text';
                  break;
              }
              break;
            case 'labels':
              if (newValue.ok && this.__internal.buttons[0].element) {
                this.__internal.buttons[0].element.innerHTML = newValue.ok;
              }
              if (newValue.cancel && this.__internal.buttons[1].element) {
                this.__internal.buttons[1].element.innerHTML = newValue.cancel;
              }
              break;
            case 'reverseButtons':
              if (newValue == true) {
                this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);
              } else {
                this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);
              }
          }
        },
        callback: function(closeEvent) {
          var returnValue;
          returnValue = void 0;
          switch (closeEvent.index) {
            case 0:
              this.settings.value = input.value;
              if (typeof this.get('onok') == 'function') {
                returnValue = this.get('onok').call(this, closeEvent, this.settings.value);
                if (typeof returnValue != 'undefined') {
                  closeEvent.cancel = !returnValue;
                }
              }
              break;
            case 1:
              if (typeof this.get('oncancel') == 'function') {
                returnValue = this.get('oncancel').call(this, closeEvent);
                if (typeof returnValue != 'undefined') {
                  closeEvent.cancel = !returnValue;
                }
              }
              if (!closeEvent.cancel) {
                input.value = this.settings.value;
              }
          }
        }
      };
    });
    if (typeof module == 'object' && typeof module.exports == 'object') {
      module.exports = alertify;
    } else if (typeof define == 'function' && define.amd) {
      define([], function() {
        return alertify;
      });
    } else if (!window.alertify) {
      window.alertify = alertify;
    }
  })(typeof window != 'undefined' ? window : this);

  "use strict";

  (function($W) {
    var CONTINFO, INFODEBUG, _ViewWizard, _createHandler, _generateTabbar, _generateTabbarBtn, _generateTabbarBtnCtxmenu;
    CONTINFO = 0;
    INFODEBUG = false;
    $W.Informes = function(obj) {
      var id, idApply, modulos, os;
      if (obj === null) {
        return;
      }
      if (!obj.id) {
        $W.Alert('id de informes no definido');
        return;
      }
      if (!obj.idApply) {
        $W.Alert('"idApply" Capa Contenedora no definida');
        return;
      }
      os = $W.Device().os.toLowerCase();
      id = obj.id;
      modulos = obj.modulos ? obj.modulos || {} : void 0;
      idApply = obj.idApply;
      INFODEBUG = typeof obj.debug !== 'undefined' ? obj.debug : false;
      $W("#" + idApply).append("<div id=\"Tbar_" + id + "\"></div>");
      $W("#" + idApply).append("<div id=\"BodyInformes_" + id + "\"></div>");
      return _generateTabbar(id, modulos);
    };
    _generateTabbar = function(id, modulos) {
      $W.Tbar({
        idApply: "Tbar_" + id,
        xtype: 'tbar'
      });
      return _generateTabbarBtn(id, modulos);
    };
    _generateTabbarBtn = function(id, modulos) {
      var arr, key, menu, results, width;
      results = [];
      for (key in modulos) {
        if (!hasProp1.call(modulos, key)) continue;
        arr = modulos[key];
        width = arr.width ? arr.width || '80' : void 0;
        menu = arr.informes ? arr.informes || {} : void 0;
        if (!arr.id) {
          $W.Alert("El Boton de modulos '" + arr.nombre + "' debe de tener el parametro 'id'");
        }
        $W.Add({
          idApply: "Tbar_" + id,
          items: [
            {
              xtype: "button",
              id: id + "_" + arr.id,
              text: arr.nombre,
              width: width,
              scale: "large",
              cls: arr.icon,
              iconAlign: "top"
            }
          ]
        });
        results.push(_generateTabbarBtnCtxmenu(id, arr.id, menu));
      }
      return results;
    };
    _generateTabbarBtnCtxmenu = function(id, id_, menu) {
      var R, idInfo, menus, orientacion, tamano, wizard;
      menus = [];
      R = 0;
      while (R < menu.length) {
        CONTINFO++;
        idInfo = typeof menu[R].id !== 'undefined' ? menu[R].id : CONTINFO;
        tamano = typeof menu[R].tamano !== 'undefined' ? menu[R].tamano : 'letter';
        orientacion = typeof menu[R].orientacion !== 'undefined' ? menu[R].orientacion : 'V';
        wizard = typeof menu[R].wizard !== 'undefined' ? menu[R].wizard : false;
        menus[R] = {
          text: menu[R].text,
          icon: menu[R].icon,
          handler: _createHandler(menu[R].file, id, menu[R].items, tamano, orientacion, idInfo, wizard)
        };
        R++;
      }
      return $W.CtxMenu({
        idApply: id + "_" + id_,
        type: 'click',
        position: 'B-L',
        width: 300,
        items: menus
      });
    };
    _createHandler = function(file, id, items, tamano, orientacion, idInfo, wizard) {
      return function() {
        return $W.Informes.charge(file, id, items, tamano, orientacion, idInfo, wizard);
      };
    };
    _ViewWizard = function(id) {
      var content, status, top, width;
      status = $W("#PanelWizard_" + id).style('display');
      if (status === 'none') {
        content = $W("#tbarInformes_" + id);
        console.log(content[0].clientWidth);
        width = content[0].clientWidth - 10;
        top = content[0].clientHeight + 71;
        $W("#PanelWizard_" + id).style('display', 'block');
        $W("#PanelWizard_" + id).style('width', width + "px");
        $W("#PanelWizard_" + id).style('top', top + "px");
      }
      if (status === 'block') {
        return $W("#PanelWizard_" + id).style('display', 'none');
      }
    };
    $W.Informes.charge = function(file, id, items, tamano, orientacion, idInfo, wizard) {
      var arr, arrayFilasA, cuantos, data, heigthBartab, heigthBartabPrinci, hoja, icon, idGeneral, key, largoPanelCampos, newHeight, newHeightTbar, required, value, width;
      idGeneral = id;
      id = id + "_" + idInfo;
      if (INFODEBUG === true) {
        console.clear();
        console.log("ID unico del Informe : " + idGeneral + "_" + idInfo);
        console.log("Tamaño de hoja : " + tamano);
        console.log("Orientacion de hoja : " + orientacion);
      }
      $W("#BodyInformes_" + idGeneral).html(" <div id=\"tbarInformes_" + id + "\" class=\"tbarInformes_\"> <div id=\"PanelScrollY_" + id + "\"> <div id=\"PanelCampos_" + id + "\" class=\"PanelCampos_\"></div> <div id=\"PanelBotones_" + id + "\" class=\"PanelBotones_\"></div> </div> <div id=\"PanelWizard_" + id + "\" class=\"PanelWizard_\"> <div class=\'Configuracion\'>Configuracion del Informe</div> </div> </div> <div id=\"PanelInforme_" + id + "\" class=\"PanelInforme_\"> <div id=\"InformeFile_" + id + "\" class=\"InformeFile_\" tamano=\"" + tamano + "\" orientacion=\"" + orientacion + "\"></div> </div>");
      if (wizard !== false) {
        $W.Add({
          idApply: "PanelBotones_" + id,
          items: [
            {
              xtype: "button",
              width: 80,
              icon: "settings_applications",
              text: "Configuracion",
              handler: (function(_this) {
                return function() {
                  return _ViewWizard("" + id);
                };
              })(this)
            }
          ]
        });
        for (key in wizard) {
          if (!hasProp1.call(wizard, key)) continue;
          arr = wizard[key];
          if (arr.xtype !== 'button') {
            value = arr.value ? arr.value || "" : void 0;
            required = arr.required ? arr.required || false : void 0;
            data = arr.data ? arr.data || {} : void 0;
            $W.Add({
              idApply: "PanelWizard_" + id,
              items: [
                {
                  xtype: arr.xtype,
                  label: arr.label,
                  id: arr.id,
                  required: required,
                  FormMaterial: "false",
                  DivAncho: 200,
                  value: value,
                  data: data
                }
              ]
            });
            if (arr.validate) {
              $W.Form.field({
                idApply: "form_PanelWizard_" + id + "_" + arr.id,
                type: arr.validate
              });
            }
            $W("#form_PanelWizard_" + id + "_" + arr.id).attr("fieldname", "" + arr.id);
            if (INFODEBUG === true) {
              console.log("Campo \"" + arr.xtype + "\", id: \"form_PanelCampos_" + id + "_" + arr.id + "\", Variable: \"" + arr.id + "\"");
            }
          }
        }
      }
      for (key in items) {
        if (!hasProp1.call(items, key)) continue;
        arr = items[key];
        if (arr.xtype === 'button') {
          width = arr.width ? arr.width || 65 : void 0;
          icon = arr.icon ? arr.icon || 'flash_on' : void 0;
          if (!arr.handler) {
            arr.handler = function() {
              return $W.GeneraInforme(id, file);
            };
          }
          $W.Add({
            idApply: "PanelBotones_" + id,
            items: [
              {
                xtype: "button",
                width: width,
                icon: icon,
                text: arr.text,
                handler: arr.handler
              }
            ]
          });
        } else {
          value = arr.value ? arr.value || "" : void 0;
          required = arr.required ? arr.required || false : void 0;
          data = arr.data ? arr.data || {} : void 0;
          $W.Add({
            idApply: "PanelCampos_" + id,
            items: [
              {
                xtype: arr.xtype,
                label: arr.label,
                id: arr.id,
                required: required,
                FormMaterial: "false",
                DivAncho: 200,
                value: value,
                data: data
              }
            ]
          });
          if (arr.validate) {
            $W.Form.field({
              idApply: "form_PanelCampos_" + id + "_" + arr.id,
              type: arr.validate
            });
          }
          $W("#form_PanelCampos_" + id + "_" + arr.id).attr("fieldname", "" + arr.id);
          if (INFODEBUG === true) {
            console.log("Campo \"" + arr.xtype + "\", id: \"form_PanelCampos_" + id + "_" + arr.id + "\", Variable: \"" + arr.id + "\"");
          }
        }
      }
      hoja = $W.DefineHoja(tamano, orientacion);
      arrayFilasA = document.getElementById("PanelCampos_" + id).childNodes;
      cuantos = arrayFilasA.length / 2;
      if (cuantos < 3) {
        largoPanelCampos = 210;
      }
      if (cuantos > 2 && cuantos < 7) {
        largoPanelCampos = 420;
      }
      if (cuantos > 6 && cuantos < 9) {
        largoPanelCampos = 630;
      }
      if (cuantos > 9 && cuantos < 12) {
        largoPanelCampos = 630;
      }
      $W("#PanelCampos_" + id).style('width', '' + largoPanelCampos + 'px');
      $W("#PanelScrollY_" + id).style('width', 'calc(100% + ' + largoPanelCampos + 'px');
      heigthBartabPrinci = $W("#Tbar_" + idGeneral);
      newHeightTbar = heigthBartabPrinci[0]['clientHeight'];
      $W("#BodyInformes_" + idGeneral).style('height', 'calc(100% - ' + newHeightTbar + 'px)');
      heigthBartab = $W("#tbarInformes_" + id);
      newHeight = heigthBartab[0]['clientHeight'];
      $W("#PanelInforme_" + id).style('height', 'calc(100% - ' + newHeight + 'px)');
      $W("#InformeFile_" + id).style('max-width', hoja.width + 'px');
      return $W("#InformeFile_" + id).style('min-width', hoja.width + 'px');
    };
    $W.GeneraInforme = function(id, file) {
      var A, D1, D2, FilasA, FilasW, arrayFilasA, arrayFilasB, arrayFilasC, f, field, obligatorio, params, value;
      arrayFilasA = [];
      FilasA = document.getElementById("PanelCampos_" + id).childNodes;
      D1 = 0;
      while (D1 < FilasA.length) {
        arrayFilasA.push(FilasA[D1]);
        D1++;
      }
      FilasW = document.getElementById("PanelWizard_" + id).childNodes;
      D2 = 0;
      while (D2 < FilasW.length) {
        arrayFilasA.push(FilasW[D2]);
        D2++;
      }
      params = new Object;
      A = 0;
      while (A < arrayFilasA.length) {
        console.log(arrayFilasA[A].id);
        if (document.getElementById(arrayFilasA[A].id)) {
          arrayFilasB = document.getElementById(arrayFilasA[A].id).childNodes;
          arrayFilasC = document.getElementById(arrayFilasB[3].id).childNodes;
          value = $W('#' + arrayFilasC[1].id).val();
          obligatorio = $W('#' + arrayFilasC[1].id).attr('data-required');
          f = arrayFilasC[1].id;
          field = $W("#" + f).attr("fieldname");
          if (value === '' && obligatorio === 'true') {
            $W.Error('Campo "' + field + '" Obligatorio!');
          }
          params[field] = value;
        }
        A++;
      }
      return $W.Load({
        idApply: "InformeFile_" + id,
        url: file,
        params: params
      });
    };
    $W.HtmlTableToExcel = (function() {
      var base64, format, template, uri;
      uri = 'data:application/vnd.ms-excel;base64,';
      template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>';
      base64 = function(s) {
        return window.btoa(unescape(encodeURIComponent(s)));
      };
      format = function(s, c) {
        return s.replace(/{(\w+)}/g, function(m, p) {
          return c[p];
        });
      };
      return function(table, name) {
        var ctx, link;
        if (document.getElementById(table)) {
          if (!table.nodeType) {
            table = document.getElementById(table);
          }
          ctx = {
            worksheet: name || 'Worksheet',
            table: table.innerHTML
          };
          link = document.createElement('a');
          link.download = name + '.xls';
          link.href = uri + base64(format(template, ctx));
          link.click();
        } else {
          $W.Error('No se Encuentra el informe para exportar a excel!');
        }
      };
    })();
    return $W.HtmlToPdf = function(obj) {
      var html, params, target;
      if (typeof obj.capa === 'undefined') {
        $W.Error('propiedad capa del metodo $W.HtmlToPdf esta mal definida!');
        return;
      }
      if (typeof obj.id === 'undefined') {
        $W.Error('propiedad id del metodo $W.HtmlToPdf esta mal definida!');
        return;
      }
      if (typeof obj.nombre === 'undefined') {
        $W.Error('propiedad nombre del metodo $W.HtmlToPdf esta mal definida!');
        return;
      }
      if (typeof obj.path === 'undefined') {
        $W.Error('propiedad path del metodo $W.HtmlToPdf esta mal definida!');
        return;
      }
      params = obj.options ? obj.options : {};
      target = typeof obj.target !== 'undefined' ? obj.target : 'winjs';
      if (target === 'download') {
        params.op = 'download';
      } else {
        params.op = 'view';
      }
      if (!params.tamano) {
        params.tamano = $W("#InformeFile_" + obj.id).attr("tamano");
      }
      if (!params.orientacion) {
        params.orientacion = $W("#InformeFile_" + obj.id).attr("orientacion");
      }
      if (typeof params.tamano === 'undefined') {
        params.tamano = 'A4';
      }
      if (typeof params.orientacion === 'undefined') {
        params.orientacion = 'P';
      }
      if (!params.debug) {
        params.debug = "false";
      }
      if (!params.margins) {
        params.margins = {
          "top": "10",
          "right": "10",
          "bottom": "10",
          "left": "10"
        };
      }
      params = btoa(JSON.stringify(params));
      if (document.getElementById(obj.capa)) {
        html = $W("#" + obj.capa).html();
        html = btoa(html);
        return $W.Ajax({
          url: obj.path + "GeneraPDF.php",
          params: {
            op: "guardaFile",
            nombre: obj.nombre,
            html: html,
            options: params
          },
          success: function(result, xhr) {
            var Win_PDFgenerator;
            if (target === 'winjs') {
              return Win_PDFgenerator = new $W.Window({
                id: "Win_PDFgenerator",
                title: "Generador PDF",
                width: "calc(100% - 20px)",
                height: "calc(100% - 20px)",
                html: "<iframe src=\"" + obj.path + "GeneraPDF.php?nombre=" + obj.nombre + "&params=" + params + "\" style=\"width:100%;height:100%\"></iframe>"
              });
            } else if (target === 'browser') {
              return window.open("informes/GeneraPDF.php?nombre=" + obj.nombre + "&params=" + params);
            } else if (target === 'download') {
              return window.open("informes/GeneraPDF.php?nombre=" + obj.nombre + "&params=" + params);
            } else {
              $W.Error('propiedad target del metodo $W.HtmlToPdf esta mal definida!');
            }
          },
          failure: function(xhr) {
            return console.log("fail");
          }
        });
      } else {
        $W.Error('No se Encuentra el informe para exportar a PDF!');
      }
    };
  })(Win);

  'use strict';

  (function($W) {})(Win);

  "use strict";

  (function($W) {
    var AcoordControlNivelsPlanning, ConsecutivoWinJsCalendar, GeneraCalendarioDiaDesktop, GeneraCalendarioMesDesktop, GeneraCalendarioPlanningDesktop, GeneraCalendarioTimelineDesktop, GetEventsAutoLoad, _HoraToPixel, _HoraToPixelPlanning, _checkDate, _diaSemana, _diasEntreDosFechas, _sumarDiasAFecha, _sumarDiasAFecha2, _sumarDiasAFecha3, _ultimoDiaMes, fechaPorDia;
    ConsecutivoWinJsCalendar = 0;
    AcoordControlNivelsPlanning = [];
    $W.CalendarEvent = function(obj) {
      var Ano, DIAS, Dia, MESES, Mes, os;
      if (!obj.id) {
        $W.Alert('Por favor defina el "id" del elemento CalendarEvent!');
        return;
      }
      if (!AcoordControlNivelsPlanning["" + obj.id]) {
        AcoordControlNivelsPlanning["" + obj.id] = [];
      }
      os = $W.Device().osType.toLowerCase();
      if (obj === null) {
        return;
      }
      if (!obj.idApply) {
        $W.Alert('No esta definida la capa donde se realizara el render! (idApply)');
        return;
      }
      if (!obj.type) {
        obj.type = 'mes';
      }
      if (!obj.ano) {
        $W.Alert('No esta definido el Año!');
        return;
      } else {
        Ano = obj.ano;
      }
      if (!obj.mes) {
        $W.Alert('No esta definido el Mes!');
        return;
      } else {
        Mes = obj.mes;
      }
      if (!obj.dia) {
        $W.Alert('No esta definido el Dia!');
        return;
      } else {
        Dia = obj.dia;
      }
      MESES = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
      DIAS = ['Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Domingo'];
      if (os === 'movil') {
        console.log('movil no desarrollado');
      }
      if (os === 'desktop') {
        if (obj.type === 'mes') {
          GeneraCalendarioMesDesktop(obj, MESES, DIAS, os);
        }
        if (obj.type === 'dia') {
          GeneraCalendarioDiaDesktop(obj, MESES, DIAS, os);
        }
        if (obj.type === 'timeline') {
          GeneraCalendarioTimelineDesktop(obj, MESES, DIAS, os);
        }
        if (obj.type === 'planning') {
          return GeneraCalendarioPlanningDesktop(obj, MESES, DIAS, os);
        }
      }
    };
    GeneraCalendarioPlanningDesktop = (function(_this) {
      return function(obj, MESES, DIAS, os) {
        var Ano, Ano2, Dia, Dia2, Mes, Mes2, NDia, NDia2, NMes, NMes2, NoDias, TituloY, barraContentDias, barraDias, calendarioBody, dias, fech, html, i, idApply, idContenedor, tabla_mes, titulo, tituloYPlanning, widthDias;
        Ano = obj.ano;
        Mes = obj.mes;
        Dia = obj.dia;
        Ano2 = obj.ano2;
        Mes2 = obj.mes2;
        Dia2 = obj.dia2;
        idApply = obj.idApply;
        tituloYPlanning = obj.tituloYPlanning;
        $W("#WinJsCalendar_" + obj.id).remove();
        idContenedor = document.getElementById(idApply);
        tabla_mes = document.createElement('DIV');
        tabla_mes.id = "WinJsCalendar_" + obj.id;
        tabla_mes.className = "WinJsCalendar";
        tabla_mes.setAttribute("idLabel", obj.id);
        tabla_mes.setAttribute("os", os);
        tabla_mes.setAttribute("ano", Ano);
        tabla_mes.setAttribute("mes", Mes);
        tabla_mes.setAttribute("dia", Dia);
        tabla_mes.setAttribute("ano2", Ano2);
        tabla_mes.setAttribute("mes2", Mes2);
        tabla_mes.setAttribute("dia2", Dia2);
        tabla_mes.setAttribute("type", obj.type);
        idContenedor.appendChild(tabla_mes);
        titulo = document.createElement('DIV');
        titulo.className = "barraTitulo";
        titulo.setAttribute("os", os);
        titulo.innerHTML = "<div class=\"titulo\">" + Dia + " de " + MESES[Mes - 1] + " de " + Ano + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; al &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + Dia2 + " de " + MESES[Mes2 - 1] + " de " + Ano2 + "</div>";
        tabla_mes.appendChild(titulo);
        barraContentDias = document.createElement('DIV');
        barraContentDias.className = 'barraContentDias';
        barraContentDias.setAttribute("os", os);
        tabla_mes.appendChild(barraContentDias);
        calendarioBody = document.createElement('DIV');
        calendarioBody.className = 'calendarioBody';
        calendarioBody.id = "calendarioBody_" + obj.id;
        calendarioBody.setAttribute("os", os);
        tabla_mes.appendChild(calendarioBody);
        TituloY = document.createElement('DIV');
        TituloY.className = 'TituloY';
        TituloY.setAttribute("os", os);
        TituloY.innerHTML = "" + tituloYPlanning;
        barraContentDias.appendChild(TituloY);
        barraDias = document.createElement('DIV');
        barraDias.className = 'contentDias';
        barraDias.setAttribute("os", os);
        barraContentDias.appendChild(barraDias);
        if (Mes > 9) {
          NMes = Mes;
        } else {
          NMes = "0" + Mes;
        }
        if (Dia > 9) {
          NDia = Dia;
        } else {
          NDia = "0" + Dia;
        }
        if (Mes2 > 9) {
          NMes2 = Mes2;
        } else {
          NMes2 = "0" + Mes2;
        }
        if (Dia2 > 9) {
          NDia2 = Dia2;
        } else {
          NDia2 = "0" + Dia2;
        }
        NoDias = _diasEntreDosFechas(Ano + "-" + NMes + "-" + NDia, Ano2 + "-" + NMes2 + "-" + NDia2);
        NoDias = NoDias + 1;
        widthDias = NoDias * 120;
        html = "";
        i = 0;
        while (i < NoDias) {
          if (i === 0) {
            fech = {
              ano: Ano,
              mes: Mes,
              dia: Dia
            };
          } else {
            fech = _sumarDiasAFecha(Ano, NMes, NDia, i);
          }
          html = html + ("<div class=\"diaTitle\">" + fech.dia + " de " + MESES[fech.mes - 1] + "</div>");
          i++;
        }
        dias = document.createElement('DIV');
        dias.className = 'dias';
        dias.setAttribute("os", os);
        dias.setAttribute("style", "width:" + widthDias + "px");
        dias.innerHTML = html;
        barraDias.appendChild(dias);
        if (obj.autoLoad) {
          GetEventsAutoLoad(obj, true);
        }
        if (obj.callBack) {
          return eval(obj.callBack);
        }
      };
    })(this);
    GeneraCalendarioTimelineDesktop = (function(_this) {
      return function(obj, MESES, DIAS, os) {
        var Ano, Ano2, AnoMesDia, Dia, Dia2, Mes, Mes2, NDia, NDia2, NMes, NMes2, NoDias, cabecera, cuerpo, diaTit, dias, fe, html, i, idApply, idContenedor, setWidthDias, tabla_mes, titulo, unitWidthDias, widthDiaTimeLine, widthDias;
        Ano = obj.ano;
        Mes = obj.mes;
        Dia = obj.dia;
        Ano2 = obj.ano2;
        Mes2 = obj.mes2;
        Dia2 = obj.dia2;
        idApply = obj.idApply;
        widthDiaTimeLine = obj.widthDiaTimeLine || false;
        $W("#WinJsCalendar_" + obj.id).remove();
        idContenedor = document.getElementById(idApply);
        tabla_mes = document.createElement('DIV');
        tabla_mes.id = "WinJsCalendar_" + obj.id;
        tabla_mes.className = "WinJsCalendar";
        tabla_mes.setAttribute("idLabel", obj.id);
        tabla_mes.setAttribute("os", os);
        tabla_mes.setAttribute("ano", Ano);
        tabla_mes.setAttribute("mes", Mes);
        tabla_mes.setAttribute("dia", Dia);
        tabla_mes.setAttribute("type", obj.type);
        idContenedor.appendChild(tabla_mes);
        titulo = document.createElement('DIV');
        titulo.className = "barraTitulo";
        titulo.setAttribute("os", os);
        titulo.innerHTML = "<!--<div class=\"left\" id=\"WinJsCalendarPREV\"> <i class=\"material-icons\">keyboard_arrow_left</i> </div>--> <div class=\"titulo\">" + Dia + " de " + MESES[Mes - 1] + " de " + Ano + "    a    " + Dia2 + " de " + MESES[Mes2 - 1] + " de " + Ano2 + "</div> <!--<div class=\"right\" id =\"WinJsCalendarNEXT\"> <i class=\"material-icons\">keyboard_arrow_right</i> </div>-->";
        tabla_mes.appendChild(titulo);
        $W("#WinJsCalendarPREV").off('click');
        $W("#WinJsCalendarPREV").on("click", function() {
          return $W.CalendarPrevDia(obj);
        });
        $W("#WinJsCalendarNEXT").off('click');
        $W("#WinJsCalendarNEXT").on("click", function() {
          return $W.CalendarNextDia(obj);
        });
        if (Mes > 9) {
          NMes = Mes;
        } else {
          NMes = "0" + Mes;
        }
        if (Dia > 9) {
          NDia = Dia;
        } else {
          NDia = "0" + Dia;
        }
        if (Mes2 > 9) {
          NMes2 = Mes2;
        } else {
          NMes2 = "0" + Mes2;
        }
        if (Dia2 > 9) {
          NDia2 = Dia2;
        } else {
          NDia2 = "0" + Dia2;
        }
        NoDias = _diasEntreDosFechas(Ano + "-" + NMes + "-" + NDia, Ano2 + "-" + NMes2 + "-" + NDia2);
        NoDias = NoDias + 1;
        if (widthDiaTimeLine === false) {
          setWidthDias = 240;
          widthDias = NoDias * setWidthDias;
          widthDias = widthDias + "px";
        } else {
          if (typeof widthDiaTimeLine === 'number') {
            setWidthDias = widthDiaTimeLine;
            unitWidthDias = widthDiaTimeLine + "px";
            widthDias = NoDias * setWidthDias;
            widthDias = widthDias + "px";
          }
          if (typeof widthDiaTimeLine === 'string') {
            unitWidthDias = widthDiaTimeLine;
            widthDias = '100%';
          }
        }
        html = "<div class=\"ContentDias\" style=\"width:" + widthDias + "\">";
        i = 0;
        while (i < NoDias) {
          dias = Array('Domingo', 'Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado');
          diaTit = _sumarDiasAFecha2(Ano, Mes, Dia, i);
          fe = dias[diaTit.ndia] + ' ' + diaTit.dia;
          html = html + ("<div class=\"diaTitle\" style=\"width:" + unitWidthDias + "\">" + fe + "</div>");
          i++;
        }
        html = html + "</div>";
        cabecera = document.createElement('DIV');
        cabecera.className = 'barraDias';
        cabecera.id = "TimelineBarraDias_" + obj.id;
        cabecera.setAttribute("os", os);
        cabecera.innerHTML = html;
        tabla_mes.appendChild(cabecera);
        html = "<div class=\"contentDias\" style=\"width:" + widthDias + "\">";
        i = 0;
        while (i < NoDias) {
          diaTit = _sumarDiasAFecha3(Ano, Mes, Dia, i);
          AnoMesDia = diaTit.ano + "-" + diaTit.mes + "-" + diaTit.dia;
          html = html + ("<div class=\"dia\" id=\"" + obj.id + "_contentDia_" + AnoMesDia + "\" style=\"width:" + unitWidthDias + "\"></div>");
          i++;
        }
        AnoMesDia = Ano + "-" + NMes + "-" + NDia;
        cuerpo = document.createElement('DIV');
        cuerpo.className = 'calendarioBody';
        cuerpo.id = "calendarioBody_" + obj.id;
        cuerpo.setAttribute("os", os);
        cuerpo.setAttribute("type", "dia");
        cuerpo.innerHTML = html;
        tabla_mes.appendChild(cuerpo);
        if (obj.autoLoad) {
          GetEventsAutoLoad(obj, true);
        }
        if (obj.callBack) {
          return eval(obj.callBack);
        }
      };
    })(this);
    GeneraCalendarioMesDesktop = (function(_this) {
      return function(obj, MESES, DIAS, os) {
        var Ano, AnoMes, Dia, Mes, NDia, NMes, Ndia, Nmes, cabecera, cuerpo, d, dia, dia_semana, diasMes, f, fecha, fila, i, idApply, idContenedor, select_tabla, sem, tabla_mes, titulo;
        Ano = obj.ano;
        Mes = obj.mes;
        Dia = obj.dia;
        idApply = obj.idApply;
        $W("#WinJsCalendar_" + obj.id).remove();
        idContenedor = document.getElementById(idApply);
        tabla_mes = document.createElement('DIV');
        tabla_mes.id = "WinJsCalendar_" + obj.id;
        tabla_mes.className = "WinJsCalendar";
        tabla_mes.setAttribute("idLabel", obj.id);
        tabla_mes.setAttribute("os", os);
        tabla_mes.setAttribute("ano", Ano);
        tabla_mes.setAttribute("mes", Mes);
        tabla_mes.setAttribute("dia", Dia);
        tabla_mes.setAttribute("type", obj.type);
        idContenedor.appendChild(tabla_mes);
        titulo = document.createElement('DIV');
        titulo.className = "barraTitulo";
        titulo.setAttribute("os", os);
        titulo.innerHTML = "<div class=\"left\" id=\"WinJsCalendarPREV\"> <i class=\"material-icons\">keyboard_arrow_left</i> </div> <div class=\"titulo\">" + MESES[Mes - 1] + " " + Ano + "</div> <div class=\"right\" id =\"WinJsCalendarNEXT\"> <i class=\"material-icons\">keyboard_arrow_right</i> </div>";
        tabla_mes.appendChild(titulo);
        $W("#WinJsCalendarPREV").off('click');
        $W("#WinJsCalendarPREV").on("click", function() {
          return $W.CalendarPrevMes(obj);
        });
        $W("#WinJsCalendarNEXT").off('click');
        $W("#WinJsCalendarNEXT").on("click", function() {
          return $W.CalendarNextMes(obj);
        });
        cabecera = document.createElement('DIV');
        cabecera.className = 'barraDias';
        cabecera.setAttribute("os", os);
        tabla_mes.appendChild(cabecera);
        d = 0;
        while (d < 7) {
          dia = document.createElement('DIV');
          dia.className = 'titleDias';
          dia.innerText = DIAS[d];
          dia.setAttribute("os", os);
          cabecera.appendChild(dia);
          d++;
        }
        cuerpo = document.createElement('DIV');
        cuerpo.className = "calendarioBody";
        cuerpo.setAttribute("os", os);
        tabla_mes.appendChild(cuerpo);
        f = 0;
        while (f < 6) {
          sem = f + 1;
          fila = document.createElement('DIV');
          fila.className = 'semana';
          fila.setAttribute("os", os);
          fila.id = 'semana_' + sem;
          cuerpo.appendChild(fila);
          d = 0;
          while (d < 7) {
            dia = document.createElement('DIV');
            dia.className = 'dia';
            dia.setAttribute("os", os);
            dia.inner = '';
            fila.appendChild(dia);
            d++;
          }
          f++;
        }
        diasMes = new Date(Ano, Mes, 0).getDate();
        if (Mes > 9) {
          NMes = Mes;
        } else {
          NMes = "0" + Mes;
        }
        AnoMes = Ano + "-" + NMes + "-";
        select_tabla = $W("#WinJsCalendar_" + obj.id);
        i = 1;
        while (i < diasMes + 1) {
          fecha = fechaPorDia(Ano, Mes - 1, i);
          Nmes = fecha.getMonth();
          Ndia = fecha.getDate();
          dia_semana = fecha.getDay() - 1;
          if (dia_semana === -1) {
            dia_semana = 6;
          }
          if (Ndia === 1) {
            sem = 0;
          }
          if (i > 9) {
            NDia = i;
          } else {
            NDia = "0" + i;
          }
          select_tabla[0].children[2].children[sem].children[dia_semana].innerHTML = "<div typeCal=\"mes\" class=\"titleDiaNum\">" + Ndia + "</div><div id=\"" + obj.id + "_contentDia_" + AnoMes + NDia + "\" class=\"contentDia\"></div>";
          if (dia_semana === 6 && i !== diasMes) {
            sem = sem + 1;
          }
          i++;
        }
        if (sem < 5) {
          $W("#semana_6").remove();
        } else {
          $W(".semana").style("height", "16.66666666666667%");
        }
        if (obj.autoLoad) {
          GetEventsAutoLoad(obj);
        }
        if (obj.callBack) {
          eval(obj.callBack);
        }
      };
    })(this);
    GeneraCalendarioDiaDesktop = (function(_this) {
      return function(obj, MESES, DIAS, os) {
        var Ano, AnoMesDia, Dia, Mes, NDia, NMes, cabecera, cuerpo, diaSemana, html, i, idApply, idContenedor, tabla_mes, titulo;
        Ano = obj.ano;
        Mes = obj.mes;
        Dia = obj.dia;
        idApply = obj.idApply;
        $W("#WinJsCalendar_" + obj.id).remove();
        idContenedor = document.getElementById(idApply);
        tabla_mes = document.createElement('DIV');
        tabla_mes.id = "WinJsCalendar_" + obj.id;
        tabla_mes.className = "WinJsCalendar";
        tabla_mes.setAttribute("idLabel", obj.id);
        tabla_mes.setAttribute("os", os);
        tabla_mes.setAttribute("ano", Ano);
        tabla_mes.setAttribute("mes", Mes);
        tabla_mes.setAttribute("dia", Dia);
        tabla_mes.setAttribute("type", obj.type);
        idContenedor.appendChild(tabla_mes);
        diaSemana = _diaSemana(Ano, Mes, Dia - 1);
        titulo = document.createElement('DIV');
        titulo.className = "barraTitulo";
        titulo.setAttribute("os", os);
        titulo.innerHTML = "<div class=\"left\" id=\"WinJsCalendarPREV\"> <i class=\"material-icons\">keyboard_arrow_left</i> </div> <div class=\"titulo\">" + DIAS[diaSemana] + " " + Dia + " de " + MESES[Mes - 1] + " de " + Ano + "</div> <div class=\"right\" id =\"WinJsCalendarNEXT\"> <i class=\"material-icons\">keyboard_arrow_right</i> </div>";
        tabla_mes.appendChild(titulo);
        $W("#WinJsCalendarPREV").off('click');
        $W("#WinJsCalendarPREV").on("click", function() {
          return $W.CalendarPrevDia(obj);
        });
        $W("#WinJsCalendarNEXT").off('click');
        $W("#WinJsCalendarNEXT").on("click", function() {
          return $W.CalendarNextDia(obj);
        });
        html = "";
        i = 1;
        while (i < 24) {
          html = html + ("<div class=\"diaTitle\">" + i + "</div>");
          i++;
        }
        cabecera = document.createElement('DIV');
        cabecera.className = 'barraDias';
        cabecera.setAttribute("os", os);
        cabecera.innerHTML = html;
        tabla_mes.appendChild(cabecera);
        html = "";
        i = 0;
        while (i < 24) {
          html = html + "<div class=\"dia\"></div>";
          i++;
        }
        if (Mes > 9) {
          NMes = Mes;
        } else {
          NMes = "0" + Mes;
        }
        if (Dia > 9) {
          NDia = Dia;
        } else {
          NDia = "0" + Dia;
        }
        AnoMesDia = Ano + "-" + NMes + "-" + NDia;
        html = html + ("<div typeCal=\"dia\" class=\"contentDia\" id=\"" + obj.id + "_contentDia_" + AnoMesDia + "\"></div>");
        cuerpo = document.createElement('DIV');
        cuerpo.className = 'calendarioBody';
        cuerpo.setAttribute("os", os);
        cuerpo.setAttribute("type", "dia");
        cuerpo.innerHTML = html;
        tabla_mes.appendChild(cuerpo);
        if (obj.autoLoad) {
          GetEventsAutoLoad(obj, true);
        }
        if (obj.callBack) {
          return eval(obj.callBack);
        }
      };
    })(this);
    GetEventsAutoLoad = (function(_this) {
      return function(obj, dia) {
        $W.Loading({
          text: 'Buscando eventos...'
        });
        if (!obj.autoLoad.params) {
          obj.autoLoad.params = {};
        }
        obj.autoLoad.params.Ano = obj.ano;
        obj.autoLoad.params.Mes = obj.mes;
        if (dia) {
          obj.autoLoad.params.Dia = obj.dia;
        }
        if (obj.ano2) {
          obj.autoLoad.params.Ano2 = obj.ano2;
        }
        if (obj.mes2) {
          obj.autoLoad.params.Mes2 = obj.mes2;
        }
        if (obj.dia2) {
          obj.autoLoad.params.Dia2 = obj.dia2;
        }
        return $W.Ajax({
          url: obj.autoLoad.url,
          params: obj.autoLoad.params,
          timeout: 30000,
          success: function(result, xhr) {
            var events;
            events = JSON.parse(result.responseText);
            $W.addEvents({
              events: events,
              id: obj.id
            });
            return $W.Loading();
          },
          failure: function(xhr) {
            $W.Loading();
            return $W.Alert('Error cargando eventos, por favor intente de nuevo!');
          }
        });
      };
    })(this);
    _sumarDiasAFecha = (function(_this) {
      return function(ano, mes, dia, dias) {
        var Fecha, Nmes, retorno;
        Fecha = new Date(ano + "-" + mes + "-" + dia);
        dias++;
        Fecha.setDate(Fecha.getDate() + dias);
        Nmes = Fecha.getMonth() + 1;
        retorno = {
          ano: Fecha.getFullYear(),
          mes: Nmes,
          dia: Fecha.getDate()
        };
        return retorno;
      };
    })(this);
    _sumarDiasAFecha2 = (function(_this) {
      return function(ano, mes, dia, dias) {
        var Fecha, Nmes, retorno;
        Fecha = new Date(ano + "-" + mes + "-" + dia + " 12:00:00");
        Fecha.setDate(Fecha.getDate() + dias);
        Nmes = Fecha.getMonth() + 1;
        retorno = {
          ano: Fecha.getFullYear(),
          mes: Nmes,
          dia: Fecha.getDate(),
          ndia: Fecha.getUTCDay()
        };
        return retorno;
      };
    })(this);
    _sumarDiasAFecha3 = (function(_this) {
      return function(ano, mes, dia, dias) {
        var Fecha, Nmes, Outdia, Outmes, retorno;
        Fecha = new Date(ano + "-" + mes + "-" + dia + " 12:00:00");
        Fecha.setDate(Fecha.getDate() + dias);
        Nmes = Fecha.getMonth() + 1;
        if (Fecha.getDate() < 10) {
          Outdia = "0" + Fecha.getDate();
        } else {
          Outdia = Fecha.getDate();
        }
        if (Nmes < 10) {
          Outmes = "0" + Nmes;
        } else {
          Outmes = Nmes;
        }
        retorno = {
          ano: Fecha.getFullYear(),
          mes: Outmes,
          dia: Outdia
        };
        return retorno;
      };
    })(this);
    _diasEntreDosFechas = (function(_this) {
      return function(fechai, fechaf) {
        var diff, fechaFin, fechaInicio;
        fechaInicio = new Date(fechai).getTime();
        fechaFin = new Date(fechaf).getTime();
        diff = fechaFin - fechaInicio;
        return diff / (1000 * 60 * 60 * 24);
      };
    })(this);
    fechaPorDia = function(ano, mes, dia) {
      var date;
      date = new Date(ano, mes, dia);
      return new Date(date.setDate(dia));
    };
    _HoraToPixel = function(horai, horaf) {
      var Hf, Hi, Mf, Mi, left, retorna, width;
      horai = horai.split(":");
      horaf = horaf.split(":");
      if (horai[1] === '00') {
        Mi = horai[1];
      } else {
        Mi = (horai[1] * 100) / 60;
      }
      if (horaf[1] === '00') {
        Mf = horaf[1];
      } else {
        Mf = (horaf[1] * 100) / 60;
      }
      Hi = horai[0] + Mi;
      Hf = horaf[0] + Mf;
      left = (parseInt(Hi) / 100) * 4.166666666666667;
      width = ((parseInt(Hf) - parseInt(Hi)) / 100) * 4.166666666666667;
      retorna = {
        left: left,
        width: width
      };
      return retorna;
    };
    _HoraToPixelPlanning = function(fechai, fechaf, fechaiCalendario) {
      var Nleft, left, retorna, time1, time2, time3, width;
      time1 = new Date(fechai);
      time2 = new Date(fechaf);
      time3 = new Date(fechaiCalendario);
      width = (time1.getTime() - time2.getTime()) / 1000;
      left = (time3.getTime() - time1.getTime()) / 1000;
      if (time3 > time1) {
        Nleft = "-" + ((Math.abs(left) / 60) / 60) * 5;
      } else {
        Nleft = ((Math.abs(left) / 60) / 60) * 5;
      }
      retorna = {
        left: Nleft,
        width: ((Math.abs(width) / 60) / 60) * 5
      };
      return retorna;
    };
    $W.addEvent = function(obj, id) {
      var Evento, ID1, ID2, ID3, ID4, Ndia, Ndia2, Nmes, Nmes2, NoDias, Nstyle, a, acoordEstado, acoordIco, ano, ano2, b, c, contentLevel1, contentLevel2, d, dia, dia2, dias, divContent, fechaf, fechai, i, idCalendar, idContenedor, idDiasContent, mes, mes2, obj2, obj3, obj4, os, styleObj, styles, typeCalendar, ubicacion, widthDias;
      divContent = $W("#WinJsCalendar_" + id);
      typeCalendar = divContent.attr("type");
      idCalendar = id;
      os = $W.Device().osType.toLowerCase();
      if (obj === null) {
        return;
      }

      /* CALENDARIOS **************************************************************** */
      if (typeCalendar === 'mes' || typeCalendar === 'dia' || typeCalendar === 'timeline') {
        if (!obj.date) {
          $W.Alert('No est definido el parametro "date"');
          return;
        }
        if (obj.style) {
          styles = obj.style.replace(/ /g, "");
          styles = styles.split(";");
        }
        if (!obj.horai) {
          obj.horai = "00:00:00";
        }
        if (!obj.horaf) {
          obj.horaf = "23:59:59";
        }
        if (document.getElementById(id + "_contentDia_" + obj.date)) {
          idContenedor = document.getElementById(id + "_contentDia_" + obj.date);
          Evento = document.createElement('DIV');
          Evento.id = "calendarEvent_" + ConsecutivoWinJsCalendar;
          Evento.className = obj.className || "Event";
          Evento.innerHTML = obj.html || "";
          Evento.setAttribute("os", os);
          if (typeCalendar === 'dia') {
            Nstyle = _HoraToPixel(obj.horai, obj.horaf);
            Evento.style.width = Nstyle.width + "%";
            Evento.style.marginLeft = Nstyle.left + "%";
          }
          if (obj.bgColor) {
            Evento.style.backgroundColor = obj.bgColor;
            Evento.style.border = 'none';
          }
          if (obj.handler) {
            Evento.setAttribute("onclick", obj.handler);
          }
          if (styles) {
            i = 0;
            while (i < styles.length) {
              if (styles[i] !== "") {
                styleObj = styles[i].split(":");
                eval("Evento.style." + styleObj[0] + " = \"" + styleObj[1] + "\"");
              }
              i++;
            }
          }
          idContenedor.appendChild(Evento);
          if (obj.toolTip) {
            if (!obj.toolTip.width) {
              obj.toolTip.width = 200;
            }
            $W.Tooltip({
              idApply: "calendarEvent_" + ConsecutivoWinJsCalendar,
              html: obj.toolTip.html,
              width: obj.toolTip.width
            });
          }
          ConsecutivoWinJsCalendar++;
          if (typeCalendar === 'timeline') {
            $W("#calendarioBody_" + idCalendar).on('scroll', function(e) {
              var cual;
              cual = $W("#TimelineBarraDias_" + idCalendar);
              return cual[0].scrollLeft = this.scrollLeft;
            });
          }
        }
      }

      /* PLANNING  **************************************************************** */
      if (typeCalendar === 'planning') {
        idContenedor = document.getElementById("calendarioBody_" + idCalendar);
        ano = divContent.attr("ano");
        mes = divContent.attr("mes");
        dia = divContent.attr("dia");
        ano2 = divContent.attr("ano2");
        mes2 = divContent.attr("mes2");
        dia2 = divContent.attr("dia2");
        if (mes > 9) {
          Nmes = mes;
        } else {
          Nmes = "0" + mes;
        }
        if (dia > 9) {
          Ndia = dia;
        } else {
          Ndia = "0" + dia;
        }
        if (mes2 > 9) {
          Nmes2 = mes2;
        } else {
          Nmes2 = "0" + mes2;
        }
        if (dia2 > 9) {
          Ndia2 = dia2;
        } else {
          Ndia2 = "0" + dia2;
        }
        fechai = ano + "-" + Nmes + "-" + Ndia;
        fechaf = ano2 + "-" + Nmes2 + "-" + Ndia2;
        NoDias = _diasEntreDosFechas(fechai, fechaf);
        NoDias = NoDias + 1;
        widthDias = NoDias * 120;
        dias = "";
        d = 0;
        while (d < NoDias) {
          dias = dias + "<div class=\"dia\"></div>";
          d++;
        }
        i = 0;
        while (i < obj.length) {
          ID1 = "" + obj[i].id;
          if (!AcoordControlNivelsPlanning["" + idCalendar][idCalendar + "_level1_" + ID1]) {
            AcoordControlNivelsPlanning["" + idCalendar][idCalendar + "_level1_" + ID1] = "open";
          }
          if (AcoordControlNivelsPlanning["" + idCalendar][idCalendar + "_level1_" + ID1] === "open") {
            acoordEstado = "auto";
            acoordIco = "arrow_drop_up";
          } else {
            acoordEstado = "25px";
            acoordIco = "arrow_drop_down";
          }
          if (!document.getElementById(idCalendar + "_level1_" + ID1)) {
            contentLevel1 = "<div class=\"title\"><div class=\"textTitle\" onclick=\"$W.accordLevel('" + idCalendar + "_level1_" + ID1 + "','" + idCalendar + "')\"><i class=\"material-icons\" id=\"ico_" + idCalendar + "_level1_" + ID1 + "\">" + acoordIco + "</i> " + obj[i].name + "</div></div>";
            $W("#calendarioBody_" + idCalendar).append("<div class=\"level1\" style=\"height:" + acoordEstado + "\" id=\"" + idCalendar + "_level1_" + ID1 + "\" os=\"" + os + "\">" + contentLevel1 + "</div>");
          }
          obj2 = obj[i].items;
          a = 0;
          while (a < obj2.length) {
            ID2 = obj[i].id + "_" + obj2[a].id;
            if (!AcoordControlNivelsPlanning["" + idCalendar][idCalendar + "_level2_" + ID2]) {
              AcoordControlNivelsPlanning["" + idCalendar][idCalendar + "_level2_" + ID2] = "open";
            }
            if (AcoordControlNivelsPlanning["" + idCalendar][idCalendar + "_level2_" + ID2] === "open") {
              acoordEstado = "auto";
              acoordIco = "arrow_drop_up";
            } else {
              acoordEstado = "25px";
              acoordIco = "arrow_drop_down";
            }
            if (!document.getElementById(idCalendar + "_level2_" + ID2)) {
              contentLevel2 = "<div class=\"title\"><div class=\"textTitle\" onclick=\"$W.accordLevel('" + idCalendar + "_level2_" + ID2 + "','" + idCalendar + "')\"><i class=\"material-icons\" id=\"ico_" + idCalendar + "_level2_" + ID2 + "\">" + acoordIco + "</i> " + obj2[a].name + "</div></div>";
              $W("#" + idCalendar + "_level1_" + ID1).append("<div class=\"level2\" style=\"height:" + acoordEstado + "\" id=\"" + idCalendar + "_level2_" + ID2 + "\" os=\"" + os + "\">" + contentLevel2 + "</div>");
            }
            obj3 = obj2[a].items;
            b = 0;
            while (b < obj3.length) {
              ID3 = obj[i].id + "_" + obj2[a].id + "_" + obj3[b].id;
              if (!document.getElementById(idCalendar + "_contentY_" + ID3)) {
                $W("#" + idCalendar + "_level2_" + ID2).append("<div class=\"contentY\" id=\"" + idCalendar + "_contentY_" + ID3 + "\" os=\"" + os + "\"></div>");
              }
              obj4 = obj3[b].items;
              $W("#" + idCalendar + "_contentY_" + ID3).append("<div class=\"dateY\">" + obj3[b].name + "</div>");
              $W("#" + idCalendar + "_contentY_" + ID3).append("<div id=\"" + idCalendar + "_contentDias_" + ID3 + "\" class=\"contentDias\"></div>");
              $W("#" + idCalendar + "_contentDias_" + ID3).append("<div id=\"" + idCalendar + "_Dias_" + ID3 + "\" class=\"dias\" style=\"width:" + widthDias + "px\"></div>");
              $W("#" + idCalendar + "_Dias_" + ID3).append(dias);
              c = 0;
              while (c < obj4.length) {
                ID4 = obj[i].id + "_" + obj2[a].id + "_" + obj3[b].id + "_" + obj4[c].id;
                ubicacion = _HoraToPixelPlanning(obj4[c].fechai + " " + obj4[c].horai, obj4[c].fechaf + " " + obj4[c].horaf, ano + "-" + Nmes + "-" + Ndia + " 00:00:00");
                Evento = document.createElement('DIV');
                Evento.id = "calendarEvent_" + obj4[c].id;
                Evento.className = obj.className || "Event";
                Evento.innerHTML = "" + obj4[c].label;
                Evento.style.top = "5px";
                Evento.style.width = ubicacion.width + "px";
                Evento.style.backgroundColor = obj4[c].color;
                Evento.style.left = ubicacion.left + "px";
                idDiasContent = document.getElementById(idCalendar + "_Dias_" + ID3);
                Evento.setAttribute("os", os);
                idDiasContent.appendChild(Evento);
                if (obj4[c].handler) {
                  Evento.setAttribute("onclick", obj4[c].handler);
                }
                if (obj4[c].toolTip) {
                  if (!obj4[c].toolTip.width) {
                    obj4[c].toolTip.width = 200;
                  }
                  $W.Tooltip({
                    idApply: "calendarEvent_" + obj4[c].id,
                    html: obj4[c].toolTip.html,
                    width: obj4[c].toolTip.width
                  });
                }
                c++;
              }
              b++;
            }
            a++;
          }
          i++;
        }
        if (!document.getElementById(idCalendar + "_contentYDummy")) {
          $W("#calendarioBody_" + idCalendar).afterappend("<div class=\"contentYDummy\" id=\"" + idCalendar + "_contentYDummy\" os=\"" + os + "\"></div>");
          $W("#" + idCalendar + "_contentYDummy").append("<div class=\"dateYDummy\"></div>");
          $W("#" + idCalendar + "_contentYDummy").append("<div id=\"" + idCalendar + "_contentDiasDummy\" class=\"contentDiasDummy\"></div>");
          $W("#" + idCalendar + "_contentDiasDummy").append("<div id=\"" + idCalendar + "_DiasDummy\" class=\"diasDummy\" style=\"width:" + widthDias + "px\"></div>");
          return $W("#" + idCalendar + "_contentDiasDummy").on('scroll', function(e) {
            var cuales, results;
            cuales = $W("#WinJsCalendar_" + idCalendar + " .contentDias");
            e = 0;
            results = [];
            while (e < cuales.length) {
              cuales[e].scrollLeft = this.scrollLeft;
              results.push(e++);
            }
            return results;
          });
        }
      }
    };
    $W.addEvents = function(obj) {
      var i, results;
      if (obj === null) {
        return;
      }
      i = 0;
      results = [];
      while (i < obj.events.length) {
        $W.addEvent(obj.events[i], obj.id);
        results.push(i++);
      }
      return results;
    };
    $W.accordLevel = function(obj, id) {
      var cualCapa, cualIco, idCalendar;
      idCalendar = id;
      cualCapa = $W("#" + obj);
      cualIco = $W("#ico_" + obj);
      if (AcoordControlNivelsPlanning["" + idCalendar]["" + obj] === "open") {
        cualCapa.style("height", "25px");
        cualIco.html("arrow_drop_down");
        return AcoordControlNivelsPlanning["" + idCalendar]["" + obj] = "close";
      } else {
        cualCapa.style("height", "auto");
        cualIco.html("arrow_drop_up");
        return AcoordControlNivelsPlanning["" + idCalendar]["" + obj] = "open";
      }
    };
    _diaSemana = function(y, m, d) {
      var Fecha;
      Fecha = new Date(y + "-" + m + "-" + d + " 12:00:00");
      return Fecha.getDay();
    };
    _checkDate = function(y, m, d) {
      var valido;
      return valido = m > 0 && m < 13 && y > 0 && y < 32768 && d > 0 && d <= (new Date(y, m, 0)).getDate();
    };
    _ultimoDiaMes = function(y, m, d) {
      if (_checkDate(y, m, d)) {
        return d;
      } else {
        d = d - 1;
        return _ultimoDiaMes(y, m, d);
      }
    };
    $W.CalendarPrevDia = function(obj) {
      var Ano, Dia, Mes, NAno, NDia, NMes;
      Ano = obj.ano;
      Mes = obj.mes;
      Dia = obj.dia;
      NDia = parseInt(Dia) - 1;
      if (NDia < 1) {
        NMes = parseInt(Mes) - 1;
        if (NMes === 0) {
          NMes = 12;
          NAno = parseInt(Ano) - 1;
        } else {
          NAno = Ano;
          NDia = _ultimoDiaMes(NAno, NMes, 31);
        }
      } else {
        NMes = Mes;
        NAno = Ano;
      }
      obj.ano = NAno;
      obj.mes = NMes;
      obj.dia = NDia;
      return $W.CalendarEvent(obj);
    };
    $W.CalendarNextDia = function(obj) {
      var Ano, Dia, Mes, NAno, NDia, NMes;
      Ano = obj.ano;
      Mes = obj.mes;
      Dia = obj.dia;
      NDia = parseInt(Dia) + 1;
      if (NDia > _ultimoDiaMes(Ano, Mes, 31)) {
        NMes = parseInt(Mes) + 1;
        if (NMes === 13) {
          NMes = 1;
          NAno = parseInt(Ano) + 1;
        } else {
          NAno = Ano;
        }
        NDia = 1;
      } else {
        NMes = Mes;
        NAno = Ano;
      }
      obj.ano = NAno;
      obj.mes = NMes;
      obj.dia = NDia;
      return $W.CalendarEvent(obj);
    };
    $W.CalendarPrevMes = function(obj) {
      var Ano, Mes, NAno, NMes;
      Ano = obj.ano;
      Mes = obj.mes;
      NMes = parseInt(Mes) - 1;
      if (NMes === 0) {
        NMes = 12;
        NAno = parseInt(Ano) - 1;
      } else {
        NAno = Ano;
      }
      obj.ano = NAno;
      obj.mes = NMes;
      return $W.CalendarEvent(obj);
    };
    return $W.CalendarNextMes = function(obj) {
      var Ano, Mes, NAno, NMes;
      Ano = obj.ano;
      Mes = obj.mes;
      NMes = parseInt(Mes) + 1;
      if (NMes === 13) {
        NMes = 1;
        NAno = parseInt(Ano) + 1;
      } else {
        NAno = Ano;
      }
      obj.ano = NAno;
      obj.mes = NMes;
      return $W.CalendarEvent(obj);
    };
  })(Win);

}).call(this);
