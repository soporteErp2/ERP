<?php
 namespace App\Http\Controllers; use DB; use Illuminate\Http\Request; class WinController extends Controller { public function index(Request $request) { switch ($request->type) { case 'query': return $this->searchQuery($request); break; case 'update': return $this->updateQuery($request); break; case 'insert': return $this->insertQuery($request); break; case 'delete': return $this->deleteQuery($request); break; } } private function deleteQuery($request) { $query = DB::table($request->table) ->where($request->where) ->delete(); $response = $query; return json_encode($response); } private function insertQuery($request) { $query = DB::table($request->table); if (gettype($request->fields) == 'array' && count($request->fields) > 0) { $query->insert($request->fields); } $response = array('response' => DB::getPdo()->lastInsertId(), 'error' => false); return json_encode($response); } private function updateQuery($request) { $query = DB::table($request->table); if (gettype($request->where) == 'array' && count($request->where) > 0) { $query->where($request->where); } if (gettype($request->fields) == 'array' && count($request->fields) > 0) { $query->update($request->fields); } $response = array('response' => '', 'error' => false); return json_encode($response); } private function searchQuery($request) { $query = DB::table($request->table . ' AS T1'); if (gettype($request->select) == 'array' && count($request->select) > 0) { $query->select($request->select); } if (gettype($request->where) == 'array' && count($request->where) > 0) { $query->where($request->where); } if (gettype($request->searchOr) == 'array' && count($request->searchOr) > 0) { $query->where(function ($query) use ($request) { if (count($request->searchOr) > 0) { for ($i = 0; $i < count($request->searchOr); $i++) { $query->orWhere($request->searchOr[$i][0], $request->searchOr[$i][1], $request->searchOr[$i][2]); } } }); } if (gettype($request->order) == 'array' && count($request->order) > 0) { $query->orderBy($request->order[0], $request->order[1]); } if (gettype($request->sqlGroup) == 'array' && count($request->sqlGroup) > 0) { $query->groupBy($request->sqlGroup); } foreach ($request->join as $key => $value) { if ($value[0] == 'INNER') { $query->Join($value[1], $value[2], $value[3], $value[4]); } else if ($value[0] == 'LEFT') { $query->LeftJoin($value[1], $value[2], $value[3], $value[4]); } else { $query->RightJoin($value[1], $value[2], $value[3], $value[4]); } } $response = array('response' => $query->get(), 'error' => false, 'count' => count($query->get())); return json_encode($response); } } 