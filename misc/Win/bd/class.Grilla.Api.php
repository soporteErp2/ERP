<?php
require_once "class.Form.Api.php"; error_reporting(E_ALL); error_reporting(-1); ini_set('display_errors', '1'); class Grilla extends Form { public $Toolbar = false; public $FieldToolbar = ''; public $FieldOrder = ''; public $SqlLimit = '0,50'; public $SqlGroup = array(); public $SqlOrder = array(); public $SqlWhere = array(); public $searchOr = array(); public $SqlDebug = false; public $SqlJoin = array(); public $SqlJoins = array(); public $Api = ''; public $EventDelete = true; public $EventInsert = true; public $EventUpdate = true; public $TextBtnNuevo = 'Nuevo'; public $Tbar = true; public $TbarHeight = 64; private $AdvancedToolbar = 'disable'; private $ValueToolbar = ''; private $ActiveOrder = ''; private $Pagina = 1; private $MaxPage = 1; private $ContCol = 1; private $ArrayFieldDb = array(); private $ArrayCol = array(); private $GrillaIni = array(); private $ArrayFilter = array(); private $ArrayCtxMenu = array(); private $FilterData = array(); public function __construct($varPos) { $this->ArrayFieldDb[] = "T1.id"; if (isset($varPos['contador'])) {} if (isset($varPos['pagina'])) {$this->Pagina = parent::ValidateVar($varPos['pagina']);} if (isset($varPos['opcionClass'])) {$this->OpcionClass = parent::ValidateVar($varPos['opcionClass']);} if (isset($varPos['advancedToolbar'])) {$this->AdvancedToolbar = parent::ValidateVar($varPos['advancedToolbar']);} if (isset($varPos['valueToolbar'])) {$this->ValueToolbar = parent::ValidateVar($varPos['valueToolbar']);} if (isset($varPos['activeOrder'])) {$this->ActiveOrder = $varPos['activeOrder'];} if (isset($varPos['FilterData'])) {$this->FilterData = $varPos['FilterData'];} parent::__construct($varPos, 'grid'); } public function AddCol($title, $field, $width, $replace = '') { $nameCol = $this->NameFielQuery($field); $this->ArrayCol[$nameCol] = array("type" => "col", "title" => $title, "width" => $width, "replace" => $replace); $this->ArrayFieldDb[] = $field; } public function AddColHtml($title, $html, $width, $replace = '') { $arrayVar = $this->ReplaceVar($html); $this->ArrayCol["campo_" . $this->ContCol] = array("type" => "html", "title" => $title, "html" => $html, "width" => $width, "replace" => $replace, "arrayVar" => $arrayVar); $this->ContCol++; } public function AddColStyle($field, $styleCss, $validate = '') { $nameCol = $this->NameFielQuery($field); $this->ArrayCol[$nameCol]['style'] = $styleCss; } public function AddColFunction($campoMysql, $name, $option1 = "", $option2 = "") { $nameCol = $this->NameFielQuery($campoMysql); $this->ArrayCol[$nameCol]['function'] = array("name" => $name, "option1" => $option1, "option2" => $option2); } public function AddFilter($title, $id, $value) {$this->ArrayFilter[] = array('title' => $title, 'id' => $id, 'value' => $value);} public function AddCtxMenu($txt, $handler, $icon) { $arrayVar = $this->ReplaceVar($handler); $this->ArrayCtxMenu[] = array('text' => $txt, 'cls' => $icon, 'handler' => $handler, 'arrayVar' => $arrayVar); } public function SqlJoin($type, $table, $compare1, $signo, $compare2) { $this->SqlJoins[] = [$type, $table, $compare1, $signo, $compare2]; } public function AddFilterAside($title, $idCampo) { $arrayDat = $this->ReplaceDat(1, $idCampo, '', '', '', ''); $this->ArrayFilter[] = array("title" => $title, "idCampo" => $idCampo, "labels" => $arrayDat); } public function AddFilterAsideJoin($title, $idCampo, $tabla, $idJoin, $nombreJoin) { $arrayDat = $this->ReplaceDat(2, $idCampo, $tabla, $idJoin, $nombreJoin); $this->ArrayFilter[] = array("title" => $title, "idCampo" => $idCampo, 'labels' => $arrayDat); } private function ReplaceDat($tipo, $idCampo, $tabla, $idJoin, $nombreJoin) { $arrayLabels = array(); $whereSql = $this->SqlWhere; $query = array( 'type' => 'query', 'select' => [$idCampo], 'table' => $this->Table, 'join' => $this->SqlJoins, 'where' => $this->SqlWhere, 'sqlGroup' => [$idCampo], 'order' => $this->SqlOrder); $result1 = parent::ResponseApi($query, $this->Api); if (!$result1) { echo "error en la consulta!<br>"; var_dump($query);exit; } foreach ((array) $result1->response as $rows) { $row1 = (array) $rows; $idCampoPunto = explode(".", $idCampo); $idCampo = count($idCampoPunto) > 1 ? $idCampoPunto[1] : $idCampo; $row1['cuantos'] = $result1->count; $whereC = array($idJoin, '=', $row1[$idCampo]); $SQL2 = array( 'type' => 'query', 'select' => [$nombreJoin], 'table' => $tabla, 'join' => [], 'where' => [$whereC], 'sqlGroup' => [], 'order' => []); $result = parent::ResponseApi($SQL2, $this->Api); if (!$result) { echo "error en la consulta!<br>"; var_dump($SQL2);exit; } if (isset($result->response[0]) && count((array) $result->response[0]) > 0) { $label = (array) $result->response[0]; $label = $label[$nombreJoin]; $arrayLabels[] = array('label' => $label, 'cantidad' => $result1->count, 'valor' => $row1[$idCampo]); } } return $arrayLabels; } public function IniClass() { $this->FNameWindow = 'Win_grilla_form_' . $this->Name; if ($this->OpcionClass == 'vUpdate' || $this->OpcionClass == 'vInsert') {parent::IniClass();return;} else if ($this->OpcionClass == 'updateRow' || $this->OpcionClass == 'insertRow') {$this->SelectRowSql();return;} else if ($this->OpcionClass == 'fUpdate' || $this->OpcionClass == 'fInsert') { parent::SetFormData(); $this->SelectRowSql();return;} else if ($this->OpcionClass == 'fDelete') {parent::DeleteFormData('grilla');return;} $like = ($this->AdvancedToolbar == 'enable') ? '' : '%'; $acumWhere = ""; $whereSql = $this->SqlWhere; if ($this->ValueToolbar != '') { $arrayToolbar = explode(',', $this->FieldToolbar); foreach ($arrayToolbar as $field) { $this->searchOr[] = [$field, 'like', $like . $this->ValueToolbar . $like]; } } $sqlGroup = $this->SqlGroup; $sqlOrder = $this->SqlOrder; $query = array( 'type' => 'query', 'select' => ['T1.id'], 'table' => $this->Table, 'join' => $this->SqlJoins, 'where' => $whereSql, 'sqlGroup' => $this->SqlGroup, 'searchOr' => $this->searchOr, 'order' => $this->SqlOrder); $sqlQueryCont = parent::ResponseApi($query, $this->Api); if (!$sqlQueryCont) { echo "error en la consulta!<br>"; var_dump($query);exit; } $contData = $sqlQueryCont->count; $this->CreatePaginacion($this->SqlLimit, $contData); $arrayField = array_unique($this->ArrayFieldDb); $campos = implode(",", $arrayField); $jsonOrder = array(); if ($this->ActiveOrder != "") { $jsonOrder = json_decode($this->ActiveOrder, true); if (isset($jsonOrder['field']) && isset($jsonOrder['state'])) { $state = ($jsonOrder['state'] == "upOn") ? 'ASC' : 'DESC'; $sqlOrder = ' ORDER BY ' . $jsonOrder['field'] . ' ' . $state; } } if ($this->OpcionClass == 'aplyFilter') { $arrayFilterData = json_decode(str_replace("'", "\"", $this->FilterData), true); for ($i = 0; $i < count($arrayFilterData); $i++) { $this->SqlWhere[] = array($arrayFilterData[$i]['campo'], '=', $arrayFilterData[$i]['valor']); } } $SqlQueryDatas = array( 'type' => 'query', 'select' => $arrayField, 'table' => $this->Table, 'join' => $this->SqlJoins, 'where' => $this->SqlWhere, 'sqlGroup' => $this->SqlGroup, 'searchOr' => $this->searchOr, 'order' => $this->SqlOrder); $SqlQueryData = parent::ResponseApi($SqlQueryDatas, $this->Api); if (!$SqlQueryData) { echo "error en la consulta!<br>"; var_dump($SqlQueryDatas);exit; } $contQueryData = $SqlQueryData->count; if ($this->SqlDebug == true) {echo $this->SqlQueryData;} if ($this->Vwidth == '') {$this->Vwidth = $this->FAncho;} if ($this->Vheight == '') {$this->Vheight = $this->FAlto;} $this->GrillaIni['pagina'] = $this->Pagina; $this->GrillaIni['maxPage'] = $this->MaxPage; $this->GrillaIni['idApply'] = "parent_grilla_" . $this->Name; $this->GrillaIni['opcionClass'] = $this->OpcionClass; $this->GrillaIni['filterAside'] = $this->ArrayFilter; $this->GrillaIni['name'] = utf8_encode($this->Name); $this->GrillaIni['url'] = $_SERVER['SCRIPT_NAME']; $this->GrillaIni['tbar'] = $this->Tbar; $this->GrillaIni['tbarHeight'] = $this->TbarHeight; $this->GrillaIni['toolbar'] = $this->Toolbar; $this->GrillaIni['valueToolbar'] = utf8_encode($this->ValueToolbar); $this->GrillaIni['advancedToolbar'] = $this->AdvancedToolbar; $this->GrillaIni['fPermisoInsert'] = $this->FPermisoInsert; $this->GrillaIni['textBtnNuevo'] = $this->TextBtnNuevo; $this->GrillaIni['columNumber'] = $this->columNumber; $this->GrillaIni['eventDelete'] = $this->EventDelete; $this->GrillaIni['eventInsert'] = $this->EventInsert; $this->GrillaIni['eventUpdate'] = $this->EventUpdate; $this->GrillaIni['fNameWindow'] = $this->FNameWindow; $this->GrillaIni['fTitle'] = utf8_encode($this->FTitle); $this->GrillaIni['Vwidth'] = $this->Vwidth; $this->GrillaIni['VmaxWidth'] = $this->VmaxWidth; $this->GrillaIni['VminWidth'] = $this->VminWidth; $this->GrillaIni['Vheight'] = $this->Vheight; $this->GrillaIni['VminHeight'] = $this->VminHeight; $this->GrillaIni['VmaxHeight'] = $this->VmaxHeight; $this->GrillaIni['VmaxHeight'] = $this->VmaxHeight; $this->GrillaIni['VscrollY'] = $this->VscrollY; $this->GrillaIni['VscrollX'] = $this->VscrollY; $this->GrillaIni['titleItems'] = $this->AddTitleFilaGrilla($jsonOrder); foreach ((array) $SqlQueryData->response as $rows) { $row = (array) $rows; $sqlData = $this->AddBodyFilaGrilla($row); $this->GrillaIni['rows'][] = array('idRow' => $row['id'], 'cols' => $sqlData['cols'], 'ctxmenu' => json_encode($sqlData['ctxmenu'])); } if ($this->OpcionClass == '') {echo '<div id="parent_grilla_' . $this->Name . '" class="parent_grilla" style="height:100%;" data-role="win-body"></div>';} echo '<script>$W.Grilla.ini(' . json_encode($this->GrillaIni) . ',' . $this->VarPost . ');</script>'; } private function Codigo($codigo, $length = 4, $str = "0") {return str_pad($codigo, $length, $str, STR_PAD_LEFT);} private function Moneda($valor, $simbolo = "", $decimales = 0) { if ($simbolo == "") { $sql = "SELECT simbolo,decimales FROM configuracion_moneda WHERE predeterminado = 'true'"; $query = $this->ApiSql->query($sql); $simbolo = $this->ApiSql->result($query, 0, "simbolo"); $decimales = $this->ApiSql->result($query, 0, "decimales"); } return $simbolo . ' ' . number_format($valor, $decimales); } private function ReplaceValue($valor, $replace) { $value = $valor; $countDefault = 0; if ($replace != '') { $cont = explode(",", $replace); if (count($cont) < 2) {$cont[] = $replace;} foreach ($cont as $values) { $valorReplace = explode(":", $values); if (count($valorReplace) > 1 && $valorReplace[0] == $valor) { $countDefault++; $value = $valorReplace[1]; } else if ($countDefault == 0 && $valorReplace[0] == "default") { $value = $valorReplace[1]; } } } return $value; } private function Fecha($fecha) { if ($fecha == '') {return '';} list($date, $time) = explode(' ', $fecha); list($year, $month, $day) = explode('-', $date); $ww = date('w', mktime(0, 0, 0, date($month), date($day), date($year))); $dias = array("Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado"); $meses = array("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"); $resultado = $dias[$ww] . " " . $day . " " . $meses[$month - 1] . " de " . $year; if ($time != '') {$resultado .= " - " . $time;} return $resultado; } private function ReplaceVar($html) { preg_match_all('/\[[^\]]*\]/', $html, $array); $result = str_replace(array('[', ']'), '', $array[0]); $this->ArrayFieldDb = array_merge($this->ArrayFieldDb, $result); return $result; } private function CreatePaginacion($limit, $total) { $limi = explode(',', $limit); $pag = ceil($total / $limi[1]); if ($pag > 1) { $this->MaxPage = $pag; $newInicio = $limi[1] * ($this->Pagina - 1); $this->SqlLimit = $newInicio . ',' . $limi[1]; } } private function AddTitleFilaGrilla($jsonOrder) { $arrayCol = array(); $arrayOrder = array(); if ($this->FieldOrder != "") { $arrayCampos = explode(",", $this->FieldOrder); foreach ($arrayCampos as $field) { $field = $this->NameFielQuery($field); $arrayOrder[$field] = true; } } foreach ($this->ArrayCol as $indice => $field) { $order = (isset($arrayOrder[$indice])) ? "true" : "false"; $state = "false"; if (isset($jsonOrder['field'])) { if ($indice == $jsonOrder['field']) {$state = $jsonOrder['state'];} } $arrayCol[] = array("field" => $indice, "width" => $field['width'], "title" => $field["title"], "order" => $order, "state" => $state); } return $arrayCol; } private function AddBodyFilaGrilla($row) { $arrayCol = array(); foreach ($this->ArrayCol as $indice => $field) { $style = ''; if ($field['type'] == 'col') { $value = $row[$indice]; if (isset($field['function'])) { switch ($field['function']['name']) { case "fecha": $value = $this->Fecha($value); break; case "codigo": $value = $this->Codigo($value, $field['function']['option1']); break; case "moneda": $value = $this->Moneda($value, $field['function']['option1'], $field['function']['option2']); break; } } if (isset($field['style'])) {$style = $field['style'];} } else { $arrayHtml = $field['arrayVar']; for ($i = 0, $j = count($arrayHtml); $i < $j; $i++) { $campoSql = $this->NameFielQuery($arrayHtml[$i]); $field['html'] = str_replace("[" . $arrayHtml[$i] . "]", $row[$campoSql], $field['html']); } $value = $field['html']; } $value = $this->ReplaceValue(trim($value), trim($field['replace'])); $arrayCol[$indice] = array("html" => $value, "id" => $row['id'], "width" => $field['width'], "style" => $style, "type" => $field['type']); } $ctxMenu = array(); foreach ($this->ArrayCtxMenu as $optionMenu) { $arrayHtml = $optionMenu['arrayVar']; for ($i = 0, $j = count($arrayHtml); $i < $j; $i++) { $campoSql = $this->NameFielQuery($arrayHtml[$i]); $optionMenu['handler'] = str_replace("[" . $arrayHtml[$i] . "]", $row[$campoSql], $optionMenu['handler']); } $ctxMenu[] = $optionMenu; } return array('cols' => $arrayCol, 'ctxmenu' => $ctxMenu); } private function SelectRowSql() { $arrayField = array_unique($this->ArrayFieldDb); $sqlData = array( 'type' => 'query', 'select' => $arrayField, 'table' => $this->Table, 'join' => $this->SqlJoins, 'where' => [['T1.id', '=', $this->IndexClass]], 'sqlGroup' => [], 'order' => []); $sqlQuery = parent::ResponseApi($sqlData, $this->Api); if (!$sqlQuery) { echo "error en la consulta!<br>"; var_dump($sqlData);exit; } $dataSql = count((array) $sqlQuery->response) > 0 ? (array) $sqlQuery->response[0] : []; $sqlData = $this->AddBodyFilaGrilla($dataSql); $arrayFila[] = array('idRow' => $this->IndexClass, 'cols' => $sqlData['cols'], 'ctxmenu' => $sqlData['ctxmenu']); $arrayResponse = array('estado' => 'true', 'type' => 'grilla', 'idRow' => $this->IndexClass, 'eventUpdate' => $this->EventUpdate, 'fNameWindow' => $this->FNameWindow, 'width' => $this->Vwidth, 'minWidth' => $this->VminWidth, 'maxWidth' => $this->VmaxWidth, 'height' => $this->Vheight, 'minHeight' => $this->VminHeight, 'maxHeight' => $this->VmaxHeight, 'scrollX' => $this->VscrollX, 'scrollY' => $this->VscrollY, 'fTitle' => utf8_encode($this->FTitle), 'rows' => $arrayFila, 'fCloseWindow' => $this->FCloseWindow, ); echo json_encode($arrayResponse); } private function NameFielQuery($field) { $field = str_replace(" ", "", $field); if (strpos($field, "AS")) {list($text, $field) = explode("AS", $field);} else if (strpos($field, ".")) {list($text, $field) = explode(".", $field);} return $field; } } 